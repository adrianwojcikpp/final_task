
final_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080087c0  080087c0  000187c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008854  08008854  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800885c  0800885c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000088  080088ec  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080088ec  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001987f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317a  00000000  00000000  00039937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0003cab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0003dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027afe  00000000  00000000  0003ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182d0  00000000  00000000  00066896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2302  00000000  00000000  0007eb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f84  00000000  00000000  00170ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080087a8 	.word	0x080087a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080087a8 	.word	0x080087a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	b299      	uxth	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f107 020f 	add.w	r2, r7, #15
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	f001 fef1 	bl	8002bec <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	791b      	ldrb	r3, [r3, #4]
 8000e16:	b299      	uxth	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f107 020f 	add.w	r2, r7, #15
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	f001 fee2 	bl	8002bec <HAL_I2C_Master_Transmit>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	b299      	uxth	r1, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f107 020c 	add.w	r2, r7, #12
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f001 ffc1 	bl	8002dd4 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 8000e52:	7b3b      	ldrb	r3, [r7, #12]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	7b7a      	ldrb	r2, [r7, #13]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb7a 	bl	8000554 <__aeabi_i2d>
 8000e60:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <BH1750_ReadLux+0x58>)
 8000e66:	f7ff fd09 	bl	800087c <__aeabi_ddiv>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fdeb 	bl	8000a4c <__aeabi_d2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	ee07 3a90 	vmov	s15, r3
}
 8000e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	3ff33333 	.word	0x3ff33333

08000e8c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b81      	ldr	r3, [pc, #516]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a80      	ldr	r2, [pc, #512]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b7e      	ldr	r3, [pc, #504]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eba:	4b7b      	ldr	r3, [pc, #492]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a7a      	ldr	r2, [pc, #488]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b78      	ldr	r3, [pc, #480]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0320 	and.w	r3, r3, #32
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	4b75      	ldr	r3, [pc, #468]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a74      	ldr	r2, [pc, #464]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b72      	ldr	r3, [pc, #456]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b6f      	ldr	r3, [pc, #444]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a6e      	ldr	r2, [pc, #440]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b6c      	ldr	r3, [pc, #432]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b69      	ldr	r3, [pc, #420]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a68      	ldr	r2, [pc, #416]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b66      	ldr	r3, [pc, #408]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a62      	ldr	r2, [pc, #392]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f32:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a5c      	ldr	r2, [pc, #368]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <MX_GPIO_Init+0x21c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f50:	4856      	ldr	r0, [pc, #344]	; (80010ac <MX_GPIO_Init+0x220>)
 8000f52:	f001 fd63 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2140      	movs	r1, #64	; 0x40
 8000f5a:	4855      	ldr	r0, [pc, #340]	; (80010b0 <MX_GPIO_Init+0x224>)
 8000f5c:	f001 fd5e 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	484f      	ldr	r0, [pc, #316]	; (80010b4 <MX_GPIO_Init+0x228>)
 8000f78:	f001 fba4 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f7c:	2332      	movs	r3, #50	; 0x32
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8c:	230b      	movs	r3, #11
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4847      	ldr	r0, [pc, #284]	; (80010b4 <MX_GPIO_Init+0x228>)
 8000f98:	f001 fb94 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f9c:	2386      	movs	r3, #134	; 0x86
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fac:	230b      	movs	r3, #11
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4840      	ldr	r0, [pc, #256]	; (80010b8 <MX_GPIO_Init+0x22c>)
 8000fb8:	f001 fb84 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fbc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4835      	ldr	r0, [pc, #212]	; (80010ac <MX_GPIO_Init+0x220>)
 8000fd6:	f001 fb75 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fec:	230b      	movs	r3, #11
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	482d      	ldr	r0, [pc, #180]	; (80010ac <MX_GPIO_Init+0x220>)
 8000ff8:	f001 fb64 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ffc:	2340      	movs	r3, #64	; 0x40
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4827      	ldr	r0, [pc, #156]	; (80010b0 <MX_GPIO_Init+0x224>)
 8001014:	f001 fb56 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4821      	ldr	r0, [pc, #132]	; (80010b0 <MX_GPIO_Init+0x224>)
 800102c:	f001 fb4a 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001030:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001042:	230a      	movs	r3, #10
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <MX_GPIO_Init+0x22c>)
 800104e:	f001 fb39 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_GPIO_Init+0x22c>)
 8001068:	f001 fb2c 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800106c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107e:	230b      	movs	r3, #11
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <MX_GPIO_Init+0x224>)
 800108a:	f001 fb1b 	bl	80026c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2028      	movs	r0, #40	; 0x28
 8001094:	f001 fa3f 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001098:	2028      	movs	r0, #40	; 0x28
 800109a:	f001 fa58 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020000 	.word	0x40020000

080010bc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_I2C1_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_I2C1_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_I2C1_Init+0x74>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <MX_I2C1_Init+0x74>)
 80010f8:	f001 fce8 	bl	8002acc <HAL_I2C_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001102:	f000 fcb9 	bl	8001a78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_I2C1_Init+0x74>)
 800110a:	f002 ff45 	bl	8003f98 <HAL_I2CEx_ConfigAnalogFilter>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001114:	f000 fcb0 	bl	8001a78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_I2C1_Init+0x74>)
 800111c:	f002 ff87 	bl	800402e <HAL_I2CEx_ConfigDigitalFilter>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 fca7 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000c0 	.word	0x200000c0
 8001134:	40005400 	.word	0x40005400
 8001138:	20404768 	.word	0x20404768

0800113c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <MX_I2C2_Init+0x78>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <MX_I2C2_Init+0x7c>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_I2C2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_I2C2_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C2_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001178:	f001 fca8 	bl	8002acc <HAL_I2C_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001182:	f000 fc79 	bl	8001a78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <MX_I2C2_Init+0x74>)
 800118a:	f002 ff05 	bl	8003f98 <HAL_I2CEx_ConfigAnalogFilter>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001194:	f000 fc70 	bl	8001a78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_I2C2_Init+0x74>)
 800119c:	f002 ff47 	bl	800402e <HAL_I2CEx_ConfigDigitalFilter>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 fc67 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000010c 	.word	0x2000010c
 80011b4:	40005800 	.word	0x40005800
 80011b8:	20404768 	.word	0x20404768

080011bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ac      	sub	sp, #176	; 0xb0
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	2284      	movs	r2, #132	; 0x84
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 fe79 	bl	8007ed4 <memset>
  if(i2cHandle->Instance==I2C1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a4b      	ldr	r2, [pc, #300]	; (8001314 <HAL_I2C_MspInit+0x158>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d14d      	bne.n	8001288 <HAL_I2C_MspInit+0xcc>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fc6a 	bl	8004ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001206:	f000 fc37 	bl	8001a78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122a:	2312      	movs	r3, #18
 800122c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800123c:	2304      	movs	r3, #4
 800123e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001246:	4619      	mov	r1, r3
 8001248:	4834      	ldr	r0, [pc, #208]	; (800131c <HAL_I2C_MspInit+0x160>)
 800124a:	f001 fa3b 	bl	80026c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a31      	ldr	r2, [pc, #196]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 8001254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	201f      	movs	r0, #31
 800126c:	f001 f953 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001270:	201f      	movs	r0, #31
 8001272:	f001 f96c 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2020      	movs	r0, #32
 800127c:	f001 f94b 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001280:	2020      	movs	r0, #32
 8001282:	f001 f964 	bl	800254e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001286:	e041      	b.n	800130c <HAL_I2C_MspInit+0x150>
  else if(i2cHandle->Instance==I2C2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <HAL_I2C_MspInit+0x164>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d13c      	bne.n	800130c <HAL_I2C_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001296:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 fc16 	bl	8004ad4 <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_I2C_MspInit+0xf6>
      Error_Handler();
 80012ae:	f000 fbe3 	bl	8001a78 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012e2:	2304      	movs	r3, #4
 80012e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <HAL_I2C_MspInit+0x168>)
 80012f0:	f001 f9e8 	bl	80026c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 80012fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_I2C_MspInit+0x15c>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
}
 800130c:	bf00      	nop
 800130e:	37b0      	adds	r7, #176	; 0xb0
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40005400 	.word	0x40005400
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400
 8001320:	40005800 	.word	0x40005800
 8001324:	40021400 	.word	0x40021400

08001328 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800133e:	2308      	movs	r3, #8
 8001340:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001342:	2028      	movs	r0, #40	; 0x28
 8001344:	f000 ffe8 	bl	8002318 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	2130      	movs	r1, #48	; 0x30
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f829 	bl	80013a8 <lcd_write>
	HAL_Delay(5);
 8001356:	2005      	movs	r0, #5
 8001358:	f000 ffde 	bl	8002318 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	2130      	movs	r1, #48	; 0x30
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f81f 	bl	80013a8 <lcd_write>
	HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 ffd4 	bl	8002318 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	2130      	movs	r1, #48	; 0x30
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f815 	bl	80013a8 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f80e 	bl	80013a8 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	210c      	movs	r1, #12
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f807 	bl	80013a8 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f89f 	bl	80014de <lcd_clear>

}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	460b      	mov	r3, r1
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	4613      	mov	r3, r2
 80013b8:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	f023 030f 	bic.w	r3, r3, #15
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80013d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013d4:	f023 030f 	bic.w	r3, r3, #15
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013de:	4313      	orrs	r3, r2
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001404:	4313      	orrs	r3, r2
 8001406:	b25b      	sxtb	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	b299      	uxth	r1, r3
 8001410:	f107 020c 	add.w	r2, r7, #12
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2304      	movs	r3, #4
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <lcd_write+0x88>)
 800141c:	f001 fbe6 	bl	8002bec <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001420:	2005      	movs	r0, #5
 8001422:	f000 ff79 	bl	8002318 <HAL_Delay>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000010c 	.word	0x2000010c

08001434 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	2300      	movs	r3, #0
 8001442:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800144e:	2308      	movs	r3, #8
 8001450:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f843 	bl	80014de <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffa1 	bl	80013a8 <lcd_write>
	while(lcd->f_line[i])
 8001466:	e00f      	b.n	8001488 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7818      	ldrb	r0, [r3, #0]
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	7859      	ldrb	r1, [r3, #1]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f7ff ff93 	bl	80013a8 <lcd_write>
		i++;
 8001482:	7bbb      	ldrb	r3, [r7, #14]
 8001484:	3301      	adds	r3, #1
 8001486:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1e9      	bne.n	8001468 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	21c0      	movs	r1, #192	; 0xc0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff81 	bl	80013a8 <lcd_write>
	while(lcd->s_line[i])
 80014a6:	e00f      	b.n	80014c8 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7818      	ldrb	r0, [r3, #0]
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	7c99      	ldrb	r1, [r3, #18]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	f7ff ff73 	bl	80013a8 <lcd_write>
		i++;
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	3301      	adds	r3, #1
 80014c6:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	7c9b      	ldrb	r3, [r3, #18]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e9      	bne.n	80014a8 <lcd_display+0x74>
	}
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80014f4:	2308      	movs	r3, #8
 80014f6:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	2101      	movs	r1, #1
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff51 	bl	80013a8 <lcd_write>
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int v1,v2,v3;
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &input, 4);
 8001518:	2204      	movs	r2, #4
 800151a:	494d      	ldr	r1, [pc, #308]	; (8001650 <HAL_UART_RxCpltCallback+0x140>)
 800151c:	484d      	ldr	r0, [pc, #308]	; (8001654 <HAL_UART_RxCpltCallback+0x144>)
 800151e:	f005 fab0 	bl	8006a82 <HAL_UART_Receive_IT>
	char idx =input[0];
 8001522:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <HAL_UART_RxCpltCallback+0x140>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	75fb      	strb	r3, [r7, #23]

	if(idx=='S'){
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b53      	cmp	r3, #83	; 0x53
 800152c:	d12c      	bne.n	8001588 <HAL_UART_RxCpltCallback+0x78>

		v1 = (int)(input[1]-'0');
 800152e:	4b48      	ldr	r3, [pc, #288]	; (8001650 <HAL_UART_RxCpltCallback+0x140>)
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	3b30      	subs	r3, #48	; 0x30
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_UART_RxCpltCallback+0x148>)
 8001536:	6013      	str	r3, [r2, #0]
		v2 = (int)(input[2]-'0');
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <HAL_UART_RxCpltCallback+0x140>)
 800153a:	789b      	ldrb	r3, [r3, #2]
 800153c:	3b30      	subs	r3, #48	; 0x30
 800153e:	4a47      	ldr	r2, [pc, #284]	; (800165c <HAL_UART_RxCpltCallback+0x14c>)
 8001540:	6013      	str	r3, [r2, #0]
		v3 = (int)(input[3]-'0');
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <HAL_UART_RxCpltCallback+0x140>)
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	3b30      	subs	r3, #48	; 0x30
 8001548:	4a45      	ldr	r2, [pc, #276]	; (8001660 <HAL_UART_RxCpltCallback+0x150>)
 800154a:	6013      	str	r3, [r2, #0]
		new_set = v1*100+v2*10+v3;
 800154c:	4b42      	ldr	r3, [pc, #264]	; (8001658 <HAL_UART_RxCpltCallback+0x148>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2264      	movs	r2, #100	; 0x64
 8001552:	fb02 f103 	mul.w	r1, r2, r3
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_UART_RxCpltCallback+0x14c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	18ca      	adds	r2, r1, r3
 8001564:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <HAL_UART_RxCpltCallback+0x150>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4413      	add	r3, r2
 800156a:	4a3e      	ldr	r2, [pc, #248]	; (8001664 <HAL_UART_RxCpltCallback+0x154>)
 800156c:	6013      	str	r3, [r2, #0]
		set_point=new_set;
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_UART_RxCpltCallback+0x154>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <HAL_UART_RxCpltCallback+0x158>)
 800157c:	edc3 7a00 	vstr	s15, [r3]

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	483a      	ldr	r0, [pc, #232]	; (800166c <HAL_UART_RxCpltCallback+0x15c>)
 8001584:	f001 fa63 	bl	8002a4e <HAL_GPIO_TogglePin>
	}
	 if(idx == 'g'){
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b67      	cmp	r3, #103	; 0x67
 800158c:	d15c      	bne.n	8001648 <HAL_UART_RxCpltCallback+0x138>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800158e:	2101      	movs	r1, #1
 8001590:	4836      	ldr	r0, [pc, #216]	; (800166c <HAL_UART_RxCpltCallback+0x15c>)
 8001592:	f001 fa5c 	bl	8002a4e <HAL_GPIO_TogglePin>
		int disp_out;
		int disp_set;
		int disp_error;

		disp_out = (int)lightLUXint;
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_UART_RxCpltCallback+0x160>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a0:	ee17 3a90 	vmov	r3, s15
 80015a4:	613b      	str	r3, [r7, #16]
		disp_set = (int)set_point;
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_UART_RxCpltCallback+0x158>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b0:	ee17 3a90 	vmov	r3, s15
 80015b4:	60fb      	str	r3, [r7, #12]
		disp_error=(int)error_p;
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_UART_RxCpltCallback+0x164>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c0:	ee17 3a90 	vmov	r3, s15
 80015c4:	60bb      	str	r3, [r7, #8]

		length1 = snprintf(text1, 20, "SET:%d lux \r\n", disp_out);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <HAL_UART_RxCpltCallback+0x168>)
 80015ca:	2114      	movs	r1, #20
 80015cc:	482b      	ldr	r0, [pc, #172]	; (800167c <HAL_UART_RxCpltCallback+0x16c>)
 80015ce:	f006 fc89 	bl	8007ee4 <sniprintf>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a2a      	ldr	r2, [pc, #168]	; (8001680 <HAL_UART_RxCpltCallback+0x170>)
 80015d6:	6013      	str	r3, [r2, #0]
		length2 = snprintf(text2, 20, "OUT:%d lux \r\n", disp_set);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <HAL_UART_RxCpltCallback+0x174>)
 80015dc:	2114      	movs	r1, #20
 80015de:	482a      	ldr	r0, [pc, #168]	; (8001688 <HAL_UART_RxCpltCallback+0x178>)
 80015e0:	f006 fc80 	bl	8007ee4 <sniprintf>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a29      	ldr	r2, [pc, #164]	; (800168c <HAL_UART_RxCpltCallback+0x17c>)
 80015e8:	6013      	str	r3, [r2, #0]
		length3 = snprintf(text3, 20, "ERR:%d lux \r\n", disp_error);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_UART_RxCpltCallback+0x180>)
 80015ee:	2114      	movs	r1, #20
 80015f0:	4828      	ldr	r0, [pc, #160]	; (8001694 <HAL_UART_RxCpltCallback+0x184>)
 80015f2:	f006 fc77 	bl	8007ee4 <sniprintf>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_UART_RxCpltCallback+0x188>)
 80015fa:	6013      	str	r3, [r2, #0]
		if(input[3]=='U'){
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_UART_RxCpltCallback+0x140>)
 80015fe:	78db      	ldrb	r3, [r3, #3]
 8001600:	2b55      	cmp	r3, #85	; 0x55
 8001602:	d108      	bne.n	8001616 <HAL_UART_RxCpltCallback+0x106>
			HAL_UART_Transmit(&huart3, (uint8_t*)text1, length1, 100);
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_UART_RxCpltCallback+0x170>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29a      	uxth	r2, r3
 800160a:	2364      	movs	r3, #100	; 0x64
 800160c:	491b      	ldr	r1, [pc, #108]	; (800167c <HAL_UART_RxCpltCallback+0x16c>)
 800160e:	4811      	ldr	r0, [pc, #68]	; (8001654 <HAL_UART_RxCpltCallback+0x144>)
 8001610:	f005 f9a4 	bl	800695c <HAL_UART_Transmit>
		else if(input[3]=='E'){
			HAL_UART_Transmit(&huart3, (uint8_t*)text3, length3, 100);
		}
	}

}
 8001614:	e018      	b.n	8001648 <HAL_UART_RxCpltCallback+0x138>
		else if(input[3]=='Y'){
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_UART_RxCpltCallback+0x140>)
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	2b59      	cmp	r3, #89	; 0x59
 800161c:	d108      	bne.n	8001630 <HAL_UART_RxCpltCallback+0x120>
			HAL_UART_Transmit(&huart3, (uint8_t*)text2, length2, 100);
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_UART_RxCpltCallback+0x17c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29a      	uxth	r2, r3
 8001624:	2364      	movs	r3, #100	; 0x64
 8001626:	4918      	ldr	r1, [pc, #96]	; (8001688 <HAL_UART_RxCpltCallback+0x178>)
 8001628:	480a      	ldr	r0, [pc, #40]	; (8001654 <HAL_UART_RxCpltCallback+0x144>)
 800162a:	f005 f997 	bl	800695c <HAL_UART_Transmit>
}
 800162e:	e00b      	b.n	8001648 <HAL_UART_RxCpltCallback+0x138>
		else if(input[3]=='E'){
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_UART_RxCpltCallback+0x140>)
 8001632:	78db      	ldrb	r3, [r3, #3]
 8001634:	2b45      	cmp	r3, #69	; 0x45
 8001636:	d107      	bne.n	8001648 <HAL_UART_RxCpltCallback+0x138>
			HAL_UART_Transmit(&huart3, (uint8_t*)text3, length3, 100);
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_UART_RxCpltCallback+0x188>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b29a      	uxth	r2, r3
 800163e:	2364      	movs	r3, #100	; 0x64
 8001640:	4914      	ldr	r1, [pc, #80]	; (8001694 <HAL_UART_RxCpltCallback+0x184>)
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <HAL_UART_RxCpltCallback+0x144>)
 8001644:	f005 f98a 	bl	800695c <HAL_UART_Transmit>
}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000a4 	.word	0x200000a4
 8001654:	20000368 	.word	0x20000368
 8001658:	20000188 	.word	0x20000188
 800165c:	200001dc 	.word	0x200001dc
 8001660:	20000190 	.word	0x20000190
 8001664:	200001ac 	.word	0x200001ac
 8001668:	2000000c 	.word	0x2000000c
 800166c:	40020400 	.word	0x40020400
 8001670:	20000170 	.word	0x20000170
 8001674:	2000016c 	.word	0x2000016c
 8001678:	080087c0 	.word	0x080087c0
 800167c:	20000194 	.word	0x20000194
 8001680:	200001f8 	.word	0x200001f8
 8001684:	080087d0 	.word	0x080087d0
 8001688:	20000158 	.word	0x20000158
 800168c:	200001d8 	.word	0x200001d8
 8001690:	080087e0 	.word	0x080087e0
 8001694:	20000200 	.word	0x20000200
 8001698:	200001d4 	.word	0x200001d4

0800169c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a42      	ldr	r2, [pc, #264]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d17d      	bne.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x10e>
		lightLUXint = BH1750_ReadLux(&hbh1750_1);
 80016ae:	4842      	ldr	r0, [pc, #264]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80016b0:	f7ff fbbe 	bl	8000e30 <BH1750_ReadLux>
 80016b4:	eef0 7a40 	vmov.f32	s15, s0
 80016b8:	4b40      	ldr	r3, [pc, #256]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]
		error=set_point-lightLUXint;
 80016be:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016c0:	ed93 7a00 	vldr	s14, [r3]
 80016c4:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
		error_p=error/1000*100;
 80016d4:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80017c8 <HAL_TIM_PeriodElapsedCallback+0x12c>
 80016de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80017cc <HAL_TIM_PeriodElapsedCallback+0x130>
 80016e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]
		// PID //

		// I
		//	      Integral, prev_Integral;
		I = prev_Integral+error+prev_error;
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001700:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x140>)
 800170c:	edc3 7a00 	vstr	s15, [r3]
		pwm_i=I*ki;
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001722:	edc3 7a00 	vstr	s15, [r3]

		prev_Integral=I;
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800172c:	6013      	str	r3, [r2, #0]
		prev_error = error;
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001734:	6013      	str	r3, [r2, #0]

		//P
		pwm_p=kp*error;
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001738:	ed93 7a00 	vldr	s14, [r3]
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001748:	edc3 7a00 	vstr	s15, [r3]

		pwm_duty=pwm_i+pwm_p;
 800174c:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800174e:	ed93 7a00 	vldr	s14, [r3]
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800175e:	edc3 7a00 	vstr	s15, [r3]

		if(pwm_duty>999)
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80017f4 <HAL_TIM_PeriodElapsedCallback+0x158>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	dd03      	ble.n	800177e <HAL_TIM_PeriodElapsedCallback+0xe2>
			pwm_duty=999;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e00b      	b.n	8001796 <HAL_TIM_PeriodElapsedCallback+0xfa>
		else if(pwm_duty<0)
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	d503      	bpl.n	8001796 <HAL_TIM_PeriodElapsedCallback+0xfa>
			pwm_duty=0;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	601a      	str	r2, [r3, #0]


		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_duty);
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x160>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a4:	ee17 2a90 	vmov	r2, s15
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40000400 	.word	0x40000400
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000170 	.word	0x20000170
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	200001e4 	.word	0x200001e4
 80017c8:	447a0000 	.word	0x447a0000
 80017cc:	42c80000 	.word	0x42c80000
 80017d0:	2000016c 	.word	0x2000016c
 80017d4:	200001a8 	.word	0x200001a8
 80017d8:	200001fc 	.word	0x200001fc
 80017dc:	200001f0 	.word	0x200001f0
 80017e0:	20000014 	.word	0x20000014
 80017e4:	200001e8 	.word	0x200001e8
 80017e8:	20000010 	.word	0x20000010
 80017ec:	200001f4 	.word	0x200001f4
 80017f0:	200000a8 	.word	0x200000a8
 80017f4:	4479c000 	.word	0x4479c000
 80017f8:	4479c000 	.word	0x4479c000
 80017fc:	2000031c 	.word	0x2000031c

08001800 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	encoder_coutner=__HAL_TIM_GET_COUNTER(htim);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001810:	6013      	str	r3, [r2, #0]
	count = (int16_t)count;
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001814:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_TIM_IC_CaptureCallback+0x54>)
 800181a:	801a      	strh	r2, [r3, #0]
	position = count/4;
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_TIM_IC_CaptureCallback+0x54>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	da00      	bge.n	8001828 <HAL_TIM_IC_CaptureCallback+0x28>
 8001826:	3303      	adds	r3, #3
 8001828:	109b      	asrs	r3, r3, #2
 800182a:	b21a      	sxth	r2, r3
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_TIM_IC_CaptureCallback+0x58>)
 800182e:	801a      	strh	r2, [r3, #0]
	set_point=encoder_coutner;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200000ac 	.word	0x200000ac
 8001854:	200001e0 	.word	0x200001e0
 8001858:	200000b0 	.word	0x200000b0
 800185c:	2000000c 	.word	0x2000000c

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001866:	f000 fcfa 	bl	800225e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186a:	f000 f897 	bl	800199c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800186e:	f000 f9ed 	bl	8001c4c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001872:	f7ff fc23 	bl	80010bc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001876:	f000 fc31 	bl	80020dc <MX_USART3_UART_Init>
  MX_GPIO_Init();
 800187a:	f7ff fb07 	bl	8000e8c <MX_GPIO_Init>
  MX_TIM3_Init();
 800187e:	f000 fa5d 	bl	8001d3c <MX_TIM3_Init>
  MX_I2C2_Init();
 8001882:	f7ff fc5b 	bl	800113c <MX_I2C2_Init>
  MX_TIM4_Init();
 8001886:	f000 faa7 	bl	8001dd8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800188a:	f000 fafb 	bl	8001e84 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	BH1750_Init(&hbh1750_1);
 800188e:	482f      	ldr	r0, [pc, #188]	; (800194c <main+0xec>)
 8001890:	f7ff faa8 	bl	8000de4 <BH1750_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	482e      	ldr	r0, [pc, #184]	; (8001950 <main+0xf0>)
 8001898:	f003 fe3e 	bl	8005518 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, &input, 4);
 800189c:	2204      	movs	r2, #4
 800189e:	492d      	ldr	r1, [pc, #180]	; (8001954 <main+0xf4>)
 80018a0:	482d      	ldr	r0, [pc, #180]	; (8001958 <main+0xf8>)
 80018a2:	f005 f8ee 	bl	8006a82 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80018a6:	482d      	ldr	r0, [pc, #180]	; (800195c <main+0xfc>)
 80018a8:	f003 fd5c 	bl	8005364 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80018ac:	482c      	ldr	r0, [pc, #176]	; (8001960 <main+0x100>)
 80018ae:	f003 fd59 	bl	8005364 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 80018b2:	482c      	ldr	r0, [pc, #176]	; (8001964 <main+0x104>)
 80018b4:	f003 fd56 	bl	8005364 <HAL_TIM_Base_Start_IT>


	//encoder
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80018b8:	213c      	movs	r1, #60	; 0x3c
 80018ba:	4829      	ldr	r0, [pc, #164]	; (8001960 <main+0x100>)
 80018bc:	f003 ffcc 	bl	8005858 <HAL_TIM_Encoder_Start_IT>


	// LCD configuration
	disp.addr = (0x3F << 1);
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <main+0x108>)
 80018c2:	227e      	movs	r2, #126	; 0x7e
 80018c4:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <main+0x108>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	lcd_init(&disp);
 80018ce:	4826      	ldr	r0, [pc, #152]	; (8001968 <main+0x108>)
 80018d0:	f7ff fd2a 	bl	8001328 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		disp_out = (int)lightLUXint;
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <main+0x10c>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018de:	ee17 3a90 	vmov	r3, s15
 80018e2:	60fb      	str	r3, [r7, #12]
		disp_set = (int)set_point;
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <main+0x110>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ee:	ee17 3a90 	vmov	r3, s15
 80018f2:	60bb      	str	r3, [r7, #8]
		disp_error=(int)error_p;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <main+0x114>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fe:	ee17 3a90 	vmov	r3, s15
 8001902:	607b      	str	r3, [r7, #4]

		sprintf(LCDdisplay1, "OUT:%d lux", disp_out);
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	491c      	ldr	r1, [pc, #112]	; (8001978 <main+0x118>)
 8001908:	481c      	ldr	r0, [pc, #112]	; (800197c <main+0x11c>)
 800190a:	f006 fb1f 	bl	8007f4c <siprintf>
		sprintf(LCDdisplay2, "SET:%d lux",disp_set);
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	491b      	ldr	r1, [pc, #108]	; (8001980 <main+0x120>)
 8001912:	481c      	ldr	r0, [pc, #112]	; (8001984 <main+0x124>)
 8001914:	f006 fb1a 	bl	8007f4c <siprintf>

		sprintf((char *)disp.f_line, LCDdisplay1);
 8001918:	4918      	ldr	r1, [pc, #96]	; (800197c <main+0x11c>)
 800191a:	481b      	ldr	r0, [pc, #108]	; (8001988 <main+0x128>)
 800191c:	f006 fb16 	bl	8007f4c <siprintf>
		sprintf((char *)disp.s_line, LCDdisplay2);
 8001920:	4918      	ldr	r1, [pc, #96]	; (8001984 <main+0x124>)
 8001922:	481a      	ldr	r0, [pc, #104]	; (800198c <main+0x12c>)
 8001924:	f006 fb12 	bl	8007f4c <siprintf>

		lcd_display(&disp);
 8001928:	480f      	ldr	r0, [pc, #60]	; (8001968 <main+0x108>)
 800192a:	f7ff fd83 	bl	8001434 <lcd_display>

		length = snprintf(text, 20, "OUT:%d lux \r\n", disp_out);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <main+0x130>)
 8001932:	2114      	movs	r1, #20
 8001934:	4817      	ldr	r0, [pc, #92]	; (8001994 <main+0x134>)
 8001936:	f006 fad5 	bl	8007ee4 <sniprintf>
 800193a:	4603      	mov	r3, r0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <main+0x138>)
 8001940:	701a      	strb	r2, [r3, #0]

		HAL_Delay(500);
 8001942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001946:	f000 fce7 	bl	8002318 <HAL_Delay>
		disp_out = (int)lightLUXint;
 800194a:	e7c3      	b.n	80018d4 <main+0x74>
 800194c:	20000000 	.word	0x20000000
 8001950:	2000031c 	.word	0x2000031c
 8001954:	200000a4 	.word	0x200000a4
 8001958:	20000368 	.word	0x20000368
 800195c:	200002d0 	.word	0x200002d0
 8001960:	20000238 	.word	0x20000238
 8001964:	20000284 	.word	0x20000284
 8001968:	20000214 	.word	0x20000214
 800196c:	20000170 	.word	0x20000170
 8001970:	2000000c 	.word	0x2000000c
 8001974:	2000016c 	.word	0x2000016c
 8001978:	080087f0 	.word	0x080087f0
 800197c:	20000174 	.word	0x20000174
 8001980:	080087fc 	.word	0x080087fc
 8001984:	200001c0 	.word	0x200001c0
 8001988:	20000215 	.word	0x20000215
 800198c:	20000226 	.word	0x20000226
 8001990:	080087d0 	.word	0x080087d0
 8001994:	200001b0 	.word	0x200001b0
 8001998:	2000018c 	.word	0x2000018c

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b094      	sub	sp, #80	; 0x50
 80019a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	f107 0320 	add.w	r3, r7, #32
 80019a6:	2230      	movs	r2, #48	; 0x30
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 fa92 	bl	8007ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019c0:	f002 fb82 	bl	80040c8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <SystemClock_Config+0xd4>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <SystemClock_Config+0xd4>)
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ce:	6413      	str	r3, [r2, #64]	; 0x40
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <SystemClock_Config+0xd4>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <SystemClock_Config+0xd8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <SystemClock_Config+0xd8>)
 80019e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <SystemClock_Config+0xd8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f4:	2301      	movs	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fe:	2302      	movs	r3, #2
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001a0c:	23d8      	movs	r3, #216	; 0xd8
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a14:	2303      	movs	r3, #3
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fbb3 	bl	8004188 <HAL_RCC_OscConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a28:	f000 f826 	bl	8001a78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a2c:	f002 fb5c 	bl	80040e8 <HAL_PWREx_EnableOverDrive>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a36:	f000 f81f 	bl	8001a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2107      	movs	r1, #7
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fe39 	bl	80046d0 <HAL_RCC_ClockConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001a64:	f000 f808 	bl	8001a78 <Error_Handler>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3750      	adds	r7, #80	; 0x50
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a80:	e7fe      	b.n	8001a80 <Error_Handler+0x8>
	...

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_MspInit+0x44>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_MspInit+0x44>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_MspInit+0x44>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 fbde 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <TIM2_IRQHandler+0x10>)
 8001b26:	f003 ff45 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000031c 	.word	0x2000031c

08001b34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM3_IRQHandler+0x10>)
 8001b3a:	f003 ff3b 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200002d0 	.word	0x200002d0

08001b48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM4_IRQHandler+0x10>)
 8001b4e:	f003 ff31 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000238 	.word	0x20000238

08001b5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <I2C1_EV_IRQHandler+0x10>)
 8001b62:	f001 fa2d 	bl	8002fc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200000c0 	.word	0x200000c0

08001b70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <I2C1_ER_IRQHandler+0x10>)
 8001b76:	f001 fa3d 	bl	8002ff4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000c0 	.word	0x200000c0

08001b84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <USART3_IRQHandler+0x10>)
 8001b8a:	f004 ffc9 	bl	8006b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000368 	.word	0x20000368

08001b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba0:	f000 ff70 	bl	8002a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <TIM5_IRQHandler+0x10>)
 8001bae:	f003 ff01 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000284 	.word	0x20000284

08001bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <_sbrk+0x5c>)
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <_sbrk+0x60>)
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <_sbrk+0x64>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <_sbrk+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d207      	bcs.n	8001bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bec:	f006 f948 	bl	8007e80 <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e009      	b.n	8001c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <_sbrk+0x64>)
 8001c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20050000 	.word	0x20050000
 8001c1c:	00000400 	.word	0x00000400
 8001c20:	200000b4 	.word	0x200000b4
 8001c24:	20000400 	.word	0x20000400

08001c28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	; 0x38
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001c88:	226b      	movs	r2, #107	; 0x6b
 8001c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 -1;
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca6:	4824      	ldr	r0, [pc, #144]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001ca8:	f003 fb04 	bl	80052b4 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cb2:	f7ff fee1 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	481d      	ldr	r0, [pc, #116]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001cc4:	f004 f8aa 	bl	8005e1c <HAL_TIM_ConfigClockSource>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cce:	f7ff fed3 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001cd4:	f003 fbbe 	bl	8005454 <HAL_TIM_PWM_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cde:	f7ff fecb 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4811      	ldr	r0, [pc, #68]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001cf2:	f004 fd39 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cfc:	f7ff febc 	bl	8001a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	2200      	movs	r2, #0
 8001d16:	4619      	mov	r1, r3
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001d1a:	f003 ff6b 	bl	8005bf4 <HAL_TIM_PWM_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d24:	f7ff fea8 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <MX_TIM2_Init+0xec>)
 8001d2a:	f000 f9a1 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001d2e:	bf00      	nop
 8001d30:	3738      	adds	r7, #56	; 0x38
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000031c 	.word	0x2000031c

08001d3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <MX_TIM3_Init+0x98>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001d62:	226b      	movs	r2, #107	; 0x6b
 8001d64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001d6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d80:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001d82:	f003 fa97 	bl	80052b4 <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d8c:	f7ff fe74 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001d9e:	f004 f83d 	bl	8005e1c <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001da8:	f7ff fe66 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_TIM3_Init+0x94>)
 8001dba:	f004 fcd5 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001dc4:	f7ff fe58 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200002d0 	.word	0x200002d0
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2224      	movs	r2, #36	; 0x24
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f006 f874 	bl	8007ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	463b      	mov	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001df6:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <MX_TIM4_Init+0xa4>)
 8001df8:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <MX_TIM4_Init+0xa8>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <MX_TIM4_Init+0xa4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <MX_TIM4_Init+0xa4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <MX_TIM4_Init+0xa4>)
 8001e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_TIM4_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <MX_TIM4_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e20:	2302      	movs	r3, #2
 8001e22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e24:	2301      	movs	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <MX_TIM4_Init+0xa4>)
 8001e48:	f003 fc60 	bl	800570c <HAL_TIM_Encoder_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e52:	f7ff fe11 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4619      	mov	r1, r3
 8001e62:	4806      	ldr	r0, [pc, #24]	; (8001e7c <MX_TIM4_Init+0xa4>)
 8001e64:	f004 fc80 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e6e:	f7ff fe03 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	3730      	adds	r7, #48	; 0x30
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000238 	.word	0x20000238
 8001e80:	40000800 	.word	0x40000800

08001e84 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8a:	f107 0310 	add.w	r3, r7, #16
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <MX_TIM5_Init+0x98>)
 8001ea6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001eaa:	226b      	movs	r2, #107	; 0x6b
 8001eac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001eb6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001eba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ec8:	4813      	ldr	r0, [pc, #76]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001eca:	f003 f9f3 	bl	80052b4 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ed4:	f7ff fdd0 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001ee6:	f003 ff99 	bl	8005e1c <HAL_TIM_ConfigClockSource>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ef0:	f7ff fdc2 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_TIM5_Init+0x94>)
 8001f02:	f004 fc31 	bl	8006768 <HAL_TIMEx_MasterConfigSynchronization>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f0c:	f7ff fdb4 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000284 	.word	0x20000284
 8001f1c:	40000c00 	.word	0x40000c00

08001f20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f30:	d114      	bne.n	8001f5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	201c      	movs	r0, #28
 8001f50:	f000 fae1 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f54:	201c      	movs	r0, #28
 8001f56:	f000 fafa 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f5a:	e032      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d114      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	201d      	movs	r0, #29
 8001f84:	f000 fac7 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f88:	201d      	movs	r0, #29
 8001f8a:	f000 fae0 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001f8e:	e018      	b.n	8001fc2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_TIM_Base_MspInit+0xb4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d113      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_TIM_Base_MspInit+0xac>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2032      	movs	r0, #50	; 0x32
 8001fb8:	f000 faad 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fbc:	2032      	movs	r0, #50	; 0x32
 8001fbe:	f000 fac6 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40000c00 	.word	0x40000c00

08001fd8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d130      	bne.n	800205c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_TIM_Encoder_MspInit+0x90>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_TIM_Encoder_MspInit+0x90>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_TIM_Encoder_MspInit+0x90>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_TIM_Encoder_MspInit+0x90>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_TIM_Encoder_MspInit+0x90>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800202a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800203c:	2302      	movs	r3, #2
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_TIM_Encoder_MspInit+0x94>)
 8002048:	f000 fb3c 	bl	80026c4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	201e      	movs	r0, #30
 8002052:	f000 fa60 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002056:	201e      	movs	r0, #30
 8002058:	f000 fa79 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40000800 	.word	0x40000800
 8002068:	40023800 	.word	0x40023800
 800206c:	40020c00 	.word	0x40020c00

08002070 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d11b      	bne.n	80020ca <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_TIM_MspPostInit+0x64>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_TIM_MspPostInit+0x64>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_TIM_MspPostInit+0x64>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020aa:	2320      	movs	r3, #32
 80020ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ba:	2301      	movs	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4619      	mov	r1, r3
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <HAL_TIM_MspPostInit+0x68>)
 80020c6:	f000 fafd 	bl	80026c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020000 	.word	0x40020000

080020dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_USART3_UART_Init+0x58>)
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <MX_USART3_UART_Init+0x5c>)
 80020e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <MX_USART3_UART_Init+0x58>)
 80020e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_USART3_UART_Init+0x58>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_USART3_UART_Init+0x58>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_USART3_UART_Init+0x58>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_USART3_UART_Init+0x58>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <MX_USART3_UART_Init+0x58>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_USART3_UART_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <MX_USART3_UART_Init+0x58>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_USART3_UART_Init+0x58>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_USART3_UART_Init+0x58>)
 8002120:	f004 fbce 	bl	80068c0 <HAL_UART_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800212a:	f7ff fca5 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000368 	.word	0x20000368
 8002138:	40004800 	.word	0x40004800

0800213c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0aa      	sub	sp, #168	; 0xa8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	2284      	movs	r2, #132	; 0x84
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f005 feb9 	bl	8007ed4 <memset>
  if(uartHandle->Instance==USART3)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a26      	ldr	r2, [pc, #152]	; (8002200 <HAL_UART_MspInit+0xc4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d144      	bne.n	80021f6 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800216c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002170:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002172:	2300      	movs	r3, #0
 8002174:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fcaa 	bl	8004ad4 <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002186:	f7ff fc77 	bl	8001a78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_UART_MspInit+0xc8>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_UART_MspInit+0xc8>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_UART_MspInit+0xc8>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_UART_MspInit+0xc8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_UART_MspInit+0xc8>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_UART_MspInit+0xc8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021d4:	2307      	movs	r3, #7
 80021d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021de:	4619      	mov	r1, r3
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_UART_MspInit+0xcc>)
 80021e2:	f000 fa6f 	bl	80026c4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2027      	movs	r0, #39	; 0x27
 80021ec:	f000 f993 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021f0:	2027      	movs	r0, #39	; 0x27
 80021f2:	f000 f9ac 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021f6:	bf00      	nop
 80021f8:	37a8      	adds	r7, #168	; 0xa8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40004800 	.word	0x40004800
 8002204:	40023800 	.word	0x40023800
 8002208:	40020c00 	.word	0x40020c00

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002210:	480d      	ldr	r0, [pc, #52]	; (8002248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002212:	490e      	ldr	r1, [pc, #56]	; (800224c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002228:	4c0b      	ldr	r4, [pc, #44]	; (8002258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002236:	f7ff fcf7 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f005 fe27 	bl	8007e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223e:	f7ff fb0f 	bl	8001860 <main>
  bx  lr    
 8002242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002244:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002250:	08008864 	.word	0x08008864
  ldr r2, =_sbss
 8002254:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002258:	20000400 	.word	0x20000400

0800225c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC_IRQHandler>

0800225e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002262:	2003      	movs	r0, #3
 8002264:	f000 f94c 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002268:	2000      	movs	r0, #0
 800226a:	f000 f805 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800226e:	f7ff fc09 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f967 	bl	800256a <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f000 f92f 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000018 	.word	0x20000018
 80022d0:	20000020 	.word	0x20000020
 80022d4:	2000001c 	.word	0x2000001c

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000020 	.word	0x20000020
 80022fc:	200003ec 	.word	0x200003ec

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200003ec 	.word	0x200003ec

08002318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff ffee 	bl	8002300 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d005      	beq.n	800233e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_Delay+0x44>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233e:	bf00      	nop
 8002340:	f7ff ffde 	bl	8002300 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d8f7      	bhi.n	8002340 <HAL_Delay+0x28>
  {
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000020 	.word	0x20000020

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	4313      	orrs	r3, r2
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00
 80023a4:	05fa0000 	.word	0x05fa0000

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff29 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff3e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff31 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa2 	bl	80024bc <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff feb6 	bl	8002300 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d008      	beq.n	80025b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e052      	b.n	800265a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0216 	bic.w	r2, r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <HAL_DMA_Abort+0x62>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0208 	bic.w	r2, r2, #8
 80025f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002604:	e013      	b.n	800262e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002606:	f7ff fe7b 	bl	8002300 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b05      	cmp	r3, #5
 8002612:	d90c      	bls.n	800262e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2203      	movs	r2, #3
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e015      	b.n	800265a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e4      	bne.n	8002606 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	223f      	movs	r2, #63	; 0x3f
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d004      	beq.n	8002680 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e00c      	b.n	800269a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2205      	movs	r2, #5
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b4:	b2db      	uxtb	r3, r3
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e175      	b.n	80029d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8164 	bne.w	80029ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d005      	beq.n	800271a <HAL_GPIO_Init+0x56>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d130      	bne.n	800277c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b03      	cmp	r3, #3
 8002786:	d017      	beq.n	80027b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80be 	beq.w	80029ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	4b66      	ldr	r3, [pc, #408]	; (80029e8 <HAL_GPIO_Init+0x324>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a65      	ldr	r2, [pc, #404]	; (80029e8 <HAL_GPIO_Init+0x324>)
 8002854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_GPIO_Init+0x324>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002866:	4a61      	ldr	r2, [pc, #388]	; (80029ec <HAL_GPIO_Init+0x328>)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a58      	ldr	r2, [pc, #352]	; (80029f0 <HAL_GPIO_Init+0x32c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d037      	beq.n	8002902 <HAL_GPIO_Init+0x23e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a57      	ldr	r2, [pc, #348]	; (80029f4 <HAL_GPIO_Init+0x330>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d031      	beq.n	80028fe <HAL_GPIO_Init+0x23a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_GPIO_Init+0x334>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d02b      	beq.n	80028fa <HAL_GPIO_Init+0x236>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a55      	ldr	r2, [pc, #340]	; (80029fc <HAL_GPIO_Init+0x338>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d025      	beq.n	80028f6 <HAL_GPIO_Init+0x232>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_GPIO_Init+0x33c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01f      	beq.n	80028f2 <HAL_GPIO_Init+0x22e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <HAL_GPIO_Init+0x340>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d019      	beq.n	80028ee <HAL_GPIO_Init+0x22a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a52      	ldr	r2, [pc, #328]	; (8002a08 <HAL_GPIO_Init+0x344>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_GPIO_Init+0x226>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a51      	ldr	r2, [pc, #324]	; (8002a0c <HAL_GPIO_Init+0x348>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00d      	beq.n	80028e6 <HAL_GPIO_Init+0x222>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a50      	ldr	r2, [pc, #320]	; (8002a10 <HAL_GPIO_Init+0x34c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <HAL_GPIO_Init+0x21e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4f      	ldr	r2, [pc, #316]	; (8002a14 <HAL_GPIO_Init+0x350>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_GPIO_Init+0x21a>
 80028da:	2309      	movs	r3, #9
 80028dc:	e012      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028de:	230a      	movs	r3, #10
 80028e0:	e010      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028e2:	2308      	movs	r3, #8
 80028e4:	e00e      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028e6:	2307      	movs	r3, #7
 80028e8:	e00c      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028ea:	2306      	movs	r3, #6
 80028ec:	e00a      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028ee:	2305      	movs	r3, #5
 80028f0:	e008      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x240>
 8002902:	2300      	movs	r3, #0
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f002 0203 	and.w	r2, r2, #3
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4093      	lsls	r3, r2
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002914:	4935      	ldr	r1, [pc, #212]	; (80029ec <HAL_GPIO_Init+0x328>)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_GPIO_Init+0x354>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002946:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <HAL_GPIO_Init+0x354>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800294c:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_GPIO_Init+0x354>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002970:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <HAL_GPIO_Init+0x354>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002976:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_GPIO_Init+0x354>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <HAL_GPIO_Init+0x354>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_GPIO_Init+0x354>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <HAL_GPIO_Init+0x354>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	f67f ae86 	bls.w	80026e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40013800 	.word	0x40013800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40021400 	.word	0x40021400
 8002a08:	40021800 	.word	0x40021800
 8002a0c:	40021c00 	.word	0x40021c00
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40022400 	.word	0x40022400
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a60:	887a      	ldrh	r2, [r7, #2]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	041a      	lsls	r2, r3, #16
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43d9      	mvns	r1, r3
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	400b      	ands	r3, r1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f806 	bl	8002ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07f      	b.n	8002bde <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fb62 	bl	80011bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d107      	bne.n	8002b46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	e006      	b.n	8002b54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d104      	bne.n	8002b66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_I2C_Init+0x11c>)
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	02008000 	.word	0x02008000

08002bec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	817b      	strh	r3, [r7, #10]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	f040 80da 	bne.w	8002dc2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0x30>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0d3      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1d8>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c24:	f7ff fb6c 	bl	8002300 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2319      	movs	r3, #25
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fefb 	bl	8003a32 <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0be      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2221      	movs	r2, #33	; 0x21
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2210      	movs	r2, #16
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	893a      	ldrh	r2, [r7, #8]
 8002c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2bff      	cmp	r3, #255	; 0xff
 8002c76:	d90e      	bls.n	8002c96 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	22ff      	movs	r2, #255	; 0xff
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <HAL_I2C_Master_Transmit+0x1e0>)
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f001 f8f2 	bl	8003e78 <I2C_TransferConfig>
 8002c94:	e06c      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	8979      	ldrh	r1, [r7, #10]
 8002ca8:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <HAL_I2C_Master_Transmit+0x1e0>)
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f001 f8e1 	bl	8003e78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cb6:	e05b      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	6a39      	ldr	r1, [r7, #32]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fef8 	bl	8003ab2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e07b      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d034      	beq.n	8002d70 <HAL_I2C_Master_Transmit+0x184>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d130      	bne.n	8002d70 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2200      	movs	r2, #0
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fe8a 	bl	8003a32 <I2C_WaitOnFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e04d      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2bff      	cmp	r3, #255	; 0xff
 8002d30:	d90e      	bls.n	8002d50 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	2300      	movs	r3, #0
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f001 f895 	bl	8003e78 <I2C_TransferConfig>
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f001 f884 	bl	8003e78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d19e      	bne.n	8002cb8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	6a39      	ldr	r1, [r7, #32]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fed7 	bl	8003b32 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e01a      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2220      	movs	r2, #32
 8002d94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002da2:	400b      	ands	r3, r1
 8002da4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	80002000 	.word	0x80002000
 8002dd0:	fe00e800 	.word	0xfe00e800

08002dd4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	461a      	mov	r2, r3
 8002de0:	460b      	mov	r3, r1
 8002de2:	817b      	strh	r3, [r7, #10]
 8002de4:	4613      	mov	r3, r2
 8002de6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	f040 80db 	bne.w	8002fac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2C_Master_Receive+0x30>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e0d4      	b.n	8002fae <HAL_I2C_Master_Receive+0x1da>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e0c:	f7ff fa78 	bl	8002300 <HAL_GetTick>
 8002e10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2319      	movs	r3, #25
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fe07 	bl	8003a32 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0bf      	b.n	8002fae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2222      	movs	r2, #34	; 0x22
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	893a      	ldrh	r2, [r7, #8]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2bff      	cmp	r3, #255	; 0xff
 8002e5e:	d90e      	bls.n	8002e7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	22ff      	movs	r2, #255	; 0xff
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	4b52      	ldr	r3, [pc, #328]	; (8002fb8 <HAL_I2C_Master_Receive+0x1e4>)
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fffe 	bl	8003e78 <I2C_TransferConfig>
 8002e7c:	e06d      	b.n	8002f5a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	8979      	ldrh	r1, [r7, #10]
 8002e90:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <HAL_I2C_Master_Receive+0x1e4>)
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 ffed 	bl	8003e78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e9e:	e05c      	b.n	8002f5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	6a39      	ldr	r1, [r7, #32]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fe81 	bl	8003bac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e07c      	b.n	8002fae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d034      	beq.n	8002f5a <HAL_I2C_Master_Receive+0x186>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d130      	bne.n	8002f5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fd95 	bl	8003a32 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e04d      	b.n	8002fae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2bff      	cmp	r3, #255	; 0xff
 8002f1a:	d90e      	bls.n	8002f3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	8979      	ldrh	r1, [r7, #10]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 ffa0 	bl	8003e78 <I2C_TransferConfig>
 8002f38:	e00f      	b.n	8002f5a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	8979      	ldrh	r1, [r7, #10]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 ff8f 	bl	8003e78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d19d      	bne.n	8002ea0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	6a39      	ldr	r1, [r7, #32]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fde2 	bl	8003b32 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e01a      	b.n	8002fae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_I2C_Master_Receive+0x1e8>)
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	80002400 	.word	0x80002400
 8002fbc:	fe00e800 	.word	0xfe00e800

08002fc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
  }
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	09db      	lsrs	r3, r3, #7
 800301c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003038:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	0a9b      	lsrs	r3, r3, #10
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	09db      	lsrs	r3, r3, #7
 800304a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003066:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	0a5b      	lsrs	r3, r3, #9
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	09db      	lsrs	r3, r3, #7
 8003078:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	f043 0202 	orr.w	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003094:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 030b 	and.w	r3, r3, #11
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fb89 	bl	80037c0 <I2C_ITError>
  }
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70fb      	strb	r3, [r7, #3]
 80030ea:	4613      	mov	r3, r2
 80030ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <I2C_Slave_ISR_IT+0x24>
 8003156:	2302      	movs	r3, #2
 8003158:	e0ec      	b.n	8003334 <I2C_Slave_ISR_IT+0x1fe>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800317a:	6939      	ldr	r1, [r7, #16]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f9bf 	bl	8003500 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04d      	beq.n	800322a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003196:	2b00      	cmp	r3, #0
 8003198:	d047      	beq.n	800322a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d128      	bne.n	80031f6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b28      	cmp	r3, #40	; 0x28
 80031ae:	d108      	bne.n	80031c2 <I2C_Slave_ISR_IT+0x8c>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031b6:	d104      	bne.n	80031c2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031b8:	6939      	ldr	r1, [r7, #16]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 faaa 	bl	8003714 <I2C_ITListenCplt>
 80031c0:	e032      	b.n	8003228 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b29      	cmp	r3, #41	; 0x29
 80031cc:	d10e      	bne.n	80031ec <I2C_Slave_ISR_IT+0xb6>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031d4:	d00a      	beq.n	80031ec <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2210      	movs	r2, #16
 80031dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fbe5 	bl	80039ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f92d 	bl	8003444 <I2C_ITSlaveSeqCplt>
 80031ea:	e01d      	b.n	8003228 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2210      	movs	r2, #16
 80031f2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80031f4:	e096      	b.n	8003324 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2210      	movs	r2, #16
 80031fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <I2C_Slave_ISR_IT+0xe4>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003216:	f040 8085 	bne.w	8003324 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	4619      	mov	r1, r3
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 facd 	bl	80037c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003226:	e07d      	b.n	8003324 <I2C_Slave_ISR_IT+0x1ee>
 8003228:	e07c      	b.n	8003324 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d030      	beq.n	8003298 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02a      	beq.n	8003298 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d018      	beq.n	800327e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d14f      	bne.n	8003328 <I2C_Slave_ISR_IT+0x1f2>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800328e:	d04b      	beq.n	8003328 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f8d7 	bl	8003444 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003296:	e047      	b.n	8003328 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	08db      	lsrs	r3, r3, #3
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	08db      	lsrs	r3, r3, #3
 80032a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80032b0:	6939      	ldr	r1, [r7, #16]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f842 	bl	800333c <I2C_ITAddrCplt>
 80032b8:	e037      	b.n	800332a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d031      	beq.n	800332a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02b      	beq.n	800332a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
 800330c:	e00d      	b.n	800332a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003314:	d002      	beq.n	800331c <I2C_Slave_ISR_IT+0x1e6>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f891 	bl	8003444 <I2C_ITSlaveSeqCplt>
 8003322:	e002      	b.n	800332a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003328:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003352:	2b28      	cmp	r3, #40	; 0x28
 8003354:	d16a      	bne.n	800342c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	b29b      	uxth	r3, r3
 8003370:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003374:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003382:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	b29b      	uxth	r3, r3
 800338c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003390:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d138      	bne.n	800340c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	09db      	lsrs	r3, r3, #7
 800339e:	b29a      	uxth	r2, r3
 80033a0:	89bb      	ldrh	r3, [r7, #12]
 80033a2:	4053      	eors	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f003 0306 	and.w	r3, r3, #6
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d11c      	bne.n	80033e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80033ae:	897b      	ldrh	r3, [r7, #10]
 80033b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d13b      	bne.n	800343c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2208      	movs	r2, #8
 80033d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033da:	89ba      	ldrh	r2, [r7, #12]
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fe7c 	bl	80030de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033e6:	e029      	b.n	800343c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80033e8:	893b      	ldrh	r3, [r7, #8]
 80033ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fd73 	bl	8003edc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033fe:	89ba      	ldrh	r2, [r7, #12]
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fe6a 	bl	80030de <HAL_I2C_AddrCallback>
}
 800340a:	e017      	b.n	800343c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800340c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fd63 	bl	8003edc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800341e:	89ba      	ldrh	r2, [r7, #12]
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	4619      	mov	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fe5a 	bl	80030de <HAL_I2C_AddrCallback>
}
 800342a:	e007      	b.n	800343c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2208      	movs	r2, #8
 8003432:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	0b9b      	lsrs	r3, r3, #14
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e00d      	b.n	8003496 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	0bdb      	lsrs	r3, r3, #15
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003494:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b29      	cmp	r3, #41	; 0x29
 80034a0:	d112      	bne.n	80034c8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2228      	movs	r2, #40	; 0x28
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2221      	movs	r2, #33	; 0x21
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034b0:	2101      	movs	r1, #1
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fd12 	bl	8003edc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff fdf8 	bl	80030b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034c6:	e017      	b.n	80034f8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b2a      	cmp	r3, #42	; 0x2a
 80034d2:	d111      	bne.n	80034f8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2228      	movs	r2, #40	; 0x28
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2222      	movs	r2, #34	; 0x22
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034e2:	2102      	movs	r1, #2
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fcf9 	bl	8003edc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fde9 	bl	80030ca <HAL_I2C_SlaveRxCpltCallback>
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2220      	movs	r2, #32
 8003524:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b21      	cmp	r3, #33	; 0x21
 800352a:	d002      	beq.n	8003532 <I2C_ITSlaveCplt+0x32>
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b29      	cmp	r3, #41	; 0x29
 8003530:	d108      	bne.n	8003544 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003532:	f248 0101 	movw	r1, #32769	; 0x8001
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fcd0 	bl	8003edc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2221      	movs	r2, #33	; 0x21
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
 8003542:	e00d      	b.n	8003560 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b22      	cmp	r3, #34	; 0x22
 8003548:	d002      	beq.n	8003550 <I2C_ITSlaveCplt+0x50>
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b2a      	cmp	r3, #42	; 0x2a
 800354e:	d107      	bne.n	8003560 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003550:	f248 0102 	movw	r1, #32770	; 0x8002
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fcc1 	bl	8003edc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2222      	movs	r2, #34	; 0x22
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b64      	ldr	r3, [pc, #400]	; (800370c <I2C_ITSlaveCplt+0x20c>)
 800357c:	400b      	ands	r3, r1
 800357e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fa14 	bl	80039ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	0b9b      	lsrs	r3, r3, #14
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d013      	beq.n	80035ba <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d020      	beq.n	80035ec <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035b8:	e018      	b.n	80035ec <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	0bdb      	lsrs	r3, r3, #15
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d012      	beq.n	80035ec <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0304 	bic.w	r3, r3, #4
 80035fe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	f043 0204 	orr.w	r2, r3, #4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	2b00      	cmp	r3, #0
 8003664:	d010      	beq.n	8003688 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8a7 	bl	80037c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b28      	cmp	r3, #40	; 0x28
 800367c:	d141      	bne.n	8003702 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800367e:	6979      	ldr	r1, [r7, #20]
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f847 	bl	8003714 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003686:	e03c      	b.n	8003702 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003690:	d014      	beq.n	80036bc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fed6 	bl	8003444 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <I2C_ITSlaveCplt+0x210>)
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fd20 	bl	80030fa <HAL_I2C_ListenCpltCallback>
}
 80036ba:	e022      	b.n	8003702 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b22      	cmp	r3, #34	; 0x22
 80036c6:	d10e      	bne.n	80036e6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fcf3 	bl	80030ca <HAL_I2C_SlaveRxCpltCallback>
}
 80036e4:	e00d      	b.n	8003702 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fcda 	bl	80030b6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003702:	bf00      	nop
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	fe00e800 	.word	0xfe00e800
 8003710:	ffff0000 	.word	0xffff0000

08003714 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a26      	ldr	r2, [pc, #152]	; (80037bc <I2C_ITListenCplt+0xa8>)
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d022      	beq.n	8003792 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003792:	f248 0103 	movw	r1, #32771	; 0x8003
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fba0 	bl	8003edc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2210      	movs	r2, #16
 80037a2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff fca4 	bl	80030fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	ffff0000 	.word	0xffff0000

080037c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a5d      	ldr	r2, [pc, #372]	; (8003954 <I2C_ITError+0x194>)
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b28      	cmp	r3, #40	; 0x28
 80037f6:	d005      	beq.n	8003804 <I2C_ITError+0x44>
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b29      	cmp	r3, #41	; 0x29
 80037fc:	d002      	beq.n	8003804 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b2a      	cmp	r3, #42	; 0x2a
 8003802:	d10b      	bne.n	800381c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003804:	2103      	movs	r1, #3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fb68 	bl	8003edc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2228      	movs	r2, #40	; 0x28
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a50      	ldr	r2, [pc, #320]	; (8003958 <I2C_ITError+0x198>)
 8003818:	635a      	str	r2, [r3, #52]	; 0x34
 800381a:	e011      	b.n	8003840 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800381c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fb5b 	bl	8003edc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b60      	cmp	r3, #96	; 0x60
 8003830:	d003      	beq.n	800383a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	2b00      	cmp	r3, #0
 800384c:	d039      	beq.n	80038c2 <I2C_ITError+0x102>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b11      	cmp	r3, #17
 8003852:	d002      	beq.n	800385a <I2C_ITError+0x9a>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b21      	cmp	r3, #33	; 0x21
 8003858:	d133      	bne.n	80038c2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003868:	d107      	bne.n	800387a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003878:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe ff11 	bl	80026a6 <HAL_DMA_GetState>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d017      	beq.n	80038ba <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	4a33      	ldr	r2, [pc, #204]	; (800395c <I2C_ITError+0x19c>)
 8003890:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fedf 	bl	8002662 <HAL_DMA_Abort_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d04d      	beq.n	8003946 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b4:	4610      	mov	r0, r2
 80038b6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038b8:	e045      	b.n	8003946 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f850 	bl	8003960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038c0:	e041      	b.n	8003946 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d039      	beq.n	800393e <I2C_ITError+0x17e>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b12      	cmp	r3, #18
 80038ce:	d002      	beq.n	80038d6 <I2C_ITError+0x116>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b22      	cmp	r3, #34	; 0x22
 80038d4:	d133      	bne.n	800393e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e4:	d107      	bne.n	80038f6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fed3 	bl	80026a6 <HAL_DMA_GetState>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d017      	beq.n	8003936 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	4a14      	ldr	r2, [pc, #80]	; (800395c <I2C_ITError+0x19c>)
 800390c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fea1 	bl	8002662 <HAL_DMA_Abort_IT>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d011      	beq.n	800394a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003930:	4610      	mov	r0, r2
 8003932:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003934:	e009      	b.n	800394a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f812 	bl	8003960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800393c:	e005      	b.n	800394a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f80e 	bl	8003960 <I2C_TreatErrorCallback>
  }
}
 8003944:	e002      	b.n	800394c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800394a:	bf00      	nop
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	ffff0000 	.word	0xffff0000
 8003958:	08003137 	.word	0x08003137
 800395c:	080039f7 	.word	0x080039f7

08003960 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d10e      	bne.n	8003992 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fbc9 	bl	8003122 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003990:	e009      	b.n	80039a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fbb4 	bl	800310e <HAL_I2C_ErrorCallback>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d103      	bne.n	80039cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2200      	movs	r2, #0
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d007      	beq.n	80039ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	619a      	str	r2, [r3, #24]
  }
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	2200      	movs	r2, #0
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	2200      	movs	r2, #0
 8003a22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff ff9b 	bl	8003960 <I2C_TreatErrorCallback>
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a42:	e022      	b.n	8003a8a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d01e      	beq.n	8003a8a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4c:	f7fe fc58 	bl	8002300 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d302      	bcc.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d113      	bne.n	8003a8a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f043 0220 	orr.w	r2, r3, #32
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e00f      	b.n	8003aaa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d0cd      	beq.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003abe:	e02c      	b.n	8003b1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f8eb 	bl	8003ca0 <I2C_IsErrorOccurred>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e02a      	b.n	8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d01e      	beq.n	8003b1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003adc:	f7fe fc10 	bl	8002300 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d302      	bcc.n	8003af2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d113      	bne.n	8003b1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e007      	b.n	8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d1cb      	bne.n	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b3e:	e028      	b.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f8ab 	bl	8003ca0 <I2C_IsErrorOccurred>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e026      	b.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b54:	f7fe fbd4 	bl	8002300 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d302      	bcc.n	8003b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d113      	bne.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e007      	b.n	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d1cf      	bne.n	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb8:	e064      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f86e 	bl	8003ca0 <I2C_IsErrorOccurred>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e062      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d138      	bne.n	8003c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d105      	bne.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e04e      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d107      	bne.n	8003c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2210      	movs	r2, #16
 8003c0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
 8003c12:	e002      	b.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003c2e:	400b      	ands	r3, r1
 8003c30:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e022      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fe fb57 	bl	8002300 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10f      	bne.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e007      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d193      	bne.n	8003bba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	fe00e800 	.word	0xfe00e800

08003ca0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d075      	beq.n	8003db8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cd4:	e056      	b.n	8003d84 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d052      	beq.n	8003d84 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fb0f 	bl	8002300 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_IsErrorOccurred+0x54>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d147      	bne.n	8003d84 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d16:	d12e      	bne.n	8003d76 <I2C_IsErrorOccurred+0xd6>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1e:	d02a      	beq.n	8003d76 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003d20:	7cfb      	ldrb	r3, [r7, #19]
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d027      	beq.n	8003d76 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d34:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d36:	f7fe fae3 	bl	8002300 <HAL_GetTick>
 8003d3a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3c:	e01b      	b.n	8003d76 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d3e:	f7fe fadf 	bl	8002300 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b19      	cmp	r3, #25
 8003d4a:	d914      	bls.n	8003d76 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d1dc      	bne.n	8003d3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d003      	beq.n	8003d9a <I2C_IsErrorOccurred+0xfa>
 8003d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d09d      	beq.n	8003cd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2220      	movs	r2, #32
 8003da8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f043 0308 	orr.w	r3, r3, #8
 8003df2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f043 0302 	orr.w	r3, r3, #2
 8003e14:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01c      	beq.n	8003e68 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fdbd 	bl	80039ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <I2C_IsErrorOccurred+0x1d4>)
 8003e40:	400b      	ands	r3, r1
 8003e42:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3728      	adds	r7, #40	; 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	fe00e800 	.word	0xfe00e800

08003e78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	460b      	mov	r3, r1
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	4613      	mov	r3, r2
 8003e88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e90:	7a7b      	ldrb	r3, [r7, #9]
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e98:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ea6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	0d5b      	lsrs	r3, r3, #21
 8003eb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <I2C_TransferConfig+0x60>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	ea02 0103 	and.w	r1, r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	03ff63ff 	.word	0x03ff63ff

08003edc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00f      	beq.n	8003f16 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003efc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f0a:	2b28      	cmp	r3, #40	; 0x28
 8003f0c:	d003      	beq.n	8003f16 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00f      	beq.n	8003f40 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003f26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f34:	2b28      	cmp	r3, #40	; 0x28
 8003f36:	d003      	beq.n	8003f40 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f3e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	da03      	bge.n	8003f50 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d103      	bne.n	8003f5e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f5c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f5e:	887b      	ldrh	r3, [r7, #2]
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d103      	bne.n	8003f6c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f043 0320 	orr.w	r3, r3, #32
 8003f6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f6c:	887b      	ldrh	r3, [r7, #2]
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d103      	bne.n	8003f7a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f78:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	43da      	mvns	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	400a      	ands	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d138      	bne.n	8004020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e032      	b.n	8004022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b20      	cmp	r3, #32
 8004042:	d139      	bne.n	80040b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800404e:	2302      	movs	r3, #2
 8004050:	e033      	b.n	80040ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2224      	movs	r2, #36	; 0x24
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004080:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a04      	ldr	r2, [pc, #16]	; (80040e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40007000 	.word	0x40007000

080040e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <HAL_PWREx_EnableOverDrive+0x98>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	4a22      	ldr	r2, [pc, #136]	; (8004180 <HAL_PWREx_EnableOverDrive+0x98>)
 80040f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_PWREx_EnableOverDrive+0x98>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <HAL_PWREx_EnableOverDrive+0x9c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004116:	f7fe f8f3 	bl	8002300 <HAL_GetTick>
 800411a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800411c:	e009      	b.n	8004132 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800411e:	f7fe f8ef 	bl	8002300 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800412c:	d901      	bls.n	8004132 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e022      	b.n	8004178 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	d1ee      	bne.n	800411e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800414c:	f7fe f8d8 	bl	8002300 <HAL_GetTick>
 8004150:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004152:	e009      	b.n	8004168 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004154:	f7fe f8d4 	bl	8002300 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004162:	d901      	bls.n	8004168 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e007      	b.n	8004178 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_PWREx_EnableOverDrive+0x9c>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004174:	d1ee      	bne.n	8004154 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	40007000 	.word	0x40007000

08004188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004190:	2300      	movs	r3, #0
 8004192:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e291      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8087 	beq.w	80042ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ac:	4b96      	ldr	r3, [pc, #600]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d00c      	beq.n	80041d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b8:	4b93      	ldr	r3, [pc, #588]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d112      	bne.n	80041ea <HAL_RCC_OscConfig+0x62>
 80041c4:	4b90      	ldr	r3, [pc, #576]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d0:	d10b      	bne.n	80041ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d06c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x130>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d168      	bne.n	80042b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e26b      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x7a>
 80041f4:	4b84      	ldr	r3, [pc, #528]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a83      	ldr	r2, [pc, #524]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e02e      	b.n	8004260 <HAL_RCC_OscConfig+0xd8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0x9c>
 800420a:	4b7f      	ldr	r3, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7e      	ldr	r2, [pc, #504]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b7c      	ldr	r3, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7b      	ldr	r2, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 800421c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e01d      	b.n	8004260 <HAL_RCC_OscConfig+0xd8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0xc0>
 800422e:	4b76      	ldr	r3, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a75      	ldr	r2, [pc, #468]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a72      	ldr	r2, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0xd8>
 8004248:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a6e      	ldr	r2, [pc, #440]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 800424e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6b      	ldr	r2, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 800425a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe f84a 	bl	8002300 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe f846 	bl	8002300 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e21f      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b61      	ldr	r3, [pc, #388]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0xe8>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe f836 	bl	8002300 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004298:	f7fe f832 	bl	8002300 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e20b      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	4b57      	ldr	r3, [pc, #348]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x110>
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d069      	beq.n	800439a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042c6:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d2:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d11c      	bne.n	8004318 <HAL_RCC_OscConfig+0x190>
 80042de:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d116      	bne.n	8004318 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_RCC_OscConfig+0x17a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d001      	beq.n	8004302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e1df      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004302:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	493d      	ldr	r1, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004316:	e040      	b.n	800439a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d023      	beq.n	8004368 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004320:	4b39      	ldr	r3, [pc, #228]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a38      	ldr	r2, [pc, #224]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fd ffe8 	bl	8002300 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004334:	f7fd ffe4 	bl	8002300 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e1bd      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004346:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004352:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4929      	ldr	r1, [pc, #164]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]
 8004366:	e018      	b.n	800439a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a26      	ldr	r2, [pc, #152]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd ffc4 	bl	8002300 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437c:	f7fd ffc0 	bl	8002300 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e199      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438e:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d038      	beq.n	8004418 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d019      	beq.n	80043e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80043b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b2:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ba:	f7fd ffa1 	bl	8002300 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c2:	f7fd ff9d 	bl	8002300 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e176      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80043d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x23a>
 80043e0:	e01a      	b.n	8004418 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <HAL_RCC_OscConfig+0x280>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ee:	f7fd ff87 	bl	8002300 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	e00a      	b.n	800440c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f6:	f7fd ff83 	bl	8002300 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d903      	bls.n	800440c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e15c      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
 8004408:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	4b91      	ldr	r3, [pc, #580]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 800440e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ee      	bne.n	80043f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80a4 	beq.w	800456e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004426:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	4b88      	ldr	r3, [pc, #544]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a87      	ldr	r2, [pc, #540]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b85      	ldr	r3, [pc, #532]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444e:	4b82      	ldr	r3, [pc, #520]	; (8004658 <HAL_RCC_OscConfig+0x4d0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800445a:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <HAL_RCC_OscConfig+0x4d0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7e      	ldr	r2, [pc, #504]	; (8004658 <HAL_RCC_OscConfig+0x4d0>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fd ff4b 	bl	8002300 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fd ff47 	bl	8002300 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b64      	cmp	r3, #100	; 0x64
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e120      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004480:	4b75      	ldr	r3, [pc, #468]	; (8004658 <HAL_RCC_OscConfig+0x4d0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x31a>
 8004494:	4b6f      	ldr	r3, [pc, #444]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a6e      	ldr	r2, [pc, #440]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	e02d      	b.n	80044fe <HAL_RCC_OscConfig+0x376>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x33c>
 80044aa:	4b6a      	ldr	r3, [pc, #424]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a69      	ldr	r2, [pc, #420]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
 80044b6:	4b67      	ldr	r3, [pc, #412]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a66      	ldr	r2, [pc, #408]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	e01c      	b.n	80044fe <HAL_RCC_OscConfig+0x376>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d10c      	bne.n	80044e6 <HAL_RCC_OscConfig+0x35e>
 80044cc:	4b61      	ldr	r3, [pc, #388]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a60      	ldr	r2, [pc, #384]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
 80044d8:	4b5e      	ldr	r3, [pc, #376]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a5d      	ldr	r2, [pc, #372]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	e00b      	b.n	80044fe <HAL_RCC_OscConfig+0x376>
 80044e6:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a5a      	ldr	r2, [pc, #360]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
 80044f2:	4b58      	ldr	r3, [pc, #352]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a57      	ldr	r2, [pc, #348]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d015      	beq.n	8004532 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fd fefb 	bl	8002300 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fd fef7 	bl	8002300 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0ce      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ee      	beq.n	800450e <HAL_RCC_OscConfig+0x386>
 8004530:	e014      	b.n	800455c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004532:	f7fd fee5 	bl	8002300 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fd fee1 	bl	8002300 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	; 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0b8      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004550:	4b40      	ldr	r3, [pc, #256]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ee      	bne.n	800453a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004562:	4b3c      	ldr	r3, [pc, #240]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	4a3b      	ldr	r2, [pc, #236]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80a4 	beq.w	80046c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d06b      	beq.n	800465c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d149      	bne.n	8004620 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458c:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a30      	ldr	r2, [pc, #192]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fd feb2 	bl	8002300 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fd feae 	bl	8002300 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e087      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	4b28      	ldr	r3, [pc, #160]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	3b01      	subs	r3, #1
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	4313      	orrs	r3, r2
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80045e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd fe82 	bl	8002300 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fd fe7e 	bl	8002300 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e057      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x478>
 800461e:	e04f      	b.n	80046c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd fe68 	bl	8002300 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fd fe64 	bl	8002300 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e03d      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x4ac>
 8004652:	e035      	b.n	80046c0 <HAL_RCC_OscConfig+0x538>
 8004654:	40023800 	.word	0x40023800
 8004658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800465c:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_RCC_OscConfig+0x544>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d028      	beq.n	80046bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d121      	bne.n	80046bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d11a      	bne.n	80046bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800468c:	4013      	ands	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004692:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004694:	4293      	cmp	r3, r2
 8004696:	d111      	bne.n	80046bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0d0      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d910      	bls.n	8004718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b67      	ldr	r3, [pc, #412]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 020f 	bic.w	r2, r3, #15
 80046fe:	4965      	ldr	r1, [pc, #404]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b63      	ldr	r3, [pc, #396]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0b8      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a58      	ldr	r2, [pc, #352]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004748:	4b53      	ldr	r3, [pc, #332]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a52      	ldr	r2, [pc, #328]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800474e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004752:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	494d      	ldr	r1, [pc, #308]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d040      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d115      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	4b41      	ldr	r3, [pc, #260]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e073      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a2:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e06b      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4936      	ldr	r1, [pc, #216]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fd fd9c 	bl	8002300 <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7fd fd98 	bl	8002300 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e053      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	4b2d      	ldr	r3, [pc, #180]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 020c 	and.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d1eb      	bne.n	80047cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d210      	bcs.n	8004824 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 020f 	bic.w	r2, r3, #15
 800480a:	4922      	ldr	r1, [pc, #136]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e032      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4916      	ldr	r1, [pc, #88]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	490e      	ldr	r1, [pc, #56]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004862:	f000 f821 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004866:	4602      	mov	r2, r0
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	490a      	ldr	r1, [pc, #40]	; (800489c <HAL_RCC_ClockConfig+0x1cc>)
 8004874:	5ccb      	ldrb	r3, [r1, r3]
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1d0>)
 800487c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd fcf8 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023c00 	.word	0x40023c00
 8004898:	40023800 	.word	0x40023800
 800489c:	08008808 	.word	0x08008808
 80048a0:	20000018 	.word	0x20000018
 80048a4:	2000001c 	.word	0x2000001c

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	2300      	movs	r3, #0
 80048ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c0:	4b67      	ldr	r3, [pc, #412]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d00d      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x40>
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	f200 80bd 	bhi.w	8004a4c <HAL_RCC_GetSysClockFreq+0x1a4>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x34>
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048da:	e0b7      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b61      	ldr	r3, [pc, #388]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048de:	60bb      	str	r3, [r7, #8]
      break;
 80048e0:	e0b7      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e2:	4b61      	ldr	r3, [pc, #388]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80048e4:	60bb      	str	r3, [r7, #8]
      break;
 80048e6:	e0b4      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e8:	4b5d      	ldr	r3, [pc, #372]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048f2:	4b5b      	ldr	r3, [pc, #364]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d04d      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fe:	4b58      	ldr	r3, [pc, #352]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	099b      	lsrs	r3, r3, #6
 8004904:	461a      	mov	r2, r3
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	ea02 0800 	and.w	r8, r2, r0
 8004916:	ea03 0901 	and.w	r9, r3, r1
 800491a:	4640      	mov	r0, r8
 800491c:	4649      	mov	r1, r9
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	014b      	lsls	r3, r1, #5
 8004928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800492c:	0142      	lsls	r2, r0, #5
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	ebb0 0008 	subs.w	r0, r0, r8
 8004936:	eb61 0109 	sbc.w	r1, r1, r9
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	018b      	lsls	r3, r1, #6
 8004944:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004948:	0182      	lsls	r2, r0, #6
 800494a:	1a12      	subs	r2, r2, r0
 800494c:	eb63 0301 	sbc.w	r3, r3, r1
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	00d9      	lsls	r1, r3, #3
 800495a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800495e:	00d0      	lsls	r0, r2, #3
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	eb12 0208 	adds.w	r2, r2, r8
 8004968:	eb43 0309 	adc.w	r3, r3, r9
 800496c:	f04f 0000 	mov.w	r0, #0
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	0259      	lsls	r1, r3, #9
 8004976:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800497a:	0250      	lsls	r0, r2, #9
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	461a      	mov	r2, r3
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	f7fc f8ae 	bl	8000aec <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4613      	mov	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e04a      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	ea02 0400 	and.w	r4, r2, r0
 80049b2:	ea03 0501 	and.w	r5, r3, r1
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	014b      	lsls	r3, r1, #5
 80049c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049c8:	0142      	lsls	r2, r0, #5
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	1b00      	subs	r0, r0, r4
 80049d0:	eb61 0105 	sbc.w	r1, r1, r5
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	018b      	lsls	r3, r1, #6
 80049de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049e2:	0182      	lsls	r2, r0, #6
 80049e4:	1a12      	subs	r2, r2, r0
 80049e6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ea:	f04f 0000 	mov.w	r0, #0
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	00d9      	lsls	r1, r3, #3
 80049f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049f8:	00d0      	lsls	r0, r2, #3
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	1912      	adds	r2, r2, r4
 8004a00:	eb45 0303 	adc.w	r3, r5, r3
 8004a04:	f04f 0000 	mov.w	r0, #0
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	0299      	lsls	r1, r3, #10
 8004a0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a12:	0290      	lsls	r0, r2, #10
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	f7fc f862 	bl	8000aec <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	60bb      	str	r3, [r7, #8]
      break;
 8004a4a:	e002      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a4e:	60bb      	str	r3, [r7, #8]
      break;
 8004a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a52:	68bb      	ldr	r3, [r7, #8]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a5e:	bf00      	nop
 8004a60:	40023800 	.word	0x40023800
 8004a64:	00f42400 	.word	0x00f42400
 8004a68:	007a1200 	.word	0x007a1200

08004a6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000018 	.word	0x20000018

08004a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a88:	f7ff fff0 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0a9b      	lsrs	r3, r3, #10
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4903      	ldr	r1, [pc, #12]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	08008818 	.word	0x08008818

08004aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ab0:	f7ff ffdc 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	0b5b      	lsrs	r3, r3, #13
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4903      	ldr	r1, [pc, #12]	; (8004ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac2:	5ccb      	ldrb	r3, [r1, r3]
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	08008818 	.word	0x08008818

08004ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d012      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004afc:	4b69      	ldr	r3, [pc, #420]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a68      	ldr	r2, [pc, #416]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b06:	6093      	str	r3, [r2, #8]
 8004b08:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	4964      	ldr	r1, [pc, #400]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d017      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	4959      	ldr	r1, [pc, #356]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d017      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b6a:	4b4e      	ldr	r3, [pc, #312]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	494a      	ldr	r1, [pc, #296]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b88:	d101      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 808b 	beq.w	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bb8:	4b3a      	ldr	r3, [pc, #232]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	4a39      	ldr	r2, [pc, #228]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc4:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bd0:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a34      	ldr	r2, [pc, #208]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bdc:	f7fd fb90 	bl	8002300 <HAL_GetTick>
 8004be0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be4:	f7fd fb8c 	bl	8002300 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e357      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bf6:	4b2c      	ldr	r3, [pc, #176]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c02:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d035      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d02e      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c20:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c36:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c42:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c48:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d114      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd fb54 	bl	8002300 <HAL_GetTick>
 8004c58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c5c:	f7fd fb50 	bl	8002300 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e319      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ee      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c8a:	d111      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c9a:	400b      	ands	r3, r1
 8004c9c:	4901      	ldr	r1, [pc, #4]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	0ffffcff 	.word	0x0ffffcff
 8004cb0:	4bb1      	ldr	r3, [pc, #708]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4ab0      	ldr	r2, [pc, #704]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cba:	6093      	str	r3, [r2, #8]
 8004cbc:	4bae      	ldr	r3, [pc, #696]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc8:	49ab      	ldr	r1, [pc, #684]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d010      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cda:	4ba7      	ldr	r3, [pc, #668]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce0:	4aa5      	ldr	r2, [pc, #660]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004cea:	4ba3      	ldr	r3, [pc, #652]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	49a0      	ldr	r1, [pc, #640]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d08:	4b9b      	ldr	r3, [pc, #620]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d16:	4998      	ldr	r1, [pc, #608]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d2a:	4b93      	ldr	r3, [pc, #588]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d38:	498f      	ldr	r1, [pc, #572]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5a:	4987      	ldr	r1, [pc, #540]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d6e:	4b82      	ldr	r3, [pc, #520]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	497e      	ldr	r1, [pc, #504]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d90:	4b79      	ldr	r3, [pc, #484]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4976      	ldr	r1, [pc, #472]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004db2:	4b71      	ldr	r3, [pc, #452]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db8:	f023 020c 	bic.w	r2, r3, #12
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc0:	496d      	ldr	r1, [pc, #436]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dd4:	4b68      	ldr	r3, [pc, #416]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de2:	4965      	ldr	r1, [pc, #404]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004df6:	4b60      	ldr	r3, [pc, #384]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	495c      	ldr	r1, [pc, #368]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e18:	4b57      	ldr	r3, [pc, #348]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	4954      	ldr	r1, [pc, #336]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e3a:	4b4f      	ldr	r3, [pc, #316]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	494b      	ldr	r1, [pc, #300]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e5c:	4b46      	ldr	r3, [pc, #280]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6a:	4943      	ldr	r1, [pc, #268]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e7e:	4b3e      	ldr	r3, [pc, #248]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8c:	493a      	ldr	r1, [pc, #232]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ea0:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eae:	4932      	ldr	r1, [pc, #200]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d011      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed0:	4929      	ldr	r1, [pc, #164]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f02:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f10:	4919      	ldr	r1, [pc, #100]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00b      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f34:	4910      	ldr	r1, [pc, #64]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d006      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80d9 	beq.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5c:	f7fd f9d0 	bl	8002300 <HAL_GetTick>
 8004f60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f62:	e00b      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f64:	f7fd f9cc 	bl	8002300 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	; 0x64
 8004f70:	d904      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e197      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f76:	bf00      	nop
 8004f78:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f7c:	4b6c      	ldr	r3, [pc, #432]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1ed      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d021      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d11d      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f9c:	4b64      	ldr	r3, [pc, #400]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa2:	0c1b      	lsrs	r3, r3, #16
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004faa:	4b61      	ldr	r3, [pc, #388]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb0:	0e1b      	lsrs	r3, r3, #24
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	019a      	lsls	r2, r3, #6
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	071b      	lsls	r3, r3, #28
 8004fd0:	4957      	ldr	r1, [pc, #348]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d02e      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005002:	d129      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005004:	4b4a      	ldr	r3, [pc, #296]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500a:	0c1b      	lsrs	r3, r3, #16
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005012:	4b47      	ldr	r3, [pc, #284]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005018:	0f1b      	lsrs	r3, r3, #28
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	019a      	lsls	r2, r3, #6
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	431a      	orrs	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	071b      	lsls	r3, r3, #28
 8005038:	493d      	ldr	r1, [pc, #244]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005040:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005046:	f023 021f 	bic.w	r2, r3, #31
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	3b01      	subs	r3, #1
 8005050:	4937      	ldr	r1, [pc, #220]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01d      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005064:	4b32      	ldr	r3, [pc, #200]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506a:	0e1b      	lsrs	r3, r3, #24
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005072:	4b2f      	ldr	r3, [pc, #188]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005078:	0f1b      	lsrs	r3, r3, #28
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	019a      	lsls	r2, r3, #6
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	431a      	orrs	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	431a      	orrs	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	071b      	lsls	r3, r3, #28
 8005098:	4925      	ldr	r1, [pc, #148]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d011      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	019a      	lsls	r2, r3, #6
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	071b      	lsls	r3, r3, #28
 80050c8:	4919      	ldr	r1, [pc, #100]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a16      	ldr	r2, [pc, #88]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fd f910 	bl	8002300 <HAL_GetTick>
 80050e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050e4:	f7fd f90c 	bl	8002300 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0d7      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050f6:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f0      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b01      	cmp	r3, #1
 8005106:	f040 80cd 	bne.w	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005116:	f7fd f8f3 	bl	8002300 <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800511e:	f7fd f8ef 	bl	8002300 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b64      	cmp	r3, #100	; 0x64
 800512a:	d903      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0ba      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005130:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005134:	4b5e      	ldr	r3, [pc, #376]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800513c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005140:	d0ed      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800515e:	2b00      	cmp	r3, #0
 8005160:	d02e      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d12a      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800516a:	4b51      	ldr	r3, [pc, #324]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005178:	4b4d      	ldr	r3, [pc, #308]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	0f1b      	lsrs	r3, r3, #28
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	019a      	lsls	r2, r3, #6
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	431a      	orrs	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	071b      	lsls	r3, r3, #28
 800519e:	4944      	ldr	r1, [pc, #272]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051a6:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	493d      	ldr	r1, [pc, #244]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d022      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d4:	d11d      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051d6:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	0f1b      	lsrs	r3, r3, #28
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	019a      	lsls	r2, r3, #6
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	431a      	orrs	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	061b      	lsls	r3, r3, #24
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	4929      	ldr	r1, [pc, #164]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d028      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800521e:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	0e1b      	lsrs	r3, r3, #24
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800522c:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	0c1b      	lsrs	r3, r3, #16
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	019a      	lsls	r2, r3, #6
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	431a      	orrs	r2, r3
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	4917      	ldr	r1, [pc, #92]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800525a:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800525c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	4911      	ldr	r1, [pc, #68]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a0e      	ldr	r2, [pc, #56]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527c:	f7fd f840 	bl	8002300 <HAL_GetTick>
 8005280:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005284:	f7fd f83c 	bl	8002300 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	; 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e007      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800529e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a2:	d1ef      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800

080052b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e049      	b.n	800535a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc fe20 	bl	8001f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f000 fe7a 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	d001      	beq.n	800537c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e054      	b.n	8005426 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a26      	ldr	r2, [pc, #152]	; (8005434 <HAL_TIM_Base_Start_IT+0xd0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d022      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a6:	d01d      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a22      	ldr	r2, [pc, #136]	; (8005438 <HAL_TIM_Base_Start_IT+0xd4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d018      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a21      	ldr	r2, [pc, #132]	; (800543c <HAL_TIM_Base_Start_IT+0xd8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <HAL_TIM_Base_Start_IT+0xdc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00e      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <HAL_TIM_Base_Start_IT+0xe0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <HAL_TIM_Base_Start_IT+0xe4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_TIM_Base_Start_IT+0xe8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d115      	bne.n	8005410 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	4b19      	ldr	r3, [pc, #100]	; (8005450 <HAL_TIM_Base_Start_IT+0xec>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d015      	beq.n	8005422 <HAL_TIM_Base_Start_IT+0xbe>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d011      	beq.n	8005422 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540e:	e008      	b.n	8005422 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e000      	b.n	8005424 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40010400 	.word	0x40010400
 8005448:	40014000 	.word	0x40014000
 800544c:	40001800 	.word	0x40001800
 8005450:	00010007 	.word	0x00010007

08005454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e049      	b.n	80054fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f841 	bl	8005502 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f000 fdaa 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_TIM_PWM_Start+0x24>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e03c      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d109      	bne.n	8005556 <HAL_TIM_PWM_Start+0x3e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	e02f      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start+0x58>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e022      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d109      	bne.n	800558a <HAL_TIM_PWM_Start+0x72>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e015      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b10      	cmp	r3, #16
 800558e:	d109      	bne.n	80055a4 <HAL_TIM_PWM_Start+0x8c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e008      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	bf14      	ite	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	2300      	moveq	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e092      	b.n	80056e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start+0xb6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055cc:	e023      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d104      	bne.n	80055de <HAL_TIM_PWM_Start+0xc6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055dc:	e01b      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_PWM_Start+0xd6>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ec:	e013      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Start+0xe6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055fc:	e00b      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b10      	cmp	r3, #16
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0xf6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800560c:	e003      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2201      	movs	r2, #1
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f001 f87c 	bl	800671c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a30      	ldr	r2, [pc, #192]	; (80056ec <HAL_TIM_PWM_Start+0x1d4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d004      	beq.n	8005638 <HAL_TIM_PWM_Start+0x120>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2f      	ldr	r2, [pc, #188]	; (80056f0 <HAL_TIM_PWM_Start+0x1d8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d101      	bne.n	800563c <HAL_TIM_PWM_Start+0x124>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <HAL_TIM_PWM_Start+0x126>
 800563c:	2300      	movs	r3, #0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005650:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a25      	ldr	r2, [pc, #148]	; (80056ec <HAL_TIM_PWM_Start+0x1d4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x18a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005664:	d01d      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x18a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <HAL_TIM_PWM_Start+0x1dc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x18a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a20      	ldr	r2, [pc, #128]	; (80056f8 <HAL_TIM_PWM_Start+0x1e0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x18a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1f      	ldr	r2, [pc, #124]	; (80056fc <HAL_TIM_PWM_Start+0x1e4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x18a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <HAL_TIM_PWM_Start+0x1d8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x18a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1b      	ldr	r2, [pc, #108]	; (8005700 <HAL_TIM_PWM_Start+0x1e8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x18a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a19      	ldr	r2, [pc, #100]	; (8005704 <HAL_TIM_PWM_Start+0x1ec>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d115      	bne.n	80056ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	4b17      	ldr	r3, [pc, #92]	; (8005708 <HAL_TIM_PWM_Start+0x1f0>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b06      	cmp	r3, #6
 80056b2:	d015      	beq.n	80056e0 <HAL_TIM_PWM_Start+0x1c8>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ba:	d011      	beq.n	80056e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056cc:	e008      	b.n	80056e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0201 	orr.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e000      	b.n	80056e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40010400 	.word	0x40010400
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40014000 	.word	0x40014000
 8005704:	40001800 	.word	0x40001800
 8005708:	00010007 	.word	0x00010007

0800570c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e08f      	b.n	8005840 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fc fc4f 	bl	8001fd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6899      	ldr	r1, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b3e      	ldr	r3, [pc, #248]	; (8005848 <HAL_TIM_Encoder_Init+0x13c>)
 800574e:	400b      	ands	r3, r1
 8005750:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3304      	adds	r3, #4
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f000 fc45 	bl	8005fec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4b31      	ldr	r3, [pc, #196]	; (800584c <HAL_TIM_Encoder_Init+0x140>)
 8005788:	4013      	ands	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	4313      	orrs	r3, r2
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <HAL_TIM_Encoder_Init+0x144>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4b2a      	ldr	r3, [pc, #168]	; (8005854 <HAL_TIM_Encoder_Init+0x148>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	4313      	orrs	r3, r2
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	011a      	lsls	r2, r3, #4
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	031b      	lsls	r3, r3, #12
 80057cc:	4313      	orrs	r3, r2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	4313      	orrs	r3, r2
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	fffebff8 	.word	0xfffebff8
 800584c:	fffffcfc 	.word	0xfffffcfc
 8005850:	fffff3f3 	.word	0xfffff3f3
 8005854:	ffff0f0f 	.word	0xffff0f0f

08005858 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005868:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005870:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005878:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005880:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d110      	bne.n	80058aa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d102      	bne.n	8005894 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800588e:	7b7b      	ldrb	r3, [r7, #13]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d001      	beq.n	8005898 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e089      	b.n	80059ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a8:	e031      	b.n	800590e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d110      	bne.n	80058d2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058b0:	7bbb      	ldrb	r3, [r7, #14]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d102      	bne.n	80058bc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b6:	7b3b      	ldrb	r3, [r7, #12]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d001      	beq.n	80058c0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e075      	b.n	80059ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058d0:	e01d      	b.n	800590e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d108      	bne.n	80058ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d8:	7bbb      	ldrb	r3, [r7, #14]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d105      	bne.n	80058ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058de:	7b7b      	ldrb	r3, [r7, #13]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d102      	bne.n	80058ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058e4:	7b3b      	ldrb	r3, [r7, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d001      	beq.n	80058ee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e05e      	b.n	80059ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b04      	cmp	r3, #4
 8005918:	d010      	beq.n	800593c <HAL_TIM_Encoder_Start_IT+0xe4>
 800591a:	e01f      	b.n	800595c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fef9 	bl	800671c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0202 	orr.w	r2, r2, #2
 8005938:	60da      	str	r2, [r3, #12]
      break;
 800593a:	e02e      	b.n	800599a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	2104      	movs	r1, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fee9 	bl	800671c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0204 	orr.w	r2, r2, #4
 8005958:	60da      	str	r2, [r3, #12]
      break;
 800595a:	e01e      	b.n	800599a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fed9 	bl	800671c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	2104      	movs	r1, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fed2 	bl	800671c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0202 	orr.w	r2, r2, #2
 8005986:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0204 	orr.w	r2, r2, #4
 8005996:	60da      	str	r2, [r3, #12]
      break;
 8005998:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d122      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d11b      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0202 	mvn.w	r2, #2
 80059e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fb ff02 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fad6 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fadd 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0204 	mvn.w	r2, #4
 8005a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fb fed8 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 faac 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fab3 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d122      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0208 	mvn.w	r2, #8
 8005a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb feae 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa82 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fa89 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b10      	cmp	r3, #16
 8005ac4:	d122      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0210 	mvn.w	r2, #16
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fb fe84 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8005af8:	e005      	b.n	8005b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa58 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fa5f 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d10e      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0201 	mvn.w	r2, #1
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fb fdb2 	bl	800169c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b80      	cmp	r3, #128	; 0x80
 8005b44:	d10e      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	2b80      	cmp	r3, #128	; 0x80
 8005b52:	d107      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fe9a 	bl	8006898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d10e      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d107      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fe8d 	bl	80068ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d10e      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d107      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fa0d 	bl	8005fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d10e      	bne.n	8005bea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d107      	bne.n	8005bea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f06f 0220 	mvn.w	r2, #32
 8005be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fe4d 	bl	8006884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e0ff      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b14      	cmp	r3, #20
 8005c1e:	f200 80f0 	bhi.w	8005e02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005e03 	.word	0x08005e03
 8005c30:	08005e03 	.word	0x08005e03
 8005c34:	08005e03 	.word	0x08005e03
 8005c38:	08005cbd 	.word	0x08005cbd
 8005c3c:	08005e03 	.word	0x08005e03
 8005c40:	08005e03 	.word	0x08005e03
 8005c44:	08005e03 	.word	0x08005e03
 8005c48:	08005cff 	.word	0x08005cff
 8005c4c:	08005e03 	.word	0x08005e03
 8005c50:	08005e03 	.word	0x08005e03
 8005c54:	08005e03 	.word	0x08005e03
 8005c58:	08005d3f 	.word	0x08005d3f
 8005c5c:	08005e03 	.word	0x08005e03
 8005c60:	08005e03 	.word	0x08005e03
 8005c64:	08005e03 	.word	0x08005e03
 8005c68:	08005d81 	.word	0x08005d81
 8005c6c:	08005e03 	.word	0x08005e03
 8005c70:	08005e03 	.word	0x08005e03
 8005c74:	08005e03 	.word	0x08005e03
 8005c78:	08005dc1 	.word	0x08005dc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fa52 	bl	800612c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0208 	orr.w	r2, r2, #8
 8005c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0204 	bic.w	r2, r2, #4
 8005ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6999      	ldr	r1, [r3, #24]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	619a      	str	r2, [r3, #24]
      break;
 8005cba:	e0a5      	b.n	8005e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 faa4 	bl	8006210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6999      	ldr	r1, [r3, #24]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	021a      	lsls	r2, r3, #8
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	619a      	str	r2, [r3, #24]
      break;
 8005cfc:	e084      	b.n	8005e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fafb 	bl	8006300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0208 	orr.w	r2, r2, #8
 8005d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0204 	bic.w	r2, r2, #4
 8005d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69d9      	ldr	r1, [r3, #28]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	61da      	str	r2, [r3, #28]
      break;
 8005d3c:	e064      	b.n	8005e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fb51 	bl	80063ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69d9      	ldr	r1, [r3, #28]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	021a      	lsls	r2, r3, #8
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	61da      	str	r2, [r3, #28]
      break;
 8005d7e:	e043      	b.n	8005e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fb88 	bl	800649c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0208 	orr.w	r2, r2, #8
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0204 	bic.w	r2, r2, #4
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dbe:	e023      	b.n	8005e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fbba 	bl	8006540 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	021a      	lsls	r2, r3, #8
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e00:	e002      	b.n	8005e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
      break;
 8005e06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop

08005e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_ConfigClockSource+0x1c>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e0b4      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x186>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	4b56      	ldr	r3, [pc, #344]	; (8005fac <HAL_TIM_ConfigClockSource+0x190>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e70:	d03e      	beq.n	8005ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8005e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e76:	f200 8087 	bhi.w	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	f000 8086 	beq.w	8005f8e <HAL_TIM_ConfigClockSource+0x172>
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e86:	d87f      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
 8005e88:	2b70      	cmp	r3, #112	; 0x70
 8005e8a:	d01a      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8005e8c:	2b70      	cmp	r3, #112	; 0x70
 8005e8e:	d87b      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b60      	cmp	r3, #96	; 0x60
 8005e92:	d050      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x11a>
 8005e94:	2b60      	cmp	r3, #96	; 0x60
 8005e96:	d877      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b50      	cmp	r3, #80	; 0x50
 8005e9a:	d03c      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0xfa>
 8005e9c:	2b50      	cmp	r3, #80	; 0x50
 8005e9e:	d873      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d058      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x13a>
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d86f      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b30      	cmp	r3, #48	; 0x30
 8005eaa:	d064      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15a>
 8005eac:	2b30      	cmp	r3, #48	; 0x30
 8005eae:	d86b      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d060      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15a>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d867      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d05c      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15a>
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d05a      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec0:	e062      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6899      	ldr	r1, [r3, #8]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f000 fc03 	bl	80066dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	609a      	str	r2, [r3, #8]
      break;
 8005eee:	e04f      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6899      	ldr	r1, [r3, #8]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f000 fbec 	bl	80066dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f12:	609a      	str	r2, [r3, #8]
      break;
 8005f14:	e03c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6859      	ldr	r1, [r3, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f000 fb60 	bl	80065e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2150      	movs	r1, #80	; 0x50
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fbb9 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 8005f34:	e02c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6859      	ldr	r1, [r3, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f000 fb7f 	bl	8006646 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2160      	movs	r1, #96	; 0x60
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fba9 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 8005f54:	e01c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6859      	ldr	r1, [r3, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	461a      	mov	r2, r3
 8005f64:	f000 fb40 	bl	80065e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2140      	movs	r1, #64	; 0x40
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fb99 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 8005f74:	e00c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f000 fb90 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 8005f86:	e003      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8c:	e000      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	fffeff88 	.word	0xfffeff88

08005fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a40      	ldr	r2, [pc, #256]	; (8006100 <TIM_Base_SetConfig+0x114>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600a:	d00f      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3d      	ldr	r2, [pc, #244]	; (8006104 <TIM_Base_SetConfig+0x118>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3c      	ldr	r2, [pc, #240]	; (8006108 <TIM_Base_SetConfig+0x11c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <TIM_Base_SetConfig+0x120>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3a      	ldr	r2, [pc, #232]	; (8006110 <TIM_Base_SetConfig+0x124>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2f      	ldr	r2, [pc, #188]	; (8006100 <TIM_Base_SetConfig+0x114>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d02b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604c:	d027      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2c      	ldr	r2, [pc, #176]	; (8006104 <TIM_Base_SetConfig+0x118>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d023      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2b      	ldr	r2, [pc, #172]	; (8006108 <TIM_Base_SetConfig+0x11c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01f      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2a      	ldr	r2, [pc, #168]	; (800610c <TIM_Base_SetConfig+0x120>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a29      	ldr	r2, [pc, #164]	; (8006110 <TIM_Base_SetConfig+0x124>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d017      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a28      	ldr	r2, [pc, #160]	; (8006114 <TIM_Base_SetConfig+0x128>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a27      	ldr	r2, [pc, #156]	; (8006118 <TIM_Base_SetConfig+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00f      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a26      	ldr	r2, [pc, #152]	; (800611c <TIM_Base_SetConfig+0x130>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00b      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a25      	ldr	r2, [pc, #148]	; (8006120 <TIM_Base_SetConfig+0x134>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d007      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a24      	ldr	r2, [pc, #144]	; (8006124 <TIM_Base_SetConfig+0x138>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <TIM_Base_SetConfig+0x13c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d108      	bne.n	80060b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <TIM_Base_SetConfig+0x114>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_Base_SetConfig+0xf8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0c      	ldr	r2, [pc, #48]	; (8006110 <TIM_Base_SetConfig+0x124>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d103      	bne.n	80060ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	615a      	str	r2, [r3, #20]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40010000 	.word	0x40010000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40010400 	.word	0x40010400
 8006114:	40014000 	.word	0x40014000
 8006118:	40014400 	.word	0x40014400
 800611c:	40014800 	.word	0x40014800
 8006120:	40001800 	.word	0x40001800
 8006124:	40001c00 	.word	0x40001c00
 8006128:	40002000 	.word	0x40002000

0800612c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <TIM_OC1_SetConfig+0xd8>)
 8006158:	4013      	ands	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f023 0302 	bic.w	r3, r3, #2
 8006174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a21      	ldr	r2, [pc, #132]	; (8006208 <TIM_OC1_SetConfig+0xdc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC1_SetConfig+0x64>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a20      	ldr	r2, [pc, #128]	; (800620c <TIM_OC1_SetConfig+0xe0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10c      	bne.n	80061aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0308 	bic.w	r3, r3, #8
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f023 0304 	bic.w	r3, r3, #4
 80061a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a16      	ldr	r2, [pc, #88]	; (8006208 <TIM_OC1_SetConfig+0xdc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_OC1_SetConfig+0x8e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <TIM_OC1_SetConfig+0xe0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d111      	bne.n	80061de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	621a      	str	r2, [r3, #32]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	fffeff8f 	.word	0xfffeff8f
 8006208:	40010000 	.word	0x40010000
 800620c:	40010400 	.word	0x40010400

08006210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0210 	bic.w	r2, r3, #16
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4b2e      	ldr	r3, [pc, #184]	; (80062f4 <TIM_OC2_SetConfig+0xe4>)
 800623c:	4013      	ands	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 0320 	bic.w	r3, r3, #32
 800625a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a23      	ldr	r2, [pc, #140]	; (80062f8 <TIM_OC2_SetConfig+0xe8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d003      	beq.n	8006278 <TIM_OC2_SetConfig+0x68>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a22      	ldr	r2, [pc, #136]	; (80062fc <TIM_OC2_SetConfig+0xec>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d10d      	bne.n	8006294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <TIM_OC2_SetConfig+0xe8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_OC2_SetConfig+0x94>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <TIM_OC2_SetConfig+0xec>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d113      	bne.n	80062cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	feff8fff 	.word	0xfeff8fff
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400

08006300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <TIM_OC3_SetConfig+0xe0>)
 800632c:	4013      	ands	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <TIM_OC3_SetConfig+0xe4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC3_SetConfig+0x66>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <TIM_OC3_SetConfig+0xe8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10d      	bne.n	8006382 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <TIM_OC3_SetConfig+0xe4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC3_SetConfig+0x92>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <TIM_OC3_SetConfig+0xe8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d113      	bne.n	80063ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	fffeff8f 	.word	0xfffeff8f
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40010400 	.word	0x40010400

080063ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <TIM_OC4_SetConfig+0xa4>)
 8006418:	4013      	ands	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	031b      	lsls	r3, r3, #12
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a13      	ldr	r2, [pc, #76]	; (8006494 <TIM_OC4_SetConfig+0xa8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC4_SetConfig+0x68>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a12      	ldr	r2, [pc, #72]	; (8006498 <TIM_OC4_SetConfig+0xac>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d109      	bne.n	8006468 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800645a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	019b      	lsls	r3, r3, #6
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	feff8fff 	.word	0xfeff8fff
 8006494:	40010000 	.word	0x40010000
 8006498:	40010400 	.word	0x40010400

0800649c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <TIM_OC5_SetConfig+0x98>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a12      	ldr	r2, [pc, #72]	; (8006538 <TIM_OC5_SetConfig+0x9c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC5_SetConfig+0x5e>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a11      	ldr	r2, [pc, #68]	; (800653c <TIM_OC5_SetConfig+0xa0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d109      	bne.n	800650e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	fffeff8f 	.word	0xfffeff8f
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400

08006540 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4b1c      	ldr	r3, [pc, #112]	; (80065dc <TIM_OC6_SetConfig+0x9c>)
 800656c:	4013      	ands	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	051b      	lsls	r3, r3, #20
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a13      	ldr	r2, [pc, #76]	; (80065e0 <TIM_OC6_SetConfig+0xa0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC6_SetConfig+0x60>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a12      	ldr	r2, [pc, #72]	; (80065e4 <TIM_OC6_SetConfig+0xa4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d109      	bne.n	80065b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	029b      	lsls	r3, r3, #10
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	feff8fff 	.word	0xfeff8fff
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40010400 	.word	0x40010400

080065e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f023 0201 	bic.w	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 030a 	bic.w	r3, r3, #10
 8006624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006646:	b480      	push	{r7}
 8006648:	b087      	sub	sp, #28
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f023 0210 	bic.w	r2, r3, #16
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	031b      	lsls	r3, r3, #12
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f043 0307 	orr.w	r3, r3, #7
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	609a      	str	r2, [r3, #8]
}
 80066d0:	bf00      	nop
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	021a      	lsls	r2, r3, #8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	431a      	orrs	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4313      	orrs	r3, r2
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	609a      	str	r2, [r3, #8]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	2201      	movs	r2, #1
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1a      	ldr	r2, [r3, #32]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	43db      	mvns	r3, r3
 800673e:	401a      	ands	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a1a      	ldr	r2, [r3, #32]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	fa01 f303 	lsl.w	r3, r1, r3
 8006754:	431a      	orrs	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	621a      	str	r2, [r3, #32]
}
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e06d      	b.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a30      	ldr	r2, [pc, #192]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2f      	ldr	r2, [pc, #188]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a20      	ldr	r2, [pc, #128]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d022      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f2:	d01d      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1d      	ldr	r2, [pc, #116]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d018      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1a      	ldr	r2, [pc, #104]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00e      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a15      	ldr	r2, [pc, #84]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d009      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a16      	ldr	r2, [pc, #88]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10c      	bne.n	800684a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40010000 	.word	0x40010000
 800686c:	40010400 	.word	0x40010400
 8006870:	40000400 	.word	0x40000400
 8006874:	40000800 	.word	0x40000800
 8006878:	40000c00 	.word	0x40000c00
 800687c:	40014000 	.word	0x40014000
 8006880:	40001800 	.word	0x40001800

08006884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e040      	b.n	8006954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fb fc2a 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	; 0x24
 80068ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0201 	bic.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fbf8 	bl	80070f4 <UART_SetConfig>
 8006904:	4603      	mov	r3, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e022      	b.n	8006954 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fe4e 	bl	80075b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800692a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800693a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fed5 	bl	80076fc <UART_CheckIdleState>
 8006952:	4603      	mov	r3, r0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	; 0x28
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	4613      	mov	r3, r2
 800696a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006970:	2b20      	cmp	r3, #32
 8006972:	f040 8081 	bne.w	8006a78 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_UART_Transmit+0x26>
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e079      	b.n	8006a7a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_UART_Transmit+0x38>
 8006990:	2302      	movs	r3, #2
 8006992:	e072      	b.n	8006a7a <HAL_UART_Transmit+0x11e>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2221      	movs	r2, #33	; 0x21
 80069a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069aa:	f7fb fca9 	bl	8002300 <HAL_GetTick>
 80069ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c8:	d108      	bne.n	80069dc <HAL_UART_Transmit+0x80>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d104      	bne.n	80069dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	e003      	b.n	80069e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069ec:	e02c      	b.n	8006a48 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2200      	movs	r2, #0
 80069f6:	2180      	movs	r1, #128	; 0x80
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 feb2 	bl	8007762 <UART_WaitOnFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e038      	b.n	8006a7a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	3302      	adds	r3, #2
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	e007      	b.n	8006a36 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	781a      	ldrb	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	3301      	adds	r3, #1
 8006a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1cc      	bne.n	80069ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2140      	movs	r1, #64	; 0x40
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 fe7f 	bl	8007762 <UART_WaitOnFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e005      	b.n	8006a7a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	e000      	b.n	8006a7a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a78:	2302      	movs	r3, #2
  }
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3720      	adds	r7, #32
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b08a      	sub	sp, #40	; 0x28
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d13d      	bne.n	8006b14 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_UART_Receive_IT+0x22>
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e036      	b.n	8006b16 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Receive_IT+0x34>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e02f      	b.n	8006b16 <HAL_UART_Receive_IT+0x94>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d018      	beq.n	8006b04 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	623b      	str	r3, [r7, #32]
 8006af2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	69f9      	ldr	r1, [r7, #28]
 8006af6:	6a3a      	ldr	r2, [r7, #32]
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e6      	bne.n	8006ad2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	461a      	mov	r2, r3
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 feee 	bl	80078ec <UART_Start_Receive_IT>
 8006b10:	4603      	mov	r3, r0
 8006b12:	e000      	b.n	8006b16 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b14:	2302      	movs	r3, #2
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3728      	adds	r7, #40	; 0x28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b0ba      	sub	sp, #232	; 0xe8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b4e:	4013      	ands	r3, r2
 8006b50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d115      	bne.n	8006b88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00f      	beq.n	8006b88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 828f 	beq.w	800709c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
      }
      return;
 8006b86:	e289      	b.n	800709c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8117 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ba2:	4b85      	ldr	r3, [pc, #532]	; (8006db8 <HAL_UART_IRQHandler+0x298>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 810a 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d011      	beq.n	8006bdc <HAL_UART_IRQHandler+0xbc>
 8006bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd2:	f043 0201 	orr.w	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d011      	beq.n	8006c0c <HAL_UART_IRQHandler+0xec>
 8006be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c02:	f043 0204 	orr.w	r2, r3, #4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d011      	beq.n	8006c3c <HAL_UART_IRQHandler+0x11c>
 8006c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2204      	movs	r2, #4
 8006c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c32:	f043 0202 	orr.w	r2, r3, #2
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d017      	beq.n	8006c78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d105      	bne.n	8006c60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2208      	movs	r2, #8
 8006c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6e:	f043 0208 	orr.w	r2, r3, #8
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d012      	beq.n	8006caa <HAL_UART_IRQHandler+0x18a>
 8006c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00c      	beq.n	8006caa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca0:	f043 0220 	orr.w	r2, r3, #32
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 81f5 	beq.w	80070a0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d005      	beq.n	8006d02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d04f      	beq.n	8006da2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 febc 	bl	8007a80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d141      	bne.n	8006d9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1d9      	bne.n	8006d16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d013      	beq.n	8006d92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6e:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <HAL_UART_IRQHandler+0x29c>)
 8006d70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fb fc73 	bl	8002662 <HAL_DMA_Abort_IT>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d017      	beq.n	8006db2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d90:	e00f      	b.n	8006db2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f998 	bl	80070c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	e00b      	b.n	8006db2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f994 	bl	80070c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	e007      	b.n	8006db2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f990 	bl	80070c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006db0:	e176      	b.n	80070a0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db2:	bf00      	nop
    return;
 8006db4:	e174      	b.n	80070a0 <HAL_UART_IRQHandler+0x580>
 8006db6:	bf00      	nop
 8006db8:	04000120 	.word	0x04000120
 8006dbc:	08007b47 	.word	0x08007b47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	f040 8144 	bne.w	8007052 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 813d 	beq.w	8007052 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8136 	beq.w	8007052 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2210      	movs	r2, #16
 8006dec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	f040 80b2 	bne.w	8006f62 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8148 	beq.w	80070a4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	f080 8140 	bcs.w	80070a4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e38:	f000 8085 	beq.w	8006f46 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1da      	bne.n	8006e3c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eaa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006eb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e1      	bne.n	8006e86 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ee6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ee8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006eec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e3      	bne.n	8006ec2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f16:	f023 0310 	bic.w	r3, r3, #16
 8006f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f28:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e4      	bne.n	8006f06 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fb fb1e 	bl	8002582 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f8be 	bl	80070dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f60:	e0a0      	b.n	80070a4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 8092 	beq.w	80070a8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 808d 	beq.w	80070a8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	f023 0301 	bic.w	r3, r3, #1
 8006fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fe8:	633a      	str	r2, [r7, #48]	; 0x30
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e3      	bne.n	8006fc4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	60fb      	str	r3, [r7, #12]
   return(result);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f023 0310 	bic.w	r3, r3, #16
 8007022:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	69b9      	ldr	r1, [r7, #24]
 8007036:	69fa      	ldr	r2, [r7, #28]
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	617b      	str	r3, [r7, #20]
   return(result);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e4      	bne.n	800700e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f846 	bl	80070dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007050:	e02a      	b.n	80070a8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00e      	beq.n	800707c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800705e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01c      	beq.n	80070ac <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
    }
    return;
 800707a:	e017      	b.n	80070ac <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800707c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d012      	beq.n	80070ae <HAL_UART_IRQHandler+0x58e>
 8007088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00c      	beq.n	80070ae <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fd6c 	bl	8007b72 <UART_EndTransmit_IT>
    return;
 800709a:	e008      	b.n	80070ae <HAL_UART_IRQHandler+0x58e>
      return;
 800709c:	bf00      	nop
 800709e:	e006      	b.n	80070ae <HAL_UART_IRQHandler+0x58e>
    return;
 80070a0:	bf00      	nop
 80070a2:	e004      	b.n	80070ae <HAL_UART_IRQHandler+0x58e>
      return;
 80070a4:	bf00      	nop
 80070a6:	e002      	b.n	80070ae <HAL_UART_IRQHandler+0x58e>
      return;
 80070a8:	bf00      	nop
 80070aa:	e000      	b.n	80070ae <HAL_UART_IRQHandler+0x58e>
    return;
 80070ac:	bf00      	nop
  }

}
 80070ae:	37e8      	adds	r7, #232	; 0xe8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4ba7      	ldr	r3, [pc, #668]	; (80073bc <UART_SetConfig+0x2c8>)
 8007120:	4013      	ands	r3, r2
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	6979      	ldr	r1, [r7, #20]
 8007128:	430b      	orrs	r3, r1
 800712a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	4313      	orrs	r3, r2
 8007150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	430a      	orrs	r2, r1
 8007164:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a95      	ldr	r2, [pc, #596]	; (80073c0 <UART_SetConfig+0x2cc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d120      	bne.n	80071b2 <UART_SetConfig+0xbe>
 8007170:	4b94      	ldr	r3, [pc, #592]	; (80073c4 <UART_SetConfig+0x2d0>)
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b03      	cmp	r3, #3
 800717c:	d816      	bhi.n	80071ac <UART_SetConfig+0xb8>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <UART_SetConfig+0x90>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	08007195 	.word	0x08007195
 8007188:	080071a1 	.word	0x080071a1
 800718c:	0800719b 	.word	0x0800719b
 8007190:	080071a7 	.word	0x080071a7
 8007194:	2301      	movs	r3, #1
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e14f      	b.n	800743a <UART_SetConfig+0x346>
 800719a:	2302      	movs	r3, #2
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e14c      	b.n	800743a <UART_SetConfig+0x346>
 80071a0:	2304      	movs	r3, #4
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	e149      	b.n	800743a <UART_SetConfig+0x346>
 80071a6:	2308      	movs	r3, #8
 80071a8:	77fb      	strb	r3, [r7, #31]
 80071aa:	e146      	b.n	800743a <UART_SetConfig+0x346>
 80071ac:	2310      	movs	r3, #16
 80071ae:	77fb      	strb	r3, [r7, #31]
 80071b0:	e143      	b.n	800743a <UART_SetConfig+0x346>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a84      	ldr	r2, [pc, #528]	; (80073c8 <UART_SetConfig+0x2d4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d132      	bne.n	8007222 <UART_SetConfig+0x12e>
 80071bc:	4b81      	ldr	r3, [pc, #516]	; (80073c4 <UART_SetConfig+0x2d0>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	f003 030c 	and.w	r3, r3, #12
 80071c6:	2b0c      	cmp	r3, #12
 80071c8:	d828      	bhi.n	800721c <UART_SetConfig+0x128>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <UART_SetConfig+0xdc>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	08007205 	.word	0x08007205
 80071d4:	0800721d 	.word	0x0800721d
 80071d8:	0800721d 	.word	0x0800721d
 80071dc:	0800721d 	.word	0x0800721d
 80071e0:	08007211 	.word	0x08007211
 80071e4:	0800721d 	.word	0x0800721d
 80071e8:	0800721d 	.word	0x0800721d
 80071ec:	0800721d 	.word	0x0800721d
 80071f0:	0800720b 	.word	0x0800720b
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	08007217 	.word	0x08007217
 8007204:	2300      	movs	r3, #0
 8007206:	77fb      	strb	r3, [r7, #31]
 8007208:	e117      	b.n	800743a <UART_SetConfig+0x346>
 800720a:	2302      	movs	r3, #2
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e114      	b.n	800743a <UART_SetConfig+0x346>
 8007210:	2304      	movs	r3, #4
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e111      	b.n	800743a <UART_SetConfig+0x346>
 8007216:	2308      	movs	r3, #8
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	e10e      	b.n	800743a <UART_SetConfig+0x346>
 800721c:	2310      	movs	r3, #16
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e10b      	b.n	800743a <UART_SetConfig+0x346>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a69      	ldr	r2, [pc, #420]	; (80073cc <UART_SetConfig+0x2d8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d120      	bne.n	800726e <UART_SetConfig+0x17a>
 800722c:	4b65      	ldr	r3, [pc, #404]	; (80073c4 <UART_SetConfig+0x2d0>)
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007236:	2b30      	cmp	r3, #48	; 0x30
 8007238:	d013      	beq.n	8007262 <UART_SetConfig+0x16e>
 800723a:	2b30      	cmp	r3, #48	; 0x30
 800723c:	d814      	bhi.n	8007268 <UART_SetConfig+0x174>
 800723e:	2b20      	cmp	r3, #32
 8007240:	d009      	beq.n	8007256 <UART_SetConfig+0x162>
 8007242:	2b20      	cmp	r3, #32
 8007244:	d810      	bhi.n	8007268 <UART_SetConfig+0x174>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <UART_SetConfig+0x15c>
 800724a:	2b10      	cmp	r3, #16
 800724c:	d006      	beq.n	800725c <UART_SetConfig+0x168>
 800724e:	e00b      	b.n	8007268 <UART_SetConfig+0x174>
 8007250:	2300      	movs	r3, #0
 8007252:	77fb      	strb	r3, [r7, #31]
 8007254:	e0f1      	b.n	800743a <UART_SetConfig+0x346>
 8007256:	2302      	movs	r3, #2
 8007258:	77fb      	strb	r3, [r7, #31]
 800725a:	e0ee      	b.n	800743a <UART_SetConfig+0x346>
 800725c:	2304      	movs	r3, #4
 800725e:	77fb      	strb	r3, [r7, #31]
 8007260:	e0eb      	b.n	800743a <UART_SetConfig+0x346>
 8007262:	2308      	movs	r3, #8
 8007264:	77fb      	strb	r3, [r7, #31]
 8007266:	e0e8      	b.n	800743a <UART_SetConfig+0x346>
 8007268:	2310      	movs	r3, #16
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e0e5      	b.n	800743a <UART_SetConfig+0x346>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a57      	ldr	r2, [pc, #348]	; (80073d0 <UART_SetConfig+0x2dc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d120      	bne.n	80072ba <UART_SetConfig+0x1c6>
 8007278:	4b52      	ldr	r3, [pc, #328]	; (80073c4 <UART_SetConfig+0x2d0>)
 800727a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007282:	2bc0      	cmp	r3, #192	; 0xc0
 8007284:	d013      	beq.n	80072ae <UART_SetConfig+0x1ba>
 8007286:	2bc0      	cmp	r3, #192	; 0xc0
 8007288:	d814      	bhi.n	80072b4 <UART_SetConfig+0x1c0>
 800728a:	2b80      	cmp	r3, #128	; 0x80
 800728c:	d009      	beq.n	80072a2 <UART_SetConfig+0x1ae>
 800728e:	2b80      	cmp	r3, #128	; 0x80
 8007290:	d810      	bhi.n	80072b4 <UART_SetConfig+0x1c0>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <UART_SetConfig+0x1a8>
 8007296:	2b40      	cmp	r3, #64	; 0x40
 8007298:	d006      	beq.n	80072a8 <UART_SetConfig+0x1b4>
 800729a:	e00b      	b.n	80072b4 <UART_SetConfig+0x1c0>
 800729c:	2300      	movs	r3, #0
 800729e:	77fb      	strb	r3, [r7, #31]
 80072a0:	e0cb      	b.n	800743a <UART_SetConfig+0x346>
 80072a2:	2302      	movs	r3, #2
 80072a4:	77fb      	strb	r3, [r7, #31]
 80072a6:	e0c8      	b.n	800743a <UART_SetConfig+0x346>
 80072a8:	2304      	movs	r3, #4
 80072aa:	77fb      	strb	r3, [r7, #31]
 80072ac:	e0c5      	b.n	800743a <UART_SetConfig+0x346>
 80072ae:	2308      	movs	r3, #8
 80072b0:	77fb      	strb	r3, [r7, #31]
 80072b2:	e0c2      	b.n	800743a <UART_SetConfig+0x346>
 80072b4:	2310      	movs	r3, #16
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e0bf      	b.n	800743a <UART_SetConfig+0x346>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a45      	ldr	r2, [pc, #276]	; (80073d4 <UART_SetConfig+0x2e0>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d125      	bne.n	8007310 <UART_SetConfig+0x21c>
 80072c4:	4b3f      	ldr	r3, [pc, #252]	; (80073c4 <UART_SetConfig+0x2d0>)
 80072c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072d2:	d017      	beq.n	8007304 <UART_SetConfig+0x210>
 80072d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072d8:	d817      	bhi.n	800730a <UART_SetConfig+0x216>
 80072da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072de:	d00b      	beq.n	80072f8 <UART_SetConfig+0x204>
 80072e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e4:	d811      	bhi.n	800730a <UART_SetConfig+0x216>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <UART_SetConfig+0x1fe>
 80072ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ee:	d006      	beq.n	80072fe <UART_SetConfig+0x20a>
 80072f0:	e00b      	b.n	800730a <UART_SetConfig+0x216>
 80072f2:	2300      	movs	r3, #0
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e0a0      	b.n	800743a <UART_SetConfig+0x346>
 80072f8:	2302      	movs	r3, #2
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e09d      	b.n	800743a <UART_SetConfig+0x346>
 80072fe:	2304      	movs	r3, #4
 8007300:	77fb      	strb	r3, [r7, #31]
 8007302:	e09a      	b.n	800743a <UART_SetConfig+0x346>
 8007304:	2308      	movs	r3, #8
 8007306:	77fb      	strb	r3, [r7, #31]
 8007308:	e097      	b.n	800743a <UART_SetConfig+0x346>
 800730a:	2310      	movs	r3, #16
 800730c:	77fb      	strb	r3, [r7, #31]
 800730e:	e094      	b.n	800743a <UART_SetConfig+0x346>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a30      	ldr	r2, [pc, #192]	; (80073d8 <UART_SetConfig+0x2e4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d125      	bne.n	8007366 <UART_SetConfig+0x272>
 800731a:	4b2a      	ldr	r3, [pc, #168]	; (80073c4 <UART_SetConfig+0x2d0>)
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007328:	d017      	beq.n	800735a <UART_SetConfig+0x266>
 800732a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800732e:	d817      	bhi.n	8007360 <UART_SetConfig+0x26c>
 8007330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007334:	d00b      	beq.n	800734e <UART_SetConfig+0x25a>
 8007336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800733a:	d811      	bhi.n	8007360 <UART_SetConfig+0x26c>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <UART_SetConfig+0x254>
 8007340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007344:	d006      	beq.n	8007354 <UART_SetConfig+0x260>
 8007346:	e00b      	b.n	8007360 <UART_SetConfig+0x26c>
 8007348:	2301      	movs	r3, #1
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e075      	b.n	800743a <UART_SetConfig+0x346>
 800734e:	2302      	movs	r3, #2
 8007350:	77fb      	strb	r3, [r7, #31]
 8007352:	e072      	b.n	800743a <UART_SetConfig+0x346>
 8007354:	2304      	movs	r3, #4
 8007356:	77fb      	strb	r3, [r7, #31]
 8007358:	e06f      	b.n	800743a <UART_SetConfig+0x346>
 800735a:	2308      	movs	r3, #8
 800735c:	77fb      	strb	r3, [r7, #31]
 800735e:	e06c      	b.n	800743a <UART_SetConfig+0x346>
 8007360:	2310      	movs	r3, #16
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e069      	b.n	800743a <UART_SetConfig+0x346>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <UART_SetConfig+0x2e8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d137      	bne.n	80073e0 <UART_SetConfig+0x2ec>
 8007370:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <UART_SetConfig+0x2d0>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800737a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800737e:	d017      	beq.n	80073b0 <UART_SetConfig+0x2bc>
 8007380:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007384:	d817      	bhi.n	80073b6 <UART_SetConfig+0x2c2>
 8007386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738a:	d00b      	beq.n	80073a4 <UART_SetConfig+0x2b0>
 800738c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007390:	d811      	bhi.n	80073b6 <UART_SetConfig+0x2c2>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <UART_SetConfig+0x2aa>
 8007396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739a:	d006      	beq.n	80073aa <UART_SetConfig+0x2b6>
 800739c:	e00b      	b.n	80073b6 <UART_SetConfig+0x2c2>
 800739e:	2300      	movs	r3, #0
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e04a      	b.n	800743a <UART_SetConfig+0x346>
 80073a4:	2302      	movs	r3, #2
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e047      	b.n	800743a <UART_SetConfig+0x346>
 80073aa:	2304      	movs	r3, #4
 80073ac:	77fb      	strb	r3, [r7, #31]
 80073ae:	e044      	b.n	800743a <UART_SetConfig+0x346>
 80073b0:	2308      	movs	r3, #8
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e041      	b.n	800743a <UART_SetConfig+0x346>
 80073b6:	2310      	movs	r3, #16
 80073b8:	77fb      	strb	r3, [r7, #31]
 80073ba:	e03e      	b.n	800743a <UART_SetConfig+0x346>
 80073bc:	efff69f3 	.word	0xefff69f3
 80073c0:	40011000 	.word	0x40011000
 80073c4:	40023800 	.word	0x40023800
 80073c8:	40004400 	.word	0x40004400
 80073cc:	40004800 	.word	0x40004800
 80073d0:	40004c00 	.word	0x40004c00
 80073d4:	40005000 	.word	0x40005000
 80073d8:	40011400 	.word	0x40011400
 80073dc:	40007800 	.word	0x40007800
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a71      	ldr	r2, [pc, #452]	; (80075ac <UART_SetConfig+0x4b8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d125      	bne.n	8007436 <UART_SetConfig+0x342>
 80073ea:	4b71      	ldr	r3, [pc, #452]	; (80075b0 <UART_SetConfig+0x4bc>)
 80073ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073f8:	d017      	beq.n	800742a <UART_SetConfig+0x336>
 80073fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073fe:	d817      	bhi.n	8007430 <UART_SetConfig+0x33c>
 8007400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007404:	d00b      	beq.n	800741e <UART_SetConfig+0x32a>
 8007406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740a:	d811      	bhi.n	8007430 <UART_SetConfig+0x33c>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <UART_SetConfig+0x324>
 8007410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007414:	d006      	beq.n	8007424 <UART_SetConfig+0x330>
 8007416:	e00b      	b.n	8007430 <UART_SetConfig+0x33c>
 8007418:	2300      	movs	r3, #0
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e00d      	b.n	800743a <UART_SetConfig+0x346>
 800741e:	2302      	movs	r3, #2
 8007420:	77fb      	strb	r3, [r7, #31]
 8007422:	e00a      	b.n	800743a <UART_SetConfig+0x346>
 8007424:	2304      	movs	r3, #4
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e007      	b.n	800743a <UART_SetConfig+0x346>
 800742a:	2308      	movs	r3, #8
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	e004      	b.n	800743a <UART_SetConfig+0x346>
 8007430:	2310      	movs	r3, #16
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e001      	b.n	800743a <UART_SetConfig+0x346>
 8007436:	2310      	movs	r3, #16
 8007438:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007442:	d15a      	bne.n	80074fa <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007444:	7ffb      	ldrb	r3, [r7, #31]
 8007446:	2b08      	cmp	r3, #8
 8007448:	d827      	bhi.n	800749a <UART_SetConfig+0x3a6>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <UART_SetConfig+0x35c>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007475 	.word	0x08007475
 8007454:	0800747d 	.word	0x0800747d
 8007458:	08007485 	.word	0x08007485
 800745c:	0800749b 	.word	0x0800749b
 8007460:	0800748b 	.word	0x0800748b
 8007464:	0800749b 	.word	0x0800749b
 8007468:	0800749b 	.word	0x0800749b
 800746c:	0800749b 	.word	0x0800749b
 8007470:	08007493 	.word	0x08007493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007474:	f7fd fb06 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8007478:	61b8      	str	r0, [r7, #24]
        break;
 800747a:	e013      	b.n	80074a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800747c:	f7fd fb16 	bl	8004aac <HAL_RCC_GetPCLK2Freq>
 8007480:	61b8      	str	r0, [r7, #24]
        break;
 8007482:	e00f      	b.n	80074a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007484:	4b4b      	ldr	r3, [pc, #300]	; (80075b4 <UART_SetConfig+0x4c0>)
 8007486:	61bb      	str	r3, [r7, #24]
        break;
 8007488:	e00c      	b.n	80074a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748a:	f7fd fa0d 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 800748e:	61b8      	str	r0, [r7, #24]
        break;
 8007490:	e008      	b.n	80074a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007496:	61bb      	str	r3, [r7, #24]
        break;
 8007498:	e004      	b.n	80074a4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	77bb      	strb	r3, [r7, #30]
        break;
 80074a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d074      	beq.n	8007594 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	005a      	lsls	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	441a      	add	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80074be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2b0f      	cmp	r3, #15
 80074c4:	d916      	bls.n	80074f4 <UART_SetConfig+0x400>
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074cc:	d212      	bcs.n	80074f4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f023 030f 	bic.w	r3, r3, #15
 80074d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	89fb      	ldrh	r3, [r7, #14]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	89fa      	ldrh	r2, [r7, #14]
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	e04f      	b.n	8007594 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	77bb      	strb	r3, [r7, #30]
 80074f8:	e04c      	b.n	8007594 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074fa:	7ffb      	ldrb	r3, [r7, #31]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d828      	bhi.n	8007552 <UART_SetConfig+0x45e>
 8007500:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <UART_SetConfig+0x414>)
 8007502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007506:	bf00      	nop
 8007508:	0800752d 	.word	0x0800752d
 800750c:	08007535 	.word	0x08007535
 8007510:	0800753d 	.word	0x0800753d
 8007514:	08007553 	.word	0x08007553
 8007518:	08007543 	.word	0x08007543
 800751c:	08007553 	.word	0x08007553
 8007520:	08007553 	.word	0x08007553
 8007524:	08007553 	.word	0x08007553
 8007528:	0800754b 	.word	0x0800754b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800752c:	f7fd faaa 	bl	8004a84 <HAL_RCC_GetPCLK1Freq>
 8007530:	61b8      	str	r0, [r7, #24]
        break;
 8007532:	e013      	b.n	800755c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007534:	f7fd faba 	bl	8004aac <HAL_RCC_GetPCLK2Freq>
 8007538:	61b8      	str	r0, [r7, #24]
        break;
 800753a:	e00f      	b.n	800755c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800753c:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <UART_SetConfig+0x4c0>)
 800753e:	61bb      	str	r3, [r7, #24]
        break;
 8007540:	e00c      	b.n	800755c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007542:	f7fd f9b1 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8007546:	61b8      	str	r0, [r7, #24]
        break;
 8007548:	e008      	b.n	800755c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754e:	61bb      	str	r3, [r7, #24]
        break;
 8007550:	e004      	b.n	800755c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	77bb      	strb	r3, [r7, #30]
        break;
 800755a:	bf00      	nop
    }

    if (pclk != 0U)
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d018      	beq.n	8007594 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	085a      	lsrs	r2, r3, #1
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	441a      	add	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	fbb2 f3f3 	udiv	r3, r2, r3
 8007574:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b0f      	cmp	r3, #15
 800757a:	d909      	bls.n	8007590 <UART_SetConfig+0x49c>
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007582:	d205      	bcs.n	8007590 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60da      	str	r2, [r3, #12]
 800758e:	e001      	b.n	8007594 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3720      	adds	r7, #32
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40007c00 	.word	0x40007c00
 80075b0:	40023800 	.word	0x40023800
 80075b4:	00f42400 	.word	0x00f42400

080075b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	f003 0310 	and.w	r3, r3, #16
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01a      	beq.n	80076ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076b6:	d10a      	bne.n	80076ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]
  }
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af02      	add	r7, sp, #8
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800770c:	f7fa fdf8 	bl	8002300 <HAL_GetTick>
 8007710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b08      	cmp	r3, #8
 800771e:	d10e      	bne.n	800773e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f817 	bl	8007762 <UART_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e00d      	b.n	800775a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b09c      	sub	sp, #112	; 0x70
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007772:	e0a5      	b.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	f000 80a1 	beq.w	80078c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777e:	f7fa fdbf 	bl	8002300 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <UART_WaitOnFlagUntilTimeout+0x32>
 800778e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007790:	2b00      	cmp	r3, #0
 8007792:	d13e      	bne.n	8007812 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077a8:	667b      	str	r3, [r7, #100]	; 0x64
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e6      	bne.n	8007794 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	663b      	str	r3, [r7, #96]	; 0x60
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80077e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e5      	bne.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e067      	b.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d04f      	beq.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800782a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800782e:	d147      	bne.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007838:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800784e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
 800785a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800785e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e6      	bne.n	800783a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	613b      	str	r3, [r7, #16]
   return(result);
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f023 0301 	bic.w	r3, r3, #1
 8007882:	66bb      	str	r3, [r7, #104]	; 0x68
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800788c:	623a      	str	r2, [r7, #32]
 800788e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	69f9      	ldr	r1, [r7, #28]
 8007892:	6a3a      	ldr	r2, [r7, #32]
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	61bb      	str	r3, [r7, #24]
   return(result);
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e5      	bne.n	800786c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2220      	movs	r2, #32
 80078aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2220      	movs	r2, #32
 80078b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e010      	b.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69da      	ldr	r2, [r3, #28]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4013      	ands	r3, r2
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
 80078d2:	2300      	movne	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	429a      	cmp	r2, r3
 80078dc:	f43f af4a 	beq.w	8007774 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3770      	adds	r7, #112	; 0x70
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b097      	sub	sp, #92	; 0x5c
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	88fa      	ldrh	r2, [r7, #6]
 8007904:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	88fa      	ldrh	r2, [r7, #6]
 800790c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791e:	d10e      	bne.n	800793e <UART_Start_Receive_IT+0x52>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <UART_Start_Receive_IT+0x48>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800792e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007932:	e02d      	b.n	8007990 <UART_Start_Receive_IT+0xa4>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	22ff      	movs	r2, #255	; 0xff
 8007938:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800793c:	e028      	b.n	8007990 <UART_Start_Receive_IT+0xa4>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10d      	bne.n	8007962 <UART_Start_Receive_IT+0x76>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d104      	bne.n	8007958 <UART_Start_Receive_IT+0x6c>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	22ff      	movs	r2, #255	; 0xff
 8007952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007956:	e01b      	b.n	8007990 <UART_Start_Receive_IT+0xa4>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	227f      	movs	r2, #127	; 0x7f
 800795c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007960:	e016      	b.n	8007990 <UART_Start_Receive_IT+0xa4>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800796a:	d10d      	bne.n	8007988 <UART_Start_Receive_IT+0x9c>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <UART_Start_Receive_IT+0x92>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	227f      	movs	r2, #127	; 0x7f
 8007978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800797c:	e008      	b.n	8007990 <UART_Start_Receive_IT+0xa4>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	223f      	movs	r2, #63	; 0x3f
 8007982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007986:	e003      	b.n	8007990 <UART_Start_Receive_IT+0xa4>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2222      	movs	r2, #34	; 0x22
 800799c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	657b      	str	r3, [r7, #84]	; 0x54
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3308      	adds	r3, #8
 80079bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079be:	64ba      	str	r2, [r7, #72]	; 0x48
 80079c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e5      	bne.n	800799e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079da:	d107      	bne.n	80079ec <UART_Start_Receive_IT+0x100>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d103      	bne.n	80079ec <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4a24      	ldr	r2, [pc, #144]	; (8007a78 <UART_Start_Receive_IT+0x18c>)
 80079e8:	665a      	str	r2, [r3, #100]	; 0x64
 80079ea:	e002      	b.n	80079f2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4a23      	ldr	r2, [pc, #140]	; (8007a7c <UART_Start_Receive_IT+0x190>)
 80079f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d019      	beq.n	8007a36 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e6      	bne.n	8007a02 <UART_Start_Receive_IT+0x116>
 8007a34:	e018      	b.n	8007a68 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	613b      	str	r3, [r7, #16]
   return(result);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f043 0320 	orr.w	r3, r3, #32
 8007a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a54:	623b      	str	r3, [r7, #32]
 8007a56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e6      	bne.n	8007a36 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	375c      	adds	r7, #92	; 0x5c
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	08007d23 	.word	0x08007d23
 8007a7c:	08007bc7 	.word	0x08007bc7

08007a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b095      	sub	sp, #84	; 0x54
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8007aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e6      	bne.n	8007a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e5      	bne.n	8007aba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d118      	bne.n	8007b28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f023 0310 	bic.w	r3, r3, #16
 8007b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6979      	ldr	r1, [r7, #20]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	613b      	str	r3, [r7, #16]
   return(result);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e6      	bne.n	8007af6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b3a:	bf00      	nop
 8007b3c:	3754      	adds	r7, #84	; 0x54
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff faaf 	bl	80070c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b088      	sub	sp, #32
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	61bb      	str	r3, [r7, #24]
 8007b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6979      	ldr	r1, [r7, #20]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e6      	bne.n	8007b7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fa7b 	bl	80070b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bbe:	bf00      	nop
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b096      	sub	sp, #88	; 0x58
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bdc:	2b22      	cmp	r3, #34	; 0x22
 8007bde:	f040 8094 	bne.w	8007d0a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007bf0:	b2d9      	uxtb	r1, r3
 8007bf2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	400a      	ands	r2, r1
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d177      	bne.n	8007d1a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c48:	647b      	str	r3, [r7, #68]	; 0x44
 8007c4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
 8007c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c7c:	633a      	str	r2, [r7, #48]	; 0x30
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e5      	bne.n	8007c5c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d12e      	bne.n	8007d02 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0310 	bic.w	r3, r3, #16
 8007cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	69b9      	ldr	r1, [r7, #24]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e6      	bne.n	8007caa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d103      	bne.n	8007cf2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2210      	movs	r2, #16
 8007cf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff f9ee 	bl	80070dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d00:	e00b      	b.n	8007d1a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7f9 fc04 	bl	8001510 <HAL_UART_RxCpltCallback>
}
 8007d08:	e007      	b.n	8007d1a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0208 	orr.w	r2, r2, #8
 8007d18:	619a      	str	r2, [r3, #24]
}
 8007d1a:	bf00      	nop
 8007d1c:	3758      	adds	r7, #88	; 0x58
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b096      	sub	sp, #88	; 0x58
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d38:	2b22      	cmp	r3, #34	; 0x22
 8007d3a:	f040 8094 	bne.w	8007e66 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d4e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d56:	4013      	ands	r3, r2
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d62:	1c9a      	adds	r2, r3, #2
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d177      	bne.n	8007e76 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da4:	643b      	str	r3, [r7, #64]	; 0x40
 8007da6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e6      	bne.n	8007d86 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f023 0301 	bic.w	r3, r3, #1
 8007dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e5      	bne.n	8007db8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d12e      	bne.n	8007e5e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f023 0310 	bic.w	r3, r3, #16
 8007e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6979      	ldr	r1, [r7, #20]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	613b      	str	r3, [r7, #16]
   return(result);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b10      	cmp	r3, #16
 8007e44:	d103      	bne.n	8007e4e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2210      	movs	r2, #16
 8007e4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff f940 	bl	80070dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e5c:	e00b      	b.n	8007e76 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7f9 fb56 	bl	8001510 <HAL_UART_RxCpltCallback>
}
 8007e64:	e007      	b.n	8007e76 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699a      	ldr	r2, [r3, #24]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0208 	orr.w	r2, r2, #8
 8007e74:	619a      	str	r2, [r3, #24]
}
 8007e76:	bf00      	nop
 8007e78:	3758      	adds	r7, #88	; 0x58
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <__errno>:
 8007e80:	4b01      	ldr	r3, [pc, #4]	; (8007e88 <__errno+0x8>)
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	20000024 	.word	0x20000024

08007e8c <__libc_init_array>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4d0d      	ldr	r5, [pc, #52]	; (8007ec4 <__libc_init_array+0x38>)
 8007e90:	4c0d      	ldr	r4, [pc, #52]	; (8007ec8 <__libc_init_array+0x3c>)
 8007e92:	1b64      	subs	r4, r4, r5
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	2600      	movs	r6, #0
 8007e98:	42a6      	cmp	r6, r4
 8007e9a:	d109      	bne.n	8007eb0 <__libc_init_array+0x24>
 8007e9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ecc <__libc_init_array+0x40>)
 8007e9e:	4c0c      	ldr	r4, [pc, #48]	; (8007ed0 <__libc_init_array+0x44>)
 8007ea0:	f000 fc82 	bl	80087a8 <_init>
 8007ea4:	1b64      	subs	r4, r4, r5
 8007ea6:	10a4      	asrs	r4, r4, #2
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	42a6      	cmp	r6, r4
 8007eac:	d105      	bne.n	8007eba <__libc_init_array+0x2e>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb4:	4798      	blx	r3
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7ee      	b.n	8007e98 <__libc_init_array+0xc>
 8007eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebe:	4798      	blx	r3
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	e7f2      	b.n	8007eaa <__libc_init_array+0x1e>
 8007ec4:	0800885c 	.word	0x0800885c
 8007ec8:	0800885c 	.word	0x0800885c
 8007ecc:	0800885c 	.word	0x0800885c
 8007ed0:	08008860 	.word	0x08008860

08007ed4 <memset>:
 8007ed4:	4402      	add	r2, r0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d100      	bne.n	8007ede <memset+0xa>
 8007edc:	4770      	bx	lr
 8007ede:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee2:	e7f9      	b.n	8007ed8 <memset+0x4>

08007ee4 <sniprintf>:
 8007ee4:	b40c      	push	{r2, r3}
 8007ee6:	b530      	push	{r4, r5, lr}
 8007ee8:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <sniprintf+0x64>)
 8007eea:	1e0c      	subs	r4, r1, #0
 8007eec:	681d      	ldr	r5, [r3, #0]
 8007eee:	b09d      	sub	sp, #116	; 0x74
 8007ef0:	da08      	bge.n	8007f04 <sniprintf+0x20>
 8007ef2:	238b      	movs	r3, #139	; 0x8b
 8007ef4:	602b      	str	r3, [r5, #0]
 8007ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8007efa:	b01d      	add	sp, #116	; 0x74
 8007efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f00:	b002      	add	sp, #8
 8007f02:	4770      	bx	lr
 8007f04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f0c:	bf14      	ite	ne
 8007f0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f12:	4623      	moveq	r3, r4
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	9307      	str	r3, [sp, #28]
 8007f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f1c:	9002      	str	r0, [sp, #8]
 8007f1e:	9006      	str	r0, [sp, #24]
 8007f20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f26:	ab21      	add	r3, sp, #132	; 0x84
 8007f28:	a902      	add	r1, sp, #8
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	f000 f889 	bl	8008044 <_svfiprintf_r>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	bfbc      	itt	lt
 8007f36:	238b      	movlt	r3, #139	; 0x8b
 8007f38:	602b      	strlt	r3, [r5, #0]
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	d0dd      	beq.n	8007efa <sniprintf+0x16>
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	e7d9      	b.n	8007efa <sniprintf+0x16>
 8007f46:	bf00      	nop
 8007f48:	20000024 	.word	0x20000024

08007f4c <siprintf>:
 8007f4c:	b40e      	push	{r1, r2, r3}
 8007f4e:	b500      	push	{lr}
 8007f50:	b09c      	sub	sp, #112	; 0x70
 8007f52:	ab1d      	add	r3, sp, #116	; 0x74
 8007f54:	9002      	str	r0, [sp, #8]
 8007f56:	9006      	str	r0, [sp, #24]
 8007f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f5c:	4809      	ldr	r0, [pc, #36]	; (8007f84 <siprintf+0x38>)
 8007f5e:	9107      	str	r1, [sp, #28]
 8007f60:	9104      	str	r1, [sp, #16]
 8007f62:	4909      	ldr	r1, [pc, #36]	; (8007f88 <siprintf+0x3c>)
 8007f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f68:	9105      	str	r1, [sp, #20]
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	a902      	add	r1, sp, #8
 8007f70:	f000 f868 	bl	8008044 <_svfiprintf_r>
 8007f74:	9b02      	ldr	r3, [sp, #8]
 8007f76:	2200      	movs	r2, #0
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	b01c      	add	sp, #112	; 0x70
 8007f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f80:	b003      	add	sp, #12
 8007f82:	4770      	bx	lr
 8007f84:	20000024 	.word	0x20000024
 8007f88:	ffff0208 	.word	0xffff0208

08007f8c <__ssputs_r>:
 8007f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f90:	688e      	ldr	r6, [r1, #8]
 8007f92:	429e      	cmp	r6, r3
 8007f94:	4682      	mov	sl, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	4690      	mov	r8, r2
 8007f9a:	461f      	mov	r7, r3
 8007f9c:	d838      	bhi.n	8008010 <__ssputs_r+0x84>
 8007f9e:	898a      	ldrh	r2, [r1, #12]
 8007fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fa4:	d032      	beq.n	800800c <__ssputs_r+0x80>
 8007fa6:	6825      	ldr	r5, [r4, #0]
 8007fa8:	6909      	ldr	r1, [r1, #16]
 8007faa:	eba5 0901 	sub.w	r9, r5, r1
 8007fae:	6965      	ldr	r5, [r4, #20]
 8007fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fb8:	3301      	adds	r3, #1
 8007fba:	444b      	add	r3, r9
 8007fbc:	106d      	asrs	r5, r5, #1
 8007fbe:	429d      	cmp	r5, r3
 8007fc0:	bf38      	it	cc
 8007fc2:	461d      	movcc	r5, r3
 8007fc4:	0553      	lsls	r3, r2, #21
 8007fc6:	d531      	bpl.n	800802c <__ssputs_r+0xa0>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	f000 fb47 	bl	800865c <_malloc_r>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	b950      	cbnz	r0, 8007fe8 <__ssputs_r+0x5c>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	f8ca 3000 	str.w	r3, [sl]
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe8:	6921      	ldr	r1, [r4, #16]
 8007fea:	464a      	mov	r2, r9
 8007fec:	f000 fabe 	bl	800856c <memcpy>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffa:	81a3      	strh	r3, [r4, #12]
 8007ffc:	6126      	str	r6, [r4, #16]
 8007ffe:	6165      	str	r5, [r4, #20]
 8008000:	444e      	add	r6, r9
 8008002:	eba5 0509 	sub.w	r5, r5, r9
 8008006:	6026      	str	r6, [r4, #0]
 8008008:	60a5      	str	r5, [r4, #8]
 800800a:	463e      	mov	r6, r7
 800800c:	42be      	cmp	r6, r7
 800800e:	d900      	bls.n	8008012 <__ssputs_r+0x86>
 8008010:	463e      	mov	r6, r7
 8008012:	4632      	mov	r2, r6
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	4641      	mov	r1, r8
 8008018:	f000 fab6 	bl	8008588 <memmove>
 800801c:	68a3      	ldr	r3, [r4, #8]
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	1b9b      	subs	r3, r3, r6
 8008022:	4432      	add	r2, r6
 8008024:	60a3      	str	r3, [r4, #8]
 8008026:	6022      	str	r2, [r4, #0]
 8008028:	2000      	movs	r0, #0
 800802a:	e7db      	b.n	8007fe4 <__ssputs_r+0x58>
 800802c:	462a      	mov	r2, r5
 800802e:	f000 fb6f 	bl	8008710 <_realloc_r>
 8008032:	4606      	mov	r6, r0
 8008034:	2800      	cmp	r0, #0
 8008036:	d1e1      	bne.n	8007ffc <__ssputs_r+0x70>
 8008038:	6921      	ldr	r1, [r4, #16]
 800803a:	4650      	mov	r0, sl
 800803c:	f000 fabe 	bl	80085bc <_free_r>
 8008040:	e7c7      	b.n	8007fd2 <__ssputs_r+0x46>
	...

08008044 <_svfiprintf_r>:
 8008044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	4698      	mov	r8, r3
 800804a:	898b      	ldrh	r3, [r1, #12]
 800804c:	061b      	lsls	r3, r3, #24
 800804e:	b09d      	sub	sp, #116	; 0x74
 8008050:	4607      	mov	r7, r0
 8008052:	460d      	mov	r5, r1
 8008054:	4614      	mov	r4, r2
 8008056:	d50e      	bpl.n	8008076 <_svfiprintf_r+0x32>
 8008058:	690b      	ldr	r3, [r1, #16]
 800805a:	b963      	cbnz	r3, 8008076 <_svfiprintf_r+0x32>
 800805c:	2140      	movs	r1, #64	; 0x40
 800805e:	f000 fafd 	bl	800865c <_malloc_r>
 8008062:	6028      	str	r0, [r5, #0]
 8008064:	6128      	str	r0, [r5, #16]
 8008066:	b920      	cbnz	r0, 8008072 <_svfiprintf_r+0x2e>
 8008068:	230c      	movs	r3, #12
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	e0d1      	b.n	8008216 <_svfiprintf_r+0x1d2>
 8008072:	2340      	movs	r3, #64	; 0x40
 8008074:	616b      	str	r3, [r5, #20]
 8008076:	2300      	movs	r3, #0
 8008078:	9309      	str	r3, [sp, #36]	; 0x24
 800807a:	2320      	movs	r3, #32
 800807c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008080:	f8cd 800c 	str.w	r8, [sp, #12]
 8008084:	2330      	movs	r3, #48	; 0x30
 8008086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008230 <_svfiprintf_r+0x1ec>
 800808a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800808e:	f04f 0901 	mov.w	r9, #1
 8008092:	4623      	mov	r3, r4
 8008094:	469a      	mov	sl, r3
 8008096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800809a:	b10a      	cbz	r2, 80080a0 <_svfiprintf_r+0x5c>
 800809c:	2a25      	cmp	r2, #37	; 0x25
 800809e:	d1f9      	bne.n	8008094 <_svfiprintf_r+0x50>
 80080a0:	ebba 0b04 	subs.w	fp, sl, r4
 80080a4:	d00b      	beq.n	80080be <_svfiprintf_r+0x7a>
 80080a6:	465b      	mov	r3, fp
 80080a8:	4622      	mov	r2, r4
 80080aa:	4629      	mov	r1, r5
 80080ac:	4638      	mov	r0, r7
 80080ae:	f7ff ff6d 	bl	8007f8c <__ssputs_r>
 80080b2:	3001      	adds	r0, #1
 80080b4:	f000 80aa 	beq.w	800820c <_svfiprintf_r+0x1c8>
 80080b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ba:	445a      	add	r2, fp
 80080bc:	9209      	str	r2, [sp, #36]	; 0x24
 80080be:	f89a 3000 	ldrb.w	r3, [sl]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 80a2 	beq.w	800820c <_svfiprintf_r+0x1c8>
 80080c8:	2300      	movs	r3, #0
 80080ca:	f04f 32ff 	mov.w	r2, #4294967295
 80080ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d2:	f10a 0a01 	add.w	sl, sl, #1
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	9307      	str	r3, [sp, #28]
 80080da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080de:	931a      	str	r3, [sp, #104]	; 0x68
 80080e0:	4654      	mov	r4, sl
 80080e2:	2205      	movs	r2, #5
 80080e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e8:	4851      	ldr	r0, [pc, #324]	; (8008230 <_svfiprintf_r+0x1ec>)
 80080ea:	f7f8 f891 	bl	8000210 <memchr>
 80080ee:	9a04      	ldr	r2, [sp, #16]
 80080f0:	b9d8      	cbnz	r0, 800812a <_svfiprintf_r+0xe6>
 80080f2:	06d0      	lsls	r0, r2, #27
 80080f4:	bf44      	itt	mi
 80080f6:	2320      	movmi	r3, #32
 80080f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080fc:	0711      	lsls	r1, r2, #28
 80080fe:	bf44      	itt	mi
 8008100:	232b      	movmi	r3, #43	; 0x2b
 8008102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008106:	f89a 3000 	ldrb.w	r3, [sl]
 800810a:	2b2a      	cmp	r3, #42	; 0x2a
 800810c:	d015      	beq.n	800813a <_svfiprintf_r+0xf6>
 800810e:	9a07      	ldr	r2, [sp, #28]
 8008110:	4654      	mov	r4, sl
 8008112:	2000      	movs	r0, #0
 8008114:	f04f 0c0a 	mov.w	ip, #10
 8008118:	4621      	mov	r1, r4
 800811a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811e:	3b30      	subs	r3, #48	; 0x30
 8008120:	2b09      	cmp	r3, #9
 8008122:	d94e      	bls.n	80081c2 <_svfiprintf_r+0x17e>
 8008124:	b1b0      	cbz	r0, 8008154 <_svfiprintf_r+0x110>
 8008126:	9207      	str	r2, [sp, #28]
 8008128:	e014      	b.n	8008154 <_svfiprintf_r+0x110>
 800812a:	eba0 0308 	sub.w	r3, r0, r8
 800812e:	fa09 f303 	lsl.w	r3, r9, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	46a2      	mov	sl, r4
 8008138:	e7d2      	b.n	80080e0 <_svfiprintf_r+0x9c>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	1d19      	adds	r1, r3, #4
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	9103      	str	r1, [sp, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	bfbb      	ittet	lt
 8008146:	425b      	neglt	r3, r3
 8008148:	f042 0202 	orrlt.w	r2, r2, #2
 800814c:	9307      	strge	r3, [sp, #28]
 800814e:	9307      	strlt	r3, [sp, #28]
 8008150:	bfb8      	it	lt
 8008152:	9204      	strlt	r2, [sp, #16]
 8008154:	7823      	ldrb	r3, [r4, #0]
 8008156:	2b2e      	cmp	r3, #46	; 0x2e
 8008158:	d10c      	bne.n	8008174 <_svfiprintf_r+0x130>
 800815a:	7863      	ldrb	r3, [r4, #1]
 800815c:	2b2a      	cmp	r3, #42	; 0x2a
 800815e:	d135      	bne.n	80081cc <_svfiprintf_r+0x188>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	1d1a      	adds	r2, r3, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	9203      	str	r2, [sp, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	bfb8      	it	lt
 800816c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008170:	3402      	adds	r4, #2
 8008172:	9305      	str	r3, [sp, #20]
 8008174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008240 <_svfiprintf_r+0x1fc>
 8008178:	7821      	ldrb	r1, [r4, #0]
 800817a:	2203      	movs	r2, #3
 800817c:	4650      	mov	r0, sl
 800817e:	f7f8 f847 	bl	8000210 <memchr>
 8008182:	b140      	cbz	r0, 8008196 <_svfiprintf_r+0x152>
 8008184:	2340      	movs	r3, #64	; 0x40
 8008186:	eba0 000a 	sub.w	r0, r0, sl
 800818a:	fa03 f000 	lsl.w	r0, r3, r0
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	4303      	orrs	r3, r0
 8008192:	3401      	adds	r4, #1
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	4826      	ldr	r0, [pc, #152]	; (8008234 <_svfiprintf_r+0x1f0>)
 800819c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081a0:	2206      	movs	r2, #6
 80081a2:	f7f8 f835 	bl	8000210 <memchr>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d038      	beq.n	800821c <_svfiprintf_r+0x1d8>
 80081aa:	4b23      	ldr	r3, [pc, #140]	; (8008238 <_svfiprintf_r+0x1f4>)
 80081ac:	bb1b      	cbnz	r3, 80081f6 <_svfiprintf_r+0x1b2>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	3307      	adds	r3, #7
 80081b2:	f023 0307 	bic.w	r3, r3, #7
 80081b6:	3308      	adds	r3, #8
 80081b8:	9303      	str	r3, [sp, #12]
 80081ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081bc:	4433      	add	r3, r6
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	e767      	b.n	8008092 <_svfiprintf_r+0x4e>
 80081c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c6:	460c      	mov	r4, r1
 80081c8:	2001      	movs	r0, #1
 80081ca:	e7a5      	b.n	8008118 <_svfiprintf_r+0xd4>
 80081cc:	2300      	movs	r3, #0
 80081ce:	3401      	adds	r4, #1
 80081d0:	9305      	str	r3, [sp, #20]
 80081d2:	4619      	mov	r1, r3
 80081d4:	f04f 0c0a 	mov.w	ip, #10
 80081d8:	4620      	mov	r0, r4
 80081da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081de:	3a30      	subs	r2, #48	; 0x30
 80081e0:	2a09      	cmp	r2, #9
 80081e2:	d903      	bls.n	80081ec <_svfiprintf_r+0x1a8>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d0c5      	beq.n	8008174 <_svfiprintf_r+0x130>
 80081e8:	9105      	str	r1, [sp, #20]
 80081ea:	e7c3      	b.n	8008174 <_svfiprintf_r+0x130>
 80081ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80081f0:	4604      	mov	r4, r0
 80081f2:	2301      	movs	r3, #1
 80081f4:	e7f0      	b.n	80081d8 <_svfiprintf_r+0x194>
 80081f6:	ab03      	add	r3, sp, #12
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	462a      	mov	r2, r5
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <_svfiprintf_r+0x1f8>)
 80081fe:	a904      	add	r1, sp, #16
 8008200:	4638      	mov	r0, r7
 8008202:	f3af 8000 	nop.w
 8008206:	1c42      	adds	r2, r0, #1
 8008208:	4606      	mov	r6, r0
 800820a:	d1d6      	bne.n	80081ba <_svfiprintf_r+0x176>
 800820c:	89ab      	ldrh	r3, [r5, #12]
 800820e:	065b      	lsls	r3, r3, #25
 8008210:	f53f af2c 	bmi.w	800806c <_svfiprintf_r+0x28>
 8008214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008216:	b01d      	add	sp, #116	; 0x74
 8008218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821c:	ab03      	add	r3, sp, #12
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	462a      	mov	r2, r5
 8008222:	4b06      	ldr	r3, [pc, #24]	; (800823c <_svfiprintf_r+0x1f8>)
 8008224:	a904      	add	r1, sp, #16
 8008226:	4638      	mov	r0, r7
 8008228:	f000 f87a 	bl	8008320 <_printf_i>
 800822c:	e7eb      	b.n	8008206 <_svfiprintf_r+0x1c2>
 800822e:	bf00      	nop
 8008230:	08008820 	.word	0x08008820
 8008234:	0800882a 	.word	0x0800882a
 8008238:	00000000 	.word	0x00000000
 800823c:	08007f8d 	.word	0x08007f8d
 8008240:	08008826 	.word	0x08008826

08008244 <_printf_common>:
 8008244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	4616      	mov	r6, r2
 800824a:	4699      	mov	r9, r3
 800824c:	688a      	ldr	r2, [r1, #8]
 800824e:	690b      	ldr	r3, [r1, #16]
 8008250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008254:	4293      	cmp	r3, r2
 8008256:	bfb8      	it	lt
 8008258:	4613      	movlt	r3, r2
 800825a:	6033      	str	r3, [r6, #0]
 800825c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008260:	4607      	mov	r7, r0
 8008262:	460c      	mov	r4, r1
 8008264:	b10a      	cbz	r2, 800826a <_printf_common+0x26>
 8008266:	3301      	adds	r3, #1
 8008268:	6033      	str	r3, [r6, #0]
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	0699      	lsls	r1, r3, #26
 800826e:	bf42      	ittt	mi
 8008270:	6833      	ldrmi	r3, [r6, #0]
 8008272:	3302      	addmi	r3, #2
 8008274:	6033      	strmi	r3, [r6, #0]
 8008276:	6825      	ldr	r5, [r4, #0]
 8008278:	f015 0506 	ands.w	r5, r5, #6
 800827c:	d106      	bne.n	800828c <_printf_common+0x48>
 800827e:	f104 0a19 	add.w	sl, r4, #25
 8008282:	68e3      	ldr	r3, [r4, #12]
 8008284:	6832      	ldr	r2, [r6, #0]
 8008286:	1a9b      	subs	r3, r3, r2
 8008288:	42ab      	cmp	r3, r5
 800828a:	dc26      	bgt.n	80082da <_printf_common+0x96>
 800828c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008290:	1e13      	subs	r3, r2, #0
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	bf18      	it	ne
 8008296:	2301      	movne	r3, #1
 8008298:	0692      	lsls	r2, r2, #26
 800829a:	d42b      	bmi.n	80082f4 <_printf_common+0xb0>
 800829c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082a0:	4649      	mov	r1, r9
 80082a2:	4638      	mov	r0, r7
 80082a4:	47c0      	blx	r8
 80082a6:	3001      	adds	r0, #1
 80082a8:	d01e      	beq.n	80082e8 <_printf_common+0xa4>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	68e5      	ldr	r5, [r4, #12]
 80082ae:	6832      	ldr	r2, [r6, #0]
 80082b0:	f003 0306 	and.w	r3, r3, #6
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	bf08      	it	eq
 80082b8:	1aad      	subeq	r5, r5, r2
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	6922      	ldr	r2, [r4, #16]
 80082be:	bf0c      	ite	eq
 80082c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082c4:	2500      	movne	r5, #0
 80082c6:	4293      	cmp	r3, r2
 80082c8:	bfc4      	itt	gt
 80082ca:	1a9b      	subgt	r3, r3, r2
 80082cc:	18ed      	addgt	r5, r5, r3
 80082ce:	2600      	movs	r6, #0
 80082d0:	341a      	adds	r4, #26
 80082d2:	42b5      	cmp	r5, r6
 80082d4:	d11a      	bne.n	800830c <_printf_common+0xc8>
 80082d6:	2000      	movs	r0, #0
 80082d8:	e008      	b.n	80082ec <_printf_common+0xa8>
 80082da:	2301      	movs	r3, #1
 80082dc:	4652      	mov	r2, sl
 80082de:	4649      	mov	r1, r9
 80082e0:	4638      	mov	r0, r7
 80082e2:	47c0      	blx	r8
 80082e4:	3001      	adds	r0, #1
 80082e6:	d103      	bne.n	80082f0 <_printf_common+0xac>
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f0:	3501      	adds	r5, #1
 80082f2:	e7c6      	b.n	8008282 <_printf_common+0x3e>
 80082f4:	18e1      	adds	r1, r4, r3
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	2030      	movs	r0, #48	; 0x30
 80082fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082fe:	4422      	add	r2, r4
 8008300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008308:	3302      	adds	r3, #2
 800830a:	e7c7      	b.n	800829c <_printf_common+0x58>
 800830c:	2301      	movs	r3, #1
 800830e:	4622      	mov	r2, r4
 8008310:	4649      	mov	r1, r9
 8008312:	4638      	mov	r0, r7
 8008314:	47c0      	blx	r8
 8008316:	3001      	adds	r0, #1
 8008318:	d0e6      	beq.n	80082e8 <_printf_common+0xa4>
 800831a:	3601      	adds	r6, #1
 800831c:	e7d9      	b.n	80082d2 <_printf_common+0x8e>
	...

08008320 <_printf_i>:
 8008320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	460c      	mov	r4, r1
 8008326:	4691      	mov	r9, r2
 8008328:	7e27      	ldrb	r7, [r4, #24]
 800832a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800832c:	2f78      	cmp	r7, #120	; 0x78
 800832e:	4680      	mov	r8, r0
 8008330:	469a      	mov	sl, r3
 8008332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008336:	d807      	bhi.n	8008348 <_printf_i+0x28>
 8008338:	2f62      	cmp	r7, #98	; 0x62
 800833a:	d80a      	bhi.n	8008352 <_printf_i+0x32>
 800833c:	2f00      	cmp	r7, #0
 800833e:	f000 80d8 	beq.w	80084f2 <_printf_i+0x1d2>
 8008342:	2f58      	cmp	r7, #88	; 0x58
 8008344:	f000 80a3 	beq.w	800848e <_printf_i+0x16e>
 8008348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800834c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008350:	e03a      	b.n	80083c8 <_printf_i+0xa8>
 8008352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008356:	2b15      	cmp	r3, #21
 8008358:	d8f6      	bhi.n	8008348 <_printf_i+0x28>
 800835a:	a001      	add	r0, pc, #4	; (adr r0, 8008360 <_printf_i+0x40>)
 800835c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008360:	080083b9 	.word	0x080083b9
 8008364:	080083cd 	.word	0x080083cd
 8008368:	08008349 	.word	0x08008349
 800836c:	08008349 	.word	0x08008349
 8008370:	08008349 	.word	0x08008349
 8008374:	08008349 	.word	0x08008349
 8008378:	080083cd 	.word	0x080083cd
 800837c:	08008349 	.word	0x08008349
 8008380:	08008349 	.word	0x08008349
 8008384:	08008349 	.word	0x08008349
 8008388:	08008349 	.word	0x08008349
 800838c:	080084d9 	.word	0x080084d9
 8008390:	080083fd 	.word	0x080083fd
 8008394:	080084bb 	.word	0x080084bb
 8008398:	08008349 	.word	0x08008349
 800839c:	08008349 	.word	0x08008349
 80083a0:	080084fb 	.word	0x080084fb
 80083a4:	08008349 	.word	0x08008349
 80083a8:	080083fd 	.word	0x080083fd
 80083ac:	08008349 	.word	0x08008349
 80083b0:	08008349 	.word	0x08008349
 80083b4:	080084c3 	.word	0x080084c3
 80083b8:	680b      	ldr	r3, [r1, #0]
 80083ba:	1d1a      	adds	r2, r3, #4
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	600a      	str	r2, [r1, #0]
 80083c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083c8:	2301      	movs	r3, #1
 80083ca:	e0a3      	b.n	8008514 <_printf_i+0x1f4>
 80083cc:	6825      	ldr	r5, [r4, #0]
 80083ce:	6808      	ldr	r0, [r1, #0]
 80083d0:	062e      	lsls	r6, r5, #24
 80083d2:	f100 0304 	add.w	r3, r0, #4
 80083d6:	d50a      	bpl.n	80083ee <_printf_i+0xce>
 80083d8:	6805      	ldr	r5, [r0, #0]
 80083da:	600b      	str	r3, [r1, #0]
 80083dc:	2d00      	cmp	r5, #0
 80083de:	da03      	bge.n	80083e8 <_printf_i+0xc8>
 80083e0:	232d      	movs	r3, #45	; 0x2d
 80083e2:	426d      	negs	r5, r5
 80083e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e8:	485e      	ldr	r0, [pc, #376]	; (8008564 <_printf_i+0x244>)
 80083ea:	230a      	movs	r3, #10
 80083ec:	e019      	b.n	8008422 <_printf_i+0x102>
 80083ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083f2:	6805      	ldr	r5, [r0, #0]
 80083f4:	600b      	str	r3, [r1, #0]
 80083f6:	bf18      	it	ne
 80083f8:	b22d      	sxthne	r5, r5
 80083fa:	e7ef      	b.n	80083dc <_printf_i+0xbc>
 80083fc:	680b      	ldr	r3, [r1, #0]
 80083fe:	6825      	ldr	r5, [r4, #0]
 8008400:	1d18      	adds	r0, r3, #4
 8008402:	6008      	str	r0, [r1, #0]
 8008404:	0628      	lsls	r0, r5, #24
 8008406:	d501      	bpl.n	800840c <_printf_i+0xec>
 8008408:	681d      	ldr	r5, [r3, #0]
 800840a:	e002      	b.n	8008412 <_printf_i+0xf2>
 800840c:	0669      	lsls	r1, r5, #25
 800840e:	d5fb      	bpl.n	8008408 <_printf_i+0xe8>
 8008410:	881d      	ldrh	r5, [r3, #0]
 8008412:	4854      	ldr	r0, [pc, #336]	; (8008564 <_printf_i+0x244>)
 8008414:	2f6f      	cmp	r7, #111	; 0x6f
 8008416:	bf0c      	ite	eq
 8008418:	2308      	moveq	r3, #8
 800841a:	230a      	movne	r3, #10
 800841c:	2100      	movs	r1, #0
 800841e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008422:	6866      	ldr	r6, [r4, #4]
 8008424:	60a6      	str	r6, [r4, #8]
 8008426:	2e00      	cmp	r6, #0
 8008428:	bfa2      	ittt	ge
 800842a:	6821      	ldrge	r1, [r4, #0]
 800842c:	f021 0104 	bicge.w	r1, r1, #4
 8008430:	6021      	strge	r1, [r4, #0]
 8008432:	b90d      	cbnz	r5, 8008438 <_printf_i+0x118>
 8008434:	2e00      	cmp	r6, #0
 8008436:	d04d      	beq.n	80084d4 <_printf_i+0x1b4>
 8008438:	4616      	mov	r6, r2
 800843a:	fbb5 f1f3 	udiv	r1, r5, r3
 800843e:	fb03 5711 	mls	r7, r3, r1, r5
 8008442:	5dc7      	ldrb	r7, [r0, r7]
 8008444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008448:	462f      	mov	r7, r5
 800844a:	42bb      	cmp	r3, r7
 800844c:	460d      	mov	r5, r1
 800844e:	d9f4      	bls.n	800843a <_printf_i+0x11a>
 8008450:	2b08      	cmp	r3, #8
 8008452:	d10b      	bne.n	800846c <_printf_i+0x14c>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	07df      	lsls	r7, r3, #31
 8008458:	d508      	bpl.n	800846c <_printf_i+0x14c>
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	6861      	ldr	r1, [r4, #4]
 800845e:	4299      	cmp	r1, r3
 8008460:	bfde      	ittt	le
 8008462:	2330      	movle	r3, #48	; 0x30
 8008464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008468:	f106 36ff 	addle.w	r6, r6, #4294967295
 800846c:	1b92      	subs	r2, r2, r6
 800846e:	6122      	str	r2, [r4, #16]
 8008470:	f8cd a000 	str.w	sl, [sp]
 8008474:	464b      	mov	r3, r9
 8008476:	aa03      	add	r2, sp, #12
 8008478:	4621      	mov	r1, r4
 800847a:	4640      	mov	r0, r8
 800847c:	f7ff fee2 	bl	8008244 <_printf_common>
 8008480:	3001      	adds	r0, #1
 8008482:	d14c      	bne.n	800851e <_printf_i+0x1fe>
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	b004      	add	sp, #16
 800848a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848e:	4835      	ldr	r0, [pc, #212]	; (8008564 <_printf_i+0x244>)
 8008490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	680e      	ldr	r6, [r1, #0]
 8008498:	061f      	lsls	r7, r3, #24
 800849a:	f856 5b04 	ldr.w	r5, [r6], #4
 800849e:	600e      	str	r6, [r1, #0]
 80084a0:	d514      	bpl.n	80084cc <_printf_i+0x1ac>
 80084a2:	07d9      	lsls	r1, r3, #31
 80084a4:	bf44      	itt	mi
 80084a6:	f043 0320 	orrmi.w	r3, r3, #32
 80084aa:	6023      	strmi	r3, [r4, #0]
 80084ac:	b91d      	cbnz	r5, 80084b6 <_printf_i+0x196>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f023 0320 	bic.w	r3, r3, #32
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	2310      	movs	r3, #16
 80084b8:	e7b0      	b.n	800841c <_printf_i+0xfc>
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	f043 0320 	orr.w	r3, r3, #32
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	2378      	movs	r3, #120	; 0x78
 80084c4:	4828      	ldr	r0, [pc, #160]	; (8008568 <_printf_i+0x248>)
 80084c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ca:	e7e3      	b.n	8008494 <_printf_i+0x174>
 80084cc:	065e      	lsls	r6, r3, #25
 80084ce:	bf48      	it	mi
 80084d0:	b2ad      	uxthmi	r5, r5
 80084d2:	e7e6      	b.n	80084a2 <_printf_i+0x182>
 80084d4:	4616      	mov	r6, r2
 80084d6:	e7bb      	b.n	8008450 <_printf_i+0x130>
 80084d8:	680b      	ldr	r3, [r1, #0]
 80084da:	6826      	ldr	r6, [r4, #0]
 80084dc:	6960      	ldr	r0, [r4, #20]
 80084de:	1d1d      	adds	r5, r3, #4
 80084e0:	600d      	str	r5, [r1, #0]
 80084e2:	0635      	lsls	r5, r6, #24
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	d501      	bpl.n	80084ec <_printf_i+0x1cc>
 80084e8:	6018      	str	r0, [r3, #0]
 80084ea:	e002      	b.n	80084f2 <_printf_i+0x1d2>
 80084ec:	0671      	lsls	r1, r6, #25
 80084ee:	d5fb      	bpl.n	80084e8 <_printf_i+0x1c8>
 80084f0:	8018      	strh	r0, [r3, #0]
 80084f2:	2300      	movs	r3, #0
 80084f4:	6123      	str	r3, [r4, #16]
 80084f6:	4616      	mov	r6, r2
 80084f8:	e7ba      	b.n	8008470 <_printf_i+0x150>
 80084fa:	680b      	ldr	r3, [r1, #0]
 80084fc:	1d1a      	adds	r2, r3, #4
 80084fe:	600a      	str	r2, [r1, #0]
 8008500:	681e      	ldr	r6, [r3, #0]
 8008502:	6862      	ldr	r2, [r4, #4]
 8008504:	2100      	movs	r1, #0
 8008506:	4630      	mov	r0, r6
 8008508:	f7f7 fe82 	bl	8000210 <memchr>
 800850c:	b108      	cbz	r0, 8008512 <_printf_i+0x1f2>
 800850e:	1b80      	subs	r0, r0, r6
 8008510:	6060      	str	r0, [r4, #4]
 8008512:	6863      	ldr	r3, [r4, #4]
 8008514:	6123      	str	r3, [r4, #16]
 8008516:	2300      	movs	r3, #0
 8008518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800851c:	e7a8      	b.n	8008470 <_printf_i+0x150>
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	4632      	mov	r2, r6
 8008522:	4649      	mov	r1, r9
 8008524:	4640      	mov	r0, r8
 8008526:	47d0      	blx	sl
 8008528:	3001      	adds	r0, #1
 800852a:	d0ab      	beq.n	8008484 <_printf_i+0x164>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	079b      	lsls	r3, r3, #30
 8008530:	d413      	bmi.n	800855a <_printf_i+0x23a>
 8008532:	68e0      	ldr	r0, [r4, #12]
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	4298      	cmp	r0, r3
 8008538:	bfb8      	it	lt
 800853a:	4618      	movlt	r0, r3
 800853c:	e7a4      	b.n	8008488 <_printf_i+0x168>
 800853e:	2301      	movs	r3, #1
 8008540:	4632      	mov	r2, r6
 8008542:	4649      	mov	r1, r9
 8008544:	4640      	mov	r0, r8
 8008546:	47d0      	blx	sl
 8008548:	3001      	adds	r0, #1
 800854a:	d09b      	beq.n	8008484 <_printf_i+0x164>
 800854c:	3501      	adds	r5, #1
 800854e:	68e3      	ldr	r3, [r4, #12]
 8008550:	9903      	ldr	r1, [sp, #12]
 8008552:	1a5b      	subs	r3, r3, r1
 8008554:	42ab      	cmp	r3, r5
 8008556:	dcf2      	bgt.n	800853e <_printf_i+0x21e>
 8008558:	e7eb      	b.n	8008532 <_printf_i+0x212>
 800855a:	2500      	movs	r5, #0
 800855c:	f104 0619 	add.w	r6, r4, #25
 8008560:	e7f5      	b.n	800854e <_printf_i+0x22e>
 8008562:	bf00      	nop
 8008564:	08008831 	.word	0x08008831
 8008568:	08008842 	.word	0x08008842

0800856c <memcpy>:
 800856c:	440a      	add	r2, r1
 800856e:	4291      	cmp	r1, r2
 8008570:	f100 33ff 	add.w	r3, r0, #4294967295
 8008574:	d100      	bne.n	8008578 <memcpy+0xc>
 8008576:	4770      	bx	lr
 8008578:	b510      	push	{r4, lr}
 800857a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008582:	4291      	cmp	r1, r2
 8008584:	d1f9      	bne.n	800857a <memcpy+0xe>
 8008586:	bd10      	pop	{r4, pc}

08008588 <memmove>:
 8008588:	4288      	cmp	r0, r1
 800858a:	b510      	push	{r4, lr}
 800858c:	eb01 0402 	add.w	r4, r1, r2
 8008590:	d902      	bls.n	8008598 <memmove+0x10>
 8008592:	4284      	cmp	r4, r0
 8008594:	4623      	mov	r3, r4
 8008596:	d807      	bhi.n	80085a8 <memmove+0x20>
 8008598:	1e43      	subs	r3, r0, #1
 800859a:	42a1      	cmp	r1, r4
 800859c:	d008      	beq.n	80085b0 <memmove+0x28>
 800859e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085a6:	e7f8      	b.n	800859a <memmove+0x12>
 80085a8:	4402      	add	r2, r0
 80085aa:	4601      	mov	r1, r0
 80085ac:	428a      	cmp	r2, r1
 80085ae:	d100      	bne.n	80085b2 <memmove+0x2a>
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ba:	e7f7      	b.n	80085ac <memmove+0x24>

080085bc <_free_r>:
 80085bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085be:	2900      	cmp	r1, #0
 80085c0:	d048      	beq.n	8008654 <_free_r+0x98>
 80085c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085c6:	9001      	str	r0, [sp, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f1a1 0404 	sub.w	r4, r1, #4
 80085ce:	bfb8      	it	lt
 80085d0:	18e4      	addlt	r4, r4, r3
 80085d2:	f000 f8d3 	bl	800877c <__malloc_lock>
 80085d6:	4a20      	ldr	r2, [pc, #128]	; (8008658 <_free_r+0x9c>)
 80085d8:	9801      	ldr	r0, [sp, #4]
 80085da:	6813      	ldr	r3, [r2, #0]
 80085dc:	4615      	mov	r5, r2
 80085de:	b933      	cbnz	r3, 80085ee <_free_r+0x32>
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	6014      	str	r4, [r2, #0]
 80085e4:	b003      	add	sp, #12
 80085e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085ea:	f000 b8cd 	b.w	8008788 <__malloc_unlock>
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	d90b      	bls.n	800860a <_free_r+0x4e>
 80085f2:	6821      	ldr	r1, [r4, #0]
 80085f4:	1862      	adds	r2, r4, r1
 80085f6:	4293      	cmp	r3, r2
 80085f8:	bf04      	itt	eq
 80085fa:	681a      	ldreq	r2, [r3, #0]
 80085fc:	685b      	ldreq	r3, [r3, #4]
 80085fe:	6063      	str	r3, [r4, #4]
 8008600:	bf04      	itt	eq
 8008602:	1852      	addeq	r2, r2, r1
 8008604:	6022      	streq	r2, [r4, #0]
 8008606:	602c      	str	r4, [r5, #0]
 8008608:	e7ec      	b.n	80085e4 <_free_r+0x28>
 800860a:	461a      	mov	r2, r3
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	b10b      	cbz	r3, 8008614 <_free_r+0x58>
 8008610:	42a3      	cmp	r3, r4
 8008612:	d9fa      	bls.n	800860a <_free_r+0x4e>
 8008614:	6811      	ldr	r1, [r2, #0]
 8008616:	1855      	adds	r5, r2, r1
 8008618:	42a5      	cmp	r5, r4
 800861a:	d10b      	bne.n	8008634 <_free_r+0x78>
 800861c:	6824      	ldr	r4, [r4, #0]
 800861e:	4421      	add	r1, r4
 8008620:	1854      	adds	r4, r2, r1
 8008622:	42a3      	cmp	r3, r4
 8008624:	6011      	str	r1, [r2, #0]
 8008626:	d1dd      	bne.n	80085e4 <_free_r+0x28>
 8008628:	681c      	ldr	r4, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	6053      	str	r3, [r2, #4]
 800862e:	4421      	add	r1, r4
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	e7d7      	b.n	80085e4 <_free_r+0x28>
 8008634:	d902      	bls.n	800863c <_free_r+0x80>
 8008636:	230c      	movs	r3, #12
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	e7d3      	b.n	80085e4 <_free_r+0x28>
 800863c:	6825      	ldr	r5, [r4, #0]
 800863e:	1961      	adds	r1, r4, r5
 8008640:	428b      	cmp	r3, r1
 8008642:	bf04      	itt	eq
 8008644:	6819      	ldreq	r1, [r3, #0]
 8008646:	685b      	ldreq	r3, [r3, #4]
 8008648:	6063      	str	r3, [r4, #4]
 800864a:	bf04      	itt	eq
 800864c:	1949      	addeq	r1, r1, r5
 800864e:	6021      	streq	r1, [r4, #0]
 8008650:	6054      	str	r4, [r2, #4]
 8008652:	e7c7      	b.n	80085e4 <_free_r+0x28>
 8008654:	b003      	add	sp, #12
 8008656:	bd30      	pop	{r4, r5, pc}
 8008658:	200000b8 	.word	0x200000b8

0800865c <_malloc_r>:
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	1ccd      	adds	r5, r1, #3
 8008660:	f025 0503 	bic.w	r5, r5, #3
 8008664:	3508      	adds	r5, #8
 8008666:	2d0c      	cmp	r5, #12
 8008668:	bf38      	it	cc
 800866a:	250c      	movcc	r5, #12
 800866c:	2d00      	cmp	r5, #0
 800866e:	4606      	mov	r6, r0
 8008670:	db01      	blt.n	8008676 <_malloc_r+0x1a>
 8008672:	42a9      	cmp	r1, r5
 8008674:	d903      	bls.n	800867e <_malloc_r+0x22>
 8008676:	230c      	movs	r3, #12
 8008678:	6033      	str	r3, [r6, #0]
 800867a:	2000      	movs	r0, #0
 800867c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867e:	f000 f87d 	bl	800877c <__malloc_lock>
 8008682:	4921      	ldr	r1, [pc, #132]	; (8008708 <_malloc_r+0xac>)
 8008684:	680a      	ldr	r2, [r1, #0]
 8008686:	4614      	mov	r4, r2
 8008688:	b99c      	cbnz	r4, 80086b2 <_malloc_r+0x56>
 800868a:	4f20      	ldr	r7, [pc, #128]	; (800870c <_malloc_r+0xb0>)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	b923      	cbnz	r3, 800869a <_malloc_r+0x3e>
 8008690:	4621      	mov	r1, r4
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f862 	bl	800875c <_sbrk_r>
 8008698:	6038      	str	r0, [r7, #0]
 800869a:	4629      	mov	r1, r5
 800869c:	4630      	mov	r0, r6
 800869e:	f000 f85d 	bl	800875c <_sbrk_r>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d123      	bne.n	80086ee <_malloc_r+0x92>
 80086a6:	230c      	movs	r3, #12
 80086a8:	6033      	str	r3, [r6, #0]
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 f86c 	bl	8008788 <__malloc_unlock>
 80086b0:	e7e3      	b.n	800867a <_malloc_r+0x1e>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	1b5b      	subs	r3, r3, r5
 80086b6:	d417      	bmi.n	80086e8 <_malloc_r+0x8c>
 80086b8:	2b0b      	cmp	r3, #11
 80086ba:	d903      	bls.n	80086c4 <_malloc_r+0x68>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	441c      	add	r4, r3
 80086c0:	6025      	str	r5, [r4, #0]
 80086c2:	e004      	b.n	80086ce <_malloc_r+0x72>
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	42a2      	cmp	r2, r4
 80086c8:	bf0c      	ite	eq
 80086ca:	600b      	streq	r3, [r1, #0]
 80086cc:	6053      	strne	r3, [r2, #4]
 80086ce:	4630      	mov	r0, r6
 80086d0:	f000 f85a 	bl	8008788 <__malloc_unlock>
 80086d4:	f104 000b 	add.w	r0, r4, #11
 80086d8:	1d23      	adds	r3, r4, #4
 80086da:	f020 0007 	bic.w	r0, r0, #7
 80086de:	1ac2      	subs	r2, r0, r3
 80086e0:	d0cc      	beq.n	800867c <_malloc_r+0x20>
 80086e2:	1a1b      	subs	r3, r3, r0
 80086e4:	50a3      	str	r3, [r4, r2]
 80086e6:	e7c9      	b.n	800867c <_malloc_r+0x20>
 80086e8:	4622      	mov	r2, r4
 80086ea:	6864      	ldr	r4, [r4, #4]
 80086ec:	e7cc      	b.n	8008688 <_malloc_r+0x2c>
 80086ee:	1cc4      	adds	r4, r0, #3
 80086f0:	f024 0403 	bic.w	r4, r4, #3
 80086f4:	42a0      	cmp	r0, r4
 80086f6:	d0e3      	beq.n	80086c0 <_malloc_r+0x64>
 80086f8:	1a21      	subs	r1, r4, r0
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f82e 	bl	800875c <_sbrk_r>
 8008700:	3001      	adds	r0, #1
 8008702:	d1dd      	bne.n	80086c0 <_malloc_r+0x64>
 8008704:	e7cf      	b.n	80086a6 <_malloc_r+0x4a>
 8008706:	bf00      	nop
 8008708:	200000b8 	.word	0x200000b8
 800870c:	200000bc 	.word	0x200000bc

08008710 <_realloc_r>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	4607      	mov	r7, r0
 8008714:	4614      	mov	r4, r2
 8008716:	460e      	mov	r6, r1
 8008718:	b921      	cbnz	r1, 8008724 <_realloc_r+0x14>
 800871a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800871e:	4611      	mov	r1, r2
 8008720:	f7ff bf9c 	b.w	800865c <_malloc_r>
 8008724:	b922      	cbnz	r2, 8008730 <_realloc_r+0x20>
 8008726:	f7ff ff49 	bl	80085bc <_free_r>
 800872a:	4625      	mov	r5, r4
 800872c:	4628      	mov	r0, r5
 800872e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008730:	f000 f830 	bl	8008794 <_malloc_usable_size_r>
 8008734:	42a0      	cmp	r0, r4
 8008736:	d20f      	bcs.n	8008758 <_realloc_r+0x48>
 8008738:	4621      	mov	r1, r4
 800873a:	4638      	mov	r0, r7
 800873c:	f7ff ff8e 	bl	800865c <_malloc_r>
 8008740:	4605      	mov	r5, r0
 8008742:	2800      	cmp	r0, #0
 8008744:	d0f2      	beq.n	800872c <_realloc_r+0x1c>
 8008746:	4631      	mov	r1, r6
 8008748:	4622      	mov	r2, r4
 800874a:	f7ff ff0f 	bl	800856c <memcpy>
 800874e:	4631      	mov	r1, r6
 8008750:	4638      	mov	r0, r7
 8008752:	f7ff ff33 	bl	80085bc <_free_r>
 8008756:	e7e9      	b.n	800872c <_realloc_r+0x1c>
 8008758:	4635      	mov	r5, r6
 800875a:	e7e7      	b.n	800872c <_realloc_r+0x1c>

0800875c <_sbrk_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4d06      	ldr	r5, [pc, #24]	; (8008778 <_sbrk_r+0x1c>)
 8008760:	2300      	movs	r3, #0
 8008762:	4604      	mov	r4, r0
 8008764:	4608      	mov	r0, r1
 8008766:	602b      	str	r3, [r5, #0]
 8008768:	f7f9 fa28 	bl	8001bbc <_sbrk>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d102      	bne.n	8008776 <_sbrk_r+0x1a>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	b103      	cbz	r3, 8008776 <_sbrk_r+0x1a>
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	200003f0 	.word	0x200003f0

0800877c <__malloc_lock>:
 800877c:	4801      	ldr	r0, [pc, #4]	; (8008784 <__malloc_lock+0x8>)
 800877e:	f000 b811 	b.w	80087a4 <__retarget_lock_acquire_recursive>
 8008782:	bf00      	nop
 8008784:	200003f8 	.word	0x200003f8

08008788 <__malloc_unlock>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__malloc_unlock+0x8>)
 800878a:	f000 b80c 	b.w	80087a6 <__retarget_lock_release_recursive>
 800878e:	bf00      	nop
 8008790:	200003f8 	.word	0x200003f8

08008794 <_malloc_usable_size_r>:
 8008794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008798:	1f18      	subs	r0, r3, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	bfbc      	itt	lt
 800879e:	580b      	ldrlt	r3, [r1, r0]
 80087a0:	18c0      	addlt	r0, r0, r3
 80087a2:	4770      	bx	lr

080087a4 <__retarget_lock_acquire_recursive>:
 80087a4:	4770      	bx	lr

080087a6 <__retarget_lock_release_recursive>:
 80087a6:	4770      	bx	lr

080087a8 <_init>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr

080087b4 <_fini>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr
