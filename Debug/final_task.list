
final_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f00  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e0  080060e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060e8  080060e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080060f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000000c  080060fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080060fc  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001919f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003003  00000000  00000000  000391db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270a8  00000000  00000000  0003e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fbd  00000000  00000000  00065740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2ef6  00000000  00000000  0007e6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001715f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee0  00000000  00000000  00171648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080060b0 	.word	0x080060b0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080060b0 	.word	0x080060b0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_ADC1_Init+0x98>)
 8000514:	4a21      	ldr	r2, [pc, #132]	; (800059c <MX_ADC1_Init+0x9c>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_ADC1_Init+0x98>)
 800051a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <MX_ADC1_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_ADC1_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_ADC1_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_ADC1_Init+0x98>)
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_ADC1_Init+0xa0>)
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_ADC1_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_ADC1_Init+0x98>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_ADC1_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_ADC1_Init+0x98>)
 800055c:	2201      	movs	r2, #1
 800055e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <MX_ADC1_Init+0x98>)
 8000562:	f000 fe5b 	bl	800121c <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800056c:	f000 faa2 	bl	8000ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000570:	2303      	movs	r3, #3
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000578:	2301      	movs	r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_ADC1_Init+0x98>)
 8000582:	f000 ffbd 	bl	8001500 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800058c:	f000 fa92 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028
 800059c:	40012000 	.word	0x40012000
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <HAL_ADC_MspInit+0x84>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d12b      	bne.n	800061e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <HAL_ADC_MspInit+0x88>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <HAL_ADC_MspInit+0x88>)
 80005cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d0:	6453      	str	r3, [r2, #68]	; 0x44
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_ADC_MspInit+0x88>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_ADC_MspInit+0x88>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <HAL_ADC_MspInit+0x88>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_ADC_MspInit+0x88>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005f6:	2308      	movs	r3, #8
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fa:	2303      	movs	r3, #3
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <HAL_ADC_MspInit+0x8c>)
 800060a:	f001 fb85 	bl	8001d18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2012      	movs	r0, #18
 8000614:	f001 faa9 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000618:	2012      	movs	r0, #18
 800061a:	f001 fac2 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012000 	.word	0x40012000
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b7b      	ldr	r3, [pc, #492]	; (8000838 <MX_GPIO_Init+0x204>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a7a      	ldr	r2, [pc, #488]	; (8000838 <MX_GPIO_Init+0x204>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b78      	ldr	r3, [pc, #480]	; (8000838 <MX_GPIO_Init+0x204>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	4b75      	ldr	r3, [pc, #468]	; (8000838 <MX_GPIO_Init+0x204>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a74      	ldr	r2, [pc, #464]	; (8000838 <MX_GPIO_Init+0x204>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <MX_GPIO_Init+0x204>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x204>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x204>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x204>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <MX_GPIO_Init+0x204>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a68      	ldr	r2, [pc, #416]	; (8000838 <MX_GPIO_Init+0x204>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <MX_GPIO_Init+0x204>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <MX_GPIO_Init+0x204>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a62      	ldr	r2, [pc, #392]	; (8000838 <MX_GPIO_Init+0x204>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <MX_GPIO_Init+0x204>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c2:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <MX_GPIO_Init+0x204>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a5c      	ldr	r2, [pc, #368]	; (8000838 <MX_GPIO_Init+0x204>)
 80006c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <MX_GPIO_Init+0x204>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e0:	4856      	ldr	r0, [pc, #344]	; (800083c <MX_GPIO_Init+0x208>)
 80006e2:	f001 fcc5 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	4855      	ldr	r0, [pc, #340]	; (8000840 <MX_GPIO_Init+0x20c>)
 80006ec:	f001 fcc0 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	484f      	ldr	r0, [pc, #316]	; (8000844 <MX_GPIO_Init+0x210>)
 8000708:	f001 fb06 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800070c:	2332      	movs	r3, #50	; 0x32
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071c:	230b      	movs	r3, #11
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4847      	ldr	r0, [pc, #284]	; (8000844 <MX_GPIO_Init+0x210>)
 8000728:	f001 faf6 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800072c:	2386      	movs	r3, #134	; 0x86
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800073c:	230b      	movs	r3, #11
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4840      	ldr	r0, [pc, #256]	; (8000848 <MX_GPIO_Init+0x214>)
 8000748:	f001 fae6 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800074c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4835      	ldr	r0, [pc, #212]	; (800083c <MX_GPIO_Init+0x208>)
 8000766:	f001 fad7 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077c:	230b      	movs	r3, #11
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	482d      	ldr	r0, [pc, #180]	; (800083c <MX_GPIO_Init+0x208>)
 8000788:	f001 fac6 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800078c:	2340      	movs	r3, #64	; 0x40
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4827      	ldr	r0, [pc, #156]	; (8000840 <MX_GPIO_Init+0x20c>)
 80007a4:	f001 fab8 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4821      	ldr	r0, [pc, #132]	; (8000840 <MX_GPIO_Init+0x20c>)
 80007bc:	f001 faac 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007c0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007d2:	230a      	movs	r3, #10
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	481a      	ldr	r0, [pc, #104]	; (8000848 <MX_GPIO_Init+0x214>)
 80007de:	f001 fa9b 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_GPIO_Init+0x214>)
 80007f8:	f001 fa8e 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080e:	230b      	movs	r3, #11
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_GPIO_Init+0x20c>)
 800081a:	f001 fa7d 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2028      	movs	r0, #40	; 0x28
 8000824:	f001 f9a1 	bl	8001b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000828:	2028      	movs	r0, #40	; 0x28
 800082a:	f001 f9ba 	bl	8001ba2 <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400
 8000840:	40021800 	.word	0x40021800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020000 	.word	0x40020000

0800084c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	f001 fc30 	bl	80020ec <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f90f 	bl	8000ab4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C1_Init+0x74>)
 800089a:	f002 fa4e 	bl	8002d3a <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f906 	bl	8000ab4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C1_Init+0x74>)
 80008ac:	f002 fa90 	bl	8002dd0 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f8fd 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000070 	.word	0x20000070
 80008c4:	40005400 	.word	0x40005400
 80008c8:	20404768 	.word	0x20404768

080008cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0aa      	sub	sp, #168	; 0xa8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2284      	movs	r2, #132	; 0x84
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f005 fbd7 	bl	80060a0 <memset>
  if(i2cHandle->Instance==I2C1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a2a      	ldr	r2, [pc, #168]	; (80009a0 <HAL_I2C_MspInit+0xd4>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d14c      	bne.n	8000996 <HAL_I2C_MspInit+0xca>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000900:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000902:	2300      	movs	r3, #0
 8000904:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4618      	mov	r0, r3
 800090c:	f002 ffb2 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000916:	f000 f8cd 	bl	8000ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <HAL_I2C_MspInit+0xd8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <HAL_I2C_MspInit+0xd8>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_I2C_MspInit+0xd8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000956:	4619      	mov	r1, r3
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <HAL_I2C_MspInit+0xdc>)
 800095a:	f001 f9dd 	bl	8001d18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_I2C_MspInit+0xd8>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_I2C_MspInit+0xd8>)
 8000964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_I2C_MspInit+0xd8>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	201f      	movs	r0, #31
 800097c:	f001 f8f5 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000980:	201f      	movs	r0, #31
 8000982:	f001 f90e 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2020      	movs	r0, #32
 800098c:	f001 f8ed 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000990:	2020      	movs	r0, #32
 8000992:	f001 f906 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	37a8      	adds	r7, #168	; 0xa8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40005400 	.word	0x40005400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fbd7 	bl	8001162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f810 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80009b8:	f000 f94e 	bl	8000c58 <MX_TIM2_Init>
  MX_I2C1_Init();
 80009bc:	f7ff ff46 	bl	800084c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80009c0:	f000 fb0e 	bl	8000fe0 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80009c4:	f000 fa0e 	bl	8000de4 <MX_TIM8_Init>
  MX_GPIO_Init();
 80009c8:	f7ff fe34 	bl	8000634 <MX_GPIO_Init>
  MX_TIM3_Init();
 80009cc:	f000 f9bc 	bl	8000d48 <MX_TIM3_Init>
  MX_ADC1_Init();
 80009d0:	f7ff fd96 	bl	8000500 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <main+0x28>
	...

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2230      	movs	r2, #48	; 0x30
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 fb5a 	bl	80060a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009fc:	f002 fa34 	bl	8002e68 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <SystemClock_Config+0xd4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a29      	ldr	r2, [pc, #164]	; (8000aac <SystemClock_Config+0xd4>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <SystemClock_Config+0xd4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <SystemClock_Config+0xd8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a48:	23d8      	movs	r3, #216	; 0xd8
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a50:	2303      	movs	r3, #3
 8000a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fa65 	bl	8002f28 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a64:	f000 f826 	bl	8000ab4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a68:	f002 fa0e 	bl	8002e88 <HAL_PWREx_EnableOverDrive>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a72:	f000 f81f 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2107      	movs	r1, #7
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 fceb 	bl	8003470 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000aa0:	f000 f808 	bl	8000ab4 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3750      	adds	r7, #80	; 0x50
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 fb42 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <ADC_IRQHandler+0x10>)
 8000b62:	f000 fb9f 	bl	80012a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000028 	.word	0x20000028

08000b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM2_IRQHandler+0x10>)
 8000b76:	f003 fb25 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000154 	.word	0x20000154

08000b84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM3_IRQHandler+0x10>)
 8000b8a:	f003 fb1b 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000108 	.word	0x20000108

08000b98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <I2C1_EV_IRQHandler+0x10>)
 8000b9e:	f001 fb35 	bl	800220c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000070 	.word	0x20000070

08000bac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <I2C1_ER_IRQHandler+0x10>)
 8000bb2:	f001 fb45 	bl	8002240 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000070 	.word	0x20000070

08000bc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <USART3_IRQHandler+0x10>)
 8000bc6:	f004 fabf 	bl	8005148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200001a0 	.word	0x200001a0

08000bd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000bd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bdc:	f001 fa62 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000bea:	f003 faeb 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000bc 	.word	0x200000bc

08000bf8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000bfe:	f003 fae1 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000bc 	.word	0x200000bc

08000c0c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c12:	f003 fad7 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000bc 	.word	0x200000bc

08000c20 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM8_CC_IRQHandler+0x10>)
 8000c26:	f003 facd 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000bc 	.word	0x200000bc

08000c34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000c8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000c94:	226b      	movs	r2, #107	; 0x6b
 8000c96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 -1;
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb2:	4824      	ldr	r0, [pc, #144]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000cb4:	f003 f9ce 	bl	8004054 <HAL_TIM_Base_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f7ff fef9 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481d      	ldr	r0, [pc, #116]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000cd0:	f003 fcac 	bl	800462c <HAL_TIM_ConfigClockSource>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000cda:	f7ff feeb 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000ce0:	f003 fa0f 	bl	8004102 <HAL_TIM_PWM_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000cea:	f7ff fee3 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4811      	ldr	r0, [pc, #68]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000cfe:	f004 f929 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d08:	f7ff fed4 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0c:	2360      	movs	r3, #96	; 0x60
 8000d0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000d26:	f003 fb6d 	bl	8004404 <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d30:	f7ff fec0 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM2_Init+0xec>)
 8000d36:	f000 f91d 	bl	8000f74 <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	; 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000154 	.word	0x20000154

08000d48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <MX_TIM3_Init+0x98>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000d6e:	226b      	movs	r2, #107	; 0x6b
 8000d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000d8e:	f003 f961 	bl	8004054 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d98:	f7ff fe8c 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000daa:	f003 fc3f 	bl	800462c <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000db4:	f7ff fe7e 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_TIM3_Init+0x94>)
 8000dc6:	f004 f8c5 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f7ff fe70 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000108 	.word	0x20000108
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e04:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <MX_TIM8_Init+0xa4>)
 8000e06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600 - 1;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e0a:	f245 425f 	movw	r2, #21599	; 0x545f
 8000e0e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e18:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e1c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e30:	4814      	ldr	r0, [pc, #80]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e32:	f003 f90f 	bl	8004054 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f7ff fe3a 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e4e:	f003 fbed 	bl	800462c <HAL_TIM_ConfigClockSource>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000e58:	f7ff fe2c 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_TIM8_Init+0xa0>)
 8000e6e:	f004 f871 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e78:	f7ff fe1c 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200000bc 	.word	0x200000bc
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d114      	bne.n	8000ec8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	201c      	movs	r0, #28
 8000ebc:	f000 fe55 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec0:	201c      	movs	r0, #28
 8000ec2:	f000 fe6e 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000ec6:	e04a      	b.n	8000f5e <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM3)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <HAL_TIM_Base_MspInit+0xe0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d114      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	201d      	movs	r0, #29
 8000ef0:	f000 fe3b 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ef4:	201d      	movs	r0, #29
 8000ef6:	f000 fe54 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
}
 8000efa:	e030      	b.n	8000f5e <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM8)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <HAL_TIM_Base_MspInit+0xe4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12b      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_TIM_Base_MspInit+0xdc>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	202b      	movs	r0, #43	; 0x2b
 8000f24:	f000 fe21 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000f28:	202b      	movs	r0, #43	; 0x2b
 8000f2a:	f000 fe3a 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	202c      	movs	r0, #44	; 0x2c
 8000f34:	f000 fe19 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000f38:	202c      	movs	r0, #44	; 0x2c
 8000f3a:	f000 fe32 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	202d      	movs	r0, #45	; 0x2d
 8000f44:	f000 fe11 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f48:	202d      	movs	r0, #45	; 0x2d
 8000f4a:	f000 fe2a 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	202e      	movs	r0, #46	; 0x2e
 8000f54:	f000 fe09 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8000f58:	202e      	movs	r0, #46	; 0x2e
 8000f5a:	f000 fe22 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	40010400 	.word	0x40010400

08000f74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f94:	d11b      	bne.n	8000fce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_TIM_MspPostInit+0x64>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_TIM_MspPostInit+0x64>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_TIM_MspPostInit+0x64>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <HAL_TIM_MspPostInit+0x68>)
 8000fca:	f000 fea5 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <MX_USART3_UART_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8000fec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART3_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART3_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART3_UART_Init+0x58>)
 8001024:	f004 f842 	bl	80050ac <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800102e:	f7ff fd41 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001a0 	.word	0x200001a0
 800103c:	40004800 	.word	0x40004800

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0aa      	sub	sp, #168	; 0xa8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2284      	movs	r2, #132	; 0x84
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f005 f81d 	bl	80060a0 <memset>
  if(uartHandle->Instance==USART3)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a26      	ldr	r2, [pc, #152]	; (8001104 <HAL_UART_MspInit+0xc4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d144      	bne.n	80010fa <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001074:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001076:	2300      	movs	r3, #0
 8001078:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fbf8 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800108a:	f7ff fd13 	bl	8000ab4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_UART_MspInit+0xc8>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <HAL_UART_MspInit+0xc8>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_UART_MspInit+0xc8>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_UART_MspInit+0xc8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_UART_MspInit+0xc8>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_UART_MspInit+0xc8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d8:	2307      	movs	r3, #7
 80010da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010e2:	4619      	mov	r1, r3
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <HAL_UART_MspInit+0xcc>)
 80010e6:	f000 fe17 	bl	8001d18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2027      	movs	r0, #39	; 0x27
 80010f0:	f000 fd3b 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010f4:	2027      	movs	r0, #39	; 0x27
 80010f6:	f000 fd54 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010fa:	bf00      	nop
 80010fc:	37a8      	adds	r7, #168	; 0xa8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40004800 	.word	0x40004800
 8001108:	40023800 	.word	0x40023800
 800110c:	40020c00 	.word	0x40020c00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopFillZerobss+0x26>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113a:	f7ff fd7b 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f004 ff8b 	bl	8006058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fc33 	bl	80009ac <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001154:	080060f0 	.word	0x080060f0
  ldr r2, =_sbss
 8001158:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800115c:	20000228 	.word	0x20000228

08001160 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <CAN1_RX0_IRQHandler>

08001162 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001166:	2003      	movs	r0, #3
 8001168:	f000 fcf4 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116c:	2000      	movs	r0, #0
 800116e:	f000 f805 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001172:	f7ff fca5 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fd0f 	bl	8001bbe <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 fcd7 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000224 	.word	0x20000224

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000224 	.word	0x20000224

0800121c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e031      	b.n	8001296 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f9b2 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	d116      	bne.n	8001288 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_ADC_Init+0x84>)
 8001260:	4013      	ands	r3, r2
 8001262:	f043 0202 	orr.w	r2, r3, #2
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fa9e 	bl	80017ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
 8001286:	e001      	b.n	800128c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	ffffeefd 	.word	0xffffeefd

080012a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d049      	beq.n	800136e <HAL_ADC_IRQHandler+0xca>
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d046      	beq.n	800136e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d12b      	bne.n	800135e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d127      	bne.n	800135e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001326:	2b00      	cmp	r3, #0
 8001328:	d119      	bne.n	800135e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0220 	bic.w	r2, r2, #32
 8001338:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d105      	bne.n	800135e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f8b0 	bl	80014c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f06f 0212 	mvn.w	r2, #18
 800136c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d057      	beq.n	8001434 <HAL_ADC_IRQHandler+0x190>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d054      	beq.n	8001434 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d139      	bne.n	8001424 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d12b      	bne.n	8001424 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d124      	bne.n	8001424 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d11d      	bne.n	8001424 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d119      	bne.n	8001424 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d105      	bne.n	8001424 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fabb 	bl	80019a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f06f 020c 	mvn.w	r2, #12
 8001432:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d017      	beq.n	800147a <HAL_ADC_IRQHandler+0x1d6>
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d014      	beq.n	800147a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10d      	bne.n	800147a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f834 	bl	80014d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f06f 0201 	mvn.w	r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001488:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d015      	beq.n	80014bc <HAL_ADC_IRQHandler+0x218>
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d012      	beq.n	80014bc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f06f 0220 	mvn.w	r2, #32
 80014aa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f81d 	bl	80014ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f06f 0220 	mvn.w	r2, #32
 80014ba:	601a      	str	r2, [r3, #0]
  }
}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1c>
 8001518:	2302      	movs	r3, #2
 800151a:	e136      	b.n	800178a <HAL_ADC_ConfigChannel+0x28a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b09      	cmp	r3, #9
 800152a:	d93a      	bls.n	80015a2 <HAL_ADC_ConfigChannel+0xa2>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001534:	d035      	beq.n	80015a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68d9      	ldr	r1, [r3, #12]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	3b1e      	subs	r3, #30
 800154c:	2207      	movs	r2, #7
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	400a      	ands	r2, r1
 800155a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a8d      	ldr	r2, [pc, #564]	; (8001798 <HAL_ADC_ConfigChannel+0x298>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10a      	bne.n	800157c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68d9      	ldr	r1, [r3, #12]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	061a      	lsls	r2, r3, #24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800157a:	e035      	b.n	80015e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68d9      	ldr	r1, [r3, #12]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	4603      	mov	r3, r0
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4403      	add	r3, r0
 8001594:	3b1e      	subs	r3, #30
 8001596:	409a      	lsls	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a0:	e022      	b.n	80015e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6919      	ldr	r1, [r3, #16]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	2207      	movs	r2, #7
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43da      	mvns	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	400a      	ands	r2, r1
 80015c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6919      	ldr	r1, [r3, #16]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	4603      	mov	r3, r0
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4403      	add	r3, r0
 80015de:	409a      	lsls	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b06      	cmp	r3, #6
 80015ee:	d824      	bhi.n	800163a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	3b05      	subs	r3, #5
 8001602:	221f      	movs	r2, #31
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43da      	mvns	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	400a      	ands	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	3b05      	subs	r3, #5
 800162c:	fa00 f203 	lsl.w	r2, r0, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
 8001638:	e04c      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b0c      	cmp	r3, #12
 8001640:	d824      	bhi.n	800168c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3b23      	subs	r3, #35	; 0x23
 8001654:	221f      	movs	r2, #31
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	400a      	ands	r2, r1
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	3b23      	subs	r3, #35	; 0x23
 800167e:	fa00 f203 	lsl.w	r2, r0, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
 800168a:	e023      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	3b41      	subs	r3, #65	; 0x41
 800169e:	221f      	movs	r2, #31
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43da      	mvns	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	400a      	ands	r2, r1
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b41      	subs	r3, #65	; 0x41
 80016c8:	fa00 f203 	lsl.w	r2, r0, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_ADC_ConfigChannel+0x29c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10a      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1f4>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a28      	ldr	r2, [pc, #160]	; (800179c <HAL_ADC_ConfigChannel+0x29c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10f      	bne.n	800171e <HAL_ADC_ConfigChannel+0x21e>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b12      	cmp	r3, #18
 8001704:	d10b      	bne.n	800171e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800170c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001710:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_ADC_ConfigChannel+0x29c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d12b      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x280>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <HAL_ADC_ConfigChannel+0x298>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d003      	beq.n	800173a <HAL_ADC_ConfigChannel+0x23a>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b11      	cmp	r3, #17
 8001738:	d122      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001740:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001744:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800174c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001750:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_ADC_ConfigChannel+0x298>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d111      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0c9a      	lsrs	r2, r3, #18
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001772:	e002      	b.n	800177a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3b01      	subs	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f9      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	10000012 	.word	0x10000012
 800179c:	40012000 	.word	0x40012000
 80017a0:	40012300 	.word	0x40012300
 80017a4:	20000000 	.word	0x20000000
 80017a8:	431bde83 	.word	0x431bde83

080017ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80017b4:	4b78      	ldr	r3, [pc, #480]	; (8001998 <ADC_Init+0x1ec>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a77      	ldr	r2, [pc, #476]	; (8001998 <ADC_Init+0x1ec>)
 80017ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80017c0:	4b75      	ldr	r3, [pc, #468]	; (8001998 <ADC_Init+0x1ec>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4973      	ldr	r1, [pc, #460]	; (8001998 <ADC_Init+0x1ec>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	021a      	lsls	r2, r3, #8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	4a58      	ldr	r2, [pc, #352]	; (800199c <ADC_Init+0x1f0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d022      	beq.n	8001886 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800184e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6899      	ldr	r1, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e00f      	b.n	80018a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0202 	bic.w	r2, r2, #2
 80018b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	005a      	lsls	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6859      	ldr	r1, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	3b01      	subs	r3, #1
 8001900:	035a      	lsls	r2, r3, #13
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	e007      	b.n	800191c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	3b01      	subs	r3, #1
 8001938:	051a      	lsls	r2, r3, #20
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800195e:	025a      	lsls	r2, r3, #9
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	029a      	lsls	r2, r3, #10
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40012300 	.word	0x40012300
 800199c:	0f000001 	.word	0x0f000001

080019a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <__NVIC_SetPriorityGrouping+0x40>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x40>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00
 80019f8:	05fa0000 	.word	0x05fa0000

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff29 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff3e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff31 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fb0e 	bl	8001204 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d008      	beq.n	8001c08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e052      	b.n	8001cae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0216 	bic.w	r2, r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d103      	bne.n	8001c38 <HAL_DMA_Abort+0x62>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0208 	bic.w	r2, r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c58:	e013      	b.n	8001c82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5a:	f7ff fad3 	bl	8001204 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d90c      	bls.n	8001c82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e015      	b.n	8001cae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e4      	bne.n	8001c5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	223f      	movs	r2, #63	; 0x3f
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e00c      	b.n	8001cee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d08:	b2db      	uxtb	r3, r3
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e175      	b.n	8002024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8164 	bne.w	800201e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x56>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80be 	beq.w	800201e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b66      	ldr	r3, [pc, #408]	; (800203c <HAL_GPIO_Init+0x324>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_GPIO_Init+0x324>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_GPIO_Init+0x324>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eba:	4a61      	ldr	r2, [pc, #388]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_GPIO_Init+0x32c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d037      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_GPIO_Init+0x334>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a55      	ldr	r2, [pc, #340]	; (8002050 <HAL_GPIO_Init+0x338>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a54      	ldr	r2, [pc, #336]	; (8002054 <HAL_GPIO_Init+0x33c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a53      	ldr	r2, [pc, #332]	; (8002058 <HAL_GPIO_Init+0x340>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_GPIO_Init+0x344>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a51      	ldr	r2, [pc, #324]	; (8002060 <HAL_GPIO_Init+0x348>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a50      	ldr	r2, [pc, #320]	; (8002064 <HAL_GPIO_Init+0x34c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001f2e:	2309      	movs	r3, #9
 8001f30:	e012      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f32:	230a      	movs	r3, #10
 8001f34:	e010      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f36:	2308      	movs	r3, #8
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_GPIO_Init+0x354>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a34      	ldr	r2, [pc, #208]	; (800206c <HAL_GPIO_Init+0x354>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_GPIO_Init+0x354>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_GPIO_Init+0x354>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_GPIO_Init+0x354>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae86 	bls.w	8001d38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40022000 	.word	0x40022000
 8002068:	40022400 	.word	0x40022400
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f806 	bl	80020d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07f      	b.n	80021fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fbda 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800213c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800214c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	e006      	b.n	8002174 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002172:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d104      	bne.n	8002186 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_I2C_Init+0x11c>)
 8002192:	430b      	orrs	r3, r1
 8002194:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69d9      	ldr	r1, [r3, #28]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1a      	ldr	r2, [r3, #32]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	02008000 	.word	0x02008000

0800220c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
  }
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d010      	beq.n	8002286 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	09db      	lsrs	r3, r3, #7
 8002268:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002284:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	0a9b      	lsrs	r3, r3, #10
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	09db      	lsrs	r3, r3, #7
 8002296:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f043 0208 	orr.w	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	0a5b      	lsrs	r3, r3, #9
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	09db      	lsrs	r3, r3, #7
 80022c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f043 0202 	orr.w	r2, r3, #2
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 030b 	and.w	r3, r3, #11
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fb89 	bl	8002a0c <I2C_ITError>
  }
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	70fb      	strb	r3, [r7, #3]
 8002336:	4613      	mov	r3, r2
 8002338:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <I2C_Slave_ISR_IT+0x24>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0ec      	b.n	8002580 <I2C_Slave_ISR_IT+0x1fe>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80023c6:	6939      	ldr	r1, [r7, #16]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f9bf 	bl	800274c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d04d      	beq.n	8002476 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d047      	beq.n	8002476 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d128      	bne.n	8002442 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b28      	cmp	r3, #40	; 0x28
 80023fa:	d108      	bne.n	800240e <I2C_Slave_ISR_IT+0x8c>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002402:	d104      	bne.n	800240e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 faaa 	bl	8002960 <I2C_ITListenCplt>
 800240c:	e032      	b.n	8002474 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b29      	cmp	r3, #41	; 0x29
 8002418:	d10e      	bne.n	8002438 <I2C_Slave_ISR_IT+0xb6>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002420:	d00a      	beq.n	8002438 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2210      	movs	r2, #16
 8002428:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fbe5 	bl	8002bfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f92d 	bl	8002690 <I2C_ITSlaveSeqCplt>
 8002436:	e01d      	b.n	8002474 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2210      	movs	r2, #16
 800243e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002440:	e096      	b.n	8002570 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2210      	movs	r2, #16
 8002448:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f043 0204 	orr.w	r2, r3, #4
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <I2C_Slave_ISR_IT+0xe4>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002462:	f040 8085 	bne.w	8002570 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4619      	mov	r1, r3
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 facd 	bl	8002a0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002472:	e07d      	b.n	8002570 <I2C_Slave_ISR_IT+0x1ee>
 8002474:	e07c      	b.n	8002570 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d030      	beq.n	80024e4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800248a:	2b00      	cmp	r3, #0
 800248c:	d02a      	beq.n	80024e4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d018      	beq.n	80024ca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d14f      	bne.n	8002574 <I2C_Slave_ISR_IT+0x1f2>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024da:	d04b      	beq.n	8002574 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f8d7 	bl	8002690 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80024e2:	e047      	b.n	8002574 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	08db      	lsrs	r3, r3, #3
 80024f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80024fc:	6939      	ldr	r1, [r7, #16]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f842 	bl	8002588 <I2C_ITAddrCplt>
 8002504:	e037      	b.n	8002576 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d031      	beq.n	8002576 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02b      	beq.n	8002576 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d018      	beq.n	800255a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
 8002558:	e00d      	b.n	8002576 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d002      	beq.n	8002568 <I2C_Slave_ISR_IT+0x1e6>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f891 	bl	8002690 <I2C_ITSlaveSeqCplt>
 800256e:	e002      	b.n	8002576 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002570:	bf00      	nop
 8002572:	e000      	b.n	8002576 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002574:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800259e:	2b28      	cmp	r3, #40	; 0x28
 80025a0:	d16a      	bne.n	8002678 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80025c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80025dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d138      	bne.n	8002658 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	09db      	lsrs	r3, r3, #7
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	89bb      	ldrh	r3, [r7, #12]
 80025ee:	4053      	eors	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f003 0306 	and.w	r3, r3, #6
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11c      	bne.n	8002634 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260c:	2b02      	cmp	r3, #2
 800260e:	d13b      	bne.n	8002688 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2208      	movs	r2, #8
 800261c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002626:	89ba      	ldrh	r2, [r7, #12]
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fe7c 	bl	800232a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002632:	e029      	b.n	8002688 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fb1e 	bl	8002c7e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800264a:	89ba      	ldrh	r2, [r7, #12]
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fe6a 	bl	800232a <HAL_I2C_AddrCallback>
}
 8002656:	e017      	b.n	8002688 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fb0e 	bl	8002c7e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800266a:	89ba      	ldrh	r2, [r7, #12]
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fe5a 	bl	800232a <HAL_I2C_AddrCallback>
}
 8002676:	e007      	b.n	8002688 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2208      	movs	r2, #8
 800267e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	0b9b      	lsrs	r3, r3, #14
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e00d      	b.n	80026e2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	0bdb      	lsrs	r3, r3, #15
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b29      	cmp	r3, #41	; 0x29
 80026ec:	d112      	bne.n	8002714 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2228      	movs	r2, #40	; 0x28
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2221      	movs	r2, #33	; 0x21
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026fc:	2101      	movs	r1, #1
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fabd 	bl	8002c7e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fdf8 	bl	8002302 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002712:	e017      	b.n	8002744 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b2a      	cmp	r3, #42	; 0x2a
 800271e:	d111      	bne.n	8002744 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2228      	movs	r2, #40	; 0x28
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2222      	movs	r2, #34	; 0x22
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800272e:	2102      	movs	r1, #2
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 faa4 	bl	8002c7e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fde9 	bl	8002316 <HAL_I2C_SlaveRxCpltCallback>
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002768:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2220      	movs	r2, #32
 8002770:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b21      	cmp	r3, #33	; 0x21
 8002776:	d002      	beq.n	800277e <I2C_ITSlaveCplt+0x32>
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b29      	cmp	r3, #41	; 0x29
 800277c:	d108      	bne.n	8002790 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800277e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa7b 	bl	8002c7e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2221      	movs	r2, #33	; 0x21
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
 800278e:	e00d      	b.n	80027ac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b22      	cmp	r3, #34	; 0x22
 8002794:	d002      	beq.n	800279c <I2C_ITSlaveCplt+0x50>
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b2a      	cmp	r3, #42	; 0x2a
 800279a:	d107      	bne.n	80027ac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800279c:	f248 0102 	movw	r1, #32770	; 0x8002
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fa6c 	bl	8002c7e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2222      	movs	r2, #34	; 0x22
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b64      	ldr	r3, [pc, #400]	; (8002958 <I2C_ITSlaveCplt+0x20c>)
 80027c8:	400b      	ands	r3, r1
 80027ca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fa14 	bl	8002bfa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	0b9b      	lsrs	r3, r3, #14
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d013      	beq.n	8002806 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d020      	beq.n	8002838 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002804:	e018      	b.n	8002838 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	0bdb      	lsrs	r3, r3, #15
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002820:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8a7 	bl	8002a0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b28      	cmp	r3, #40	; 0x28
 80028c8:	d141      	bne.n	800294e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80028ca:	6979      	ldr	r1, [r7, #20]
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f847 	bl	8002960 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028d2:	e03c      	b.n	800294e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028dc:	d014      	beq.n	8002908 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fed6 	bl	8002690 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <I2C_ITSlaveCplt+0x210>)
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fd20 	bl	8002346 <HAL_I2C_ListenCpltCallback>
}
 8002906:	e022      	b.n	800294e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b22      	cmp	r3, #34	; 0x22
 8002912:	d10e      	bne.n	8002932 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff fcf3 	bl	8002316 <HAL_I2C_SlaveRxCpltCallback>
}
 8002930:	e00d      	b.n	800294e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fcda 	bl	8002302 <HAL_I2C_SlaveTxCpltCallback>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	fe00e800 	.word	0xfe00e800
 800295c:	ffff0000 	.word	0xffff0000

08002960 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <I2C_ITListenCplt+0xa8>)
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d022      	beq.n	80029de <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f043 0204 	orr.w	r2, r3, #4
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029de:	f248 0103 	movw	r1, #32771	; 0x8003
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f94b 	bl	8002c7e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2210      	movs	r2, #16
 80029ee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fca4 	bl	8002346 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	ffff0000 	.word	0xffff0000

08002a0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a5d      	ldr	r2, [pc, #372]	; (8002ba0 <I2C_ITError+0x194>)
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b28      	cmp	r3, #40	; 0x28
 8002a42:	d005      	beq.n	8002a50 <I2C_ITError+0x44>
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b29      	cmp	r3, #41	; 0x29
 8002a48:	d002      	beq.n	8002a50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a4e:	d10b      	bne.n	8002a68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a50:	2103      	movs	r1, #3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f913 	bl	8002c7e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2228      	movs	r2, #40	; 0x28
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <I2C_ITError+0x198>)
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
 8002a66:	e011      	b.n	8002a8c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a68:	f248 0103 	movw	r1, #32771	; 0x8003
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f906 	bl	8002c7e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b60      	cmp	r3, #96	; 0x60
 8002a7c:	d003      	beq.n	8002a86 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d039      	beq.n	8002b0e <I2C_ITError+0x102>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b11      	cmp	r3, #17
 8002a9e:	d002      	beq.n	8002aa6 <I2C_ITError+0x9a>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b21      	cmp	r3, #33	; 0x21
 8002aa4:	d133      	bne.n	8002b0e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab4:	d107      	bne.n	8002ac6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ac4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f915 	bl	8001cfa <HAL_DMA_GetState>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d017      	beq.n	8002b06 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <I2C_ITError+0x19c>)
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f8e3 	bl	8001cb6 <HAL_DMA_Abort_IT>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d04d      	beq.n	8002b92 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b00:	4610      	mov	r0, r2
 8002b02:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b04:	e045      	b.n	8002b92 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f850 	bl	8002bac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b0c:	e041      	b.n	8002b92 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d039      	beq.n	8002b8a <I2C_ITError+0x17e>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	d002      	beq.n	8002b22 <I2C_ITError+0x116>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b22      	cmp	r3, #34	; 0x22
 8002b20:	d133      	bne.n	8002b8a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	d107      	bne.n	8002b42 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f8d7 	bl	8001cfa <HAL_DMA_GetState>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d017      	beq.n	8002b82 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <I2C_ITError+0x19c>)
 8002b58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f8a5 	bl	8001cb6 <HAL_DMA_Abort_IT>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d011      	beq.n	8002b96 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b80:	e009      	b.n	8002b96 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f812 	bl	8002bac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b88:	e005      	b.n	8002b96 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f80e 	bl	8002bac <I2C_TreatErrorCallback>
  }
}
 8002b90:	e002      	b.n	8002b98 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b96:	bf00      	nop
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	ffff0000 	.word	0xffff0000
 8002ba4:	08002383 	.word	0x08002383
 8002ba8:	08002c43 	.word	0x08002c43

08002bac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b60      	cmp	r3, #96	; 0x60
 8002bbe:	d10e      	bne.n	8002bde <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fbc9 	bl	800236e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bdc:	e009      	b.n	8002bf2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fbb4 	bl	800235a <HAL_I2C_ErrorCallback>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d103      	bne.n	8002c18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2200      	movs	r2, #0
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d007      	beq.n	8002c36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	619a      	str	r2, [r3, #24]
  }
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff ff9b 	bl	8002bac <I2C_TreatErrorCallback>
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00f      	beq.n	8002cb8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002c9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cac:	2b28      	cmp	r3, #40	; 0x28
 8002cae:	d003      	beq.n	8002cb8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002cb6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00f      	beq.n	8002ce2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002cc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cd6:	2b28      	cmp	r3, #40	; 0x28
 8002cd8:	d003      	beq.n	8002ce2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002ce0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ce2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da03      	bge.n	8002cf2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d103      	bne.n	8002d00 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002cfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d103      	bne.n	8002d0e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f043 0320 	orr.w	r3, r3, #32
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d103      	bne.n	8002d1c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d138      	bne.n	8002dc2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e032      	b.n	8002dc4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2224      	movs	r2, #36	; 0x24
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d139      	bne.n	8002e5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e033      	b.n	8002e5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40007000 	.word	0x40007000

08002e88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb6:	f7fe f9a5 	bl	8001204 <HAL_GetTick>
 8002eba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ebc:	e009      	b.n	8002ed2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ebe:	f7fe f9a1 	bl	8001204 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ecc:	d901      	bls.n	8002ed2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e022      	b.n	8002f18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ede:	d1ee      	bne.n	8002ebe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eec:	f7fe f98a 	bl	8001204 <HAL_GetTick>
 8002ef0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ef2:	e009      	b.n	8002f08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ef4:	f7fe f986 	bl	8001204 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f02:	d901      	bls.n	8002f08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e007      	b.n	8002f18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40007000 	.word	0x40007000

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e291      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8087 	beq.w	800305a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d00c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f58:	4b93      	ldr	r3, [pc, #588]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d112      	bne.n	8002f8a <HAL_RCC_OscConfig+0x62>
 8002f64:	4b90      	ldr	r3, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06c      	beq.n	8003058 <HAL_RCC_OscConfig+0x130>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d168      	bne.n	8003058 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e26b      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x7a>
 8002f94:	4b84      	ldr	r3, [pc, #528]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a83      	ldr	r2, [pc, #524]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e02e      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x9c>
 8002faa:	4b7f      	ldr	r3, [pc, #508]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7e      	ldr	r2, [pc, #504]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7b      	ldr	r2, [pc, #492]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xc0>
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fe8:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6b      	ldr	r2, [pc, #428]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe f8fc 	bl	8001204 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe f8f8 	bl	8001204 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e21f      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xe8>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f8e8 	bl	8001204 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe f8e4 	bl	8001204 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e20b      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x110>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d069      	beq.n	800313a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003066:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x190>
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1df      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	493d      	ldr	r1, [pc, #244]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e040      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d023      	beq.n	8003108 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b39      	ldr	r3, [pc, #228]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe f89a 	bl	8001204 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe f896 	bl	8001204 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1bd      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4929      	ldr	r1, [pc, #164]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
 8003106:	e018      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe f876 	bl	8001204 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7fe f872 	bl	8001204 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e199      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d038      	beq.n	80031b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d019      	beq.n	8003182 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fe f853 	bl	8001204 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7fe f84f 	bl	8001204 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e176      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x23a>
 8003180:	e01a      	b.n	80031b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe f839 	bl	8001204 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe f835 	bl	8001204 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d903      	bls.n	80031ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e15c      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
 80031a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ac:	4b91      	ldr	r3, [pc, #580]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ee      	bne.n	8003196 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a4 	beq.w	800330e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c6:	4b8b      	ldr	r3, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10d      	bne.n	80031ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a87      	ldr	r2, [pc, #540]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b85      	ldr	r3, [pc, #532]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ee:	4b82      	ldr	r3, [pc, #520]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031fa:	4b7f      	ldr	r3, [pc, #508]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7e      	ldr	r2, [pc, #504]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fd fffd 	bl	8001204 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fd fff9 	bl	8001204 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e120      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x31a>
 8003234:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	e02d      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x33c>
 800324a:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	4b67      	ldr	r3, [pc, #412]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a66      	ldr	r2, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800325c:	f023 0304 	bic.w	r3, r3, #4
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	e01c      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x35e>
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a5d      	ldr	r2, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	e00b      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003286:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a5a      	ldr	r2, [pc, #360]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	4b58      	ldr	r3, [pc, #352]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003298:	f023 0304 	bic.w	r3, r3, #4
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d015      	beq.n	80032d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fd ffad 	bl	8001204 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fd ffa9 	bl	8001204 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0ce      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ee      	beq.n	80032ae <HAL_RCC_OscConfig+0x386>
 80032d0:	e014      	b.n	80032fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fd ff97 	bl	8001204 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd ff93 	bl	8001204 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a3b      	ldr	r2, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a4 	beq.w	8003460 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003318:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	d06b      	beq.n	80033fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d149      	bne.n	80033c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd ff64 	bl	8001204 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fd ff60 	bl	8001204 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e087      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	3b01      	subs	r3, #1
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	4313      	orrs	r3, r2
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800338a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd ff34 	bl	8001204 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fd ff30 	bl	8001204 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e057      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x478>
 80033be:	e04f      	b.n	8003460 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd ff1a 	bl	8001204 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fd ff16 	bl	8001204 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e03d      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4ac>
 80033f2:	e035      	b.n	8003460 <HAL_RCC_OscConfig+0x538>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCC_OscConfig+0x544>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d028      	beq.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d121      	bne.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d11a      	bne.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800342c:	4013      	ands	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003432:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003434:	4293      	cmp	r3, r2
 8003436:	d111      	bne.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	3b01      	subs	r3, #1
 8003446:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800

08003470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0d0      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b67      	ldr	r3, [pc, #412]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 020f 	bic.w	r2, r3, #15
 800349e:	4965      	ldr	r1, [pc, #404]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d040      	beq.n	8003594 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d115      	bne.n	8003552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b41      	ldr	r3, [pc, #260]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e073      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06b      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4936      	ldr	r1, [pc, #216]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fd fe4e 	bl	8001204 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fd fe4a 	bl	8001204 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e053      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d210      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 020f 	bic.w	r2, r3, #15
 80035aa:	4922      	ldr	r1, [pc, #136]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490a      	ldr	r1, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1cc>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1d0>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1d4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fdaa 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00
 8003638:	40023800 	.word	0x40023800
 800363c:	080060c8 	.word	0x080060c8
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	2300      	movs	r3, #0
 800365a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003660:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d00d      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x40>
 800366c:	2b08      	cmp	r3, #8
 800366e:	f200 80bd 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x34>
 8003676:	2b04      	cmp	r3, #4
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x3a>
 800367a:	e0b7      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800367e:	60bb      	str	r3, [r7, #8]
      break;
 8003680:	e0b7      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003684:	60bb      	str	r3, [r7, #8]
      break;
 8003686:	e0b4      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003688:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003690:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003692:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04d      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b58      	ldr	r3, [pc, #352]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	461a      	mov	r2, r3
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	ea02 0800 	and.w	r8, r2, r0
 80036b6:	ea03 0901 	and.w	r9, r3, r1
 80036ba:	4640      	mov	r0, r8
 80036bc:	4649      	mov	r1, r9
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	014b      	lsls	r3, r1, #5
 80036c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036cc:	0142      	lsls	r2, r0, #5
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	ebb0 0008 	subs.w	r0, r0, r8
 80036d6:	eb61 0109 	sbc.w	r1, r1, r9
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	018b      	lsls	r3, r1, #6
 80036e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036e8:	0182      	lsls	r2, r0, #6
 80036ea:	1a12      	subs	r2, r2, r0
 80036ec:	eb63 0301 	sbc.w	r3, r3, r1
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	00d9      	lsls	r1, r3, #3
 80036fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036fe:	00d0      	lsls	r0, r2, #3
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	eb12 0208 	adds.w	r2, r2, r8
 8003708:	eb43 0309 	adc.w	r3, r3, r9
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	0259      	lsls	r1, r3, #9
 8003716:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800371a:	0250      	lsls	r0, r2, #9
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	f7fc fd6c 	bl	8000208 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e04a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	461a      	mov	r2, r3
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f240 10ff 	movw	r0, #511	; 0x1ff
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	ea02 0400 	and.w	r4, r2, r0
 8003752:	ea03 0501 	and.w	r5, r3, r1
 8003756:	4620      	mov	r0, r4
 8003758:	4629      	mov	r1, r5
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	014b      	lsls	r3, r1, #5
 8003764:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003768:	0142      	lsls	r2, r0, #5
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	1b00      	subs	r0, r0, r4
 8003770:	eb61 0105 	sbc.w	r1, r1, r5
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	018b      	lsls	r3, r1, #6
 800377e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003782:	0182      	lsls	r2, r0, #6
 8003784:	1a12      	subs	r2, r2, r0
 8003786:	eb63 0301 	sbc.w	r3, r3, r1
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003798:	00d0      	lsls	r0, r2, #3
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	1912      	adds	r2, r2, r4
 80037a0:	eb45 0303 	adc.w	r3, r5, r3
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0299      	lsls	r1, r3, #10
 80037ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037b2:	0290      	lsls	r0, r2, #10
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	461a      	mov	r2, r3
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f7fc fd20 	bl	8000208 <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4613      	mov	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	60bb      	str	r3, [r7, #8]
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ee:	60bb      	str	r3, [r7, #8]
      break;
 80037f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f2:	68bb      	ldr	r3, [r7, #8]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0a9b      	lsrs	r3, r3, #10
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	080060d8 	.word	0x080060d8

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffdc 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0b5b      	lsrs	r3, r3, #13
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	080060d8 	.word	0x080060d8

08003874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d012      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800389c:	4b69      	ldr	r3, [pc, #420]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a68      	ldr	r2, [pc, #416]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038a6:	6093      	str	r3, [r2, #8]
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	4964      	ldr	r1, [pc, #400]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d017      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ce:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	4959      	ldr	r1, [pc, #356]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d017      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800390a:	4b4e      	ldr	r3, [pc, #312]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	494a      	ldr	r1, [pc, #296]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003946:	2301      	movs	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 808b 	beq.w	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a39      	ldr	r2, [pc, #228]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
 8003964:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fd fc42 	bl	8001204 <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fd fc3e 	bl	8001204 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e357      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d035      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d02e      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039e8:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d114      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd fc06 	bl	8001204 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fd fc02 	bl	8001204 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e319      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ee      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2a:	d111      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	4901      	ldr	r1, [pc, #4]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	0ffffcff 	.word	0x0ffffcff
 8003a50:	4bb1      	ldr	r3, [pc, #708]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4ab0      	ldr	r2, [pc, #704]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a5a:	6093      	str	r3, [r2, #8]
 8003a5c:	4bae      	ldr	r3, [pc, #696]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	49ab      	ldr	r1, [pc, #684]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a7a:	4ba7      	ldr	r3, [pc, #668]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	4aa5      	ldr	r2, [pc, #660]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a8a:	4ba3      	ldr	r3, [pc, #652]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	49a0      	ldr	r1, [pc, #640]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa8:	4b9b      	ldr	r3, [pc, #620]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab6:	4998      	ldr	r1, [pc, #608]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aca:	4b93      	ldr	r3, [pc, #588]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	498f      	ldr	r1, [pc, #572]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aec:	4b8a      	ldr	r3, [pc, #552]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	4987      	ldr	r1, [pc, #540]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b0e:	4b82      	ldr	r3, [pc, #520]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	497e      	ldr	r1, [pc, #504]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b30:	4b79      	ldr	r3, [pc, #484]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4976      	ldr	r1, [pc, #472]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b52:	4b71      	ldr	r3, [pc, #452]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f023 020c 	bic.w	r2, r3, #12
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b60:	496d      	ldr	r1, [pc, #436]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b74:	4b68      	ldr	r3, [pc, #416]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	4965      	ldr	r1, [pc, #404]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b96:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	495c      	ldr	r1, [pc, #368]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb8:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	4954      	ldr	r1, [pc, #336]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bda:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	494b      	ldr	r1, [pc, #300]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bfc:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	4943      	ldr	r1, [pc, #268]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c1e:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	493a      	ldr	r1, [pc, #232]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4e:	4932      	ldr	r1, [pc, #200]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d011      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c70:	4929      	ldr	r1, [pc, #164]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb0:	4919      	ldr	r1, [pc, #100]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd4:	4910      	ldr	r1, [pc, #64]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d006      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80d9 	beq.w	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fa82 	bl	8001204 <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d02:	e00b      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d04:	f7fd fa7e 	bl	8001204 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d904      	bls.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e197      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d1c:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ed      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d021      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11d      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d3c:	4b64      	ldr	r3, [pc, #400]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d4a:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d50:	0e1b      	lsrs	r3, r3, #24
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	019a      	lsls	r2, r3, #6
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	071b      	lsls	r3, r3, #28
 8003d70:	4957      	ldr	r1, [pc, #348]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da2:	d129      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003da4:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	0f1b      	lsrs	r3, r3, #28
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	071b      	lsls	r3, r3, #28
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de6:	f023 021f 	bic.w	r2, r3, #31
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	3b01      	subs	r3, #1
 8003df0:	4937      	ldr	r1, [pc, #220]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01d      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e04:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0a:	0e1b      	lsrs	r3, r3, #24
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e12:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e18:	0f1b      	lsrs	r3, r3, #28
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	019a      	lsls	r2, r3, #6
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	071b      	lsls	r3, r3, #28
 8003e38:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d011      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	019a      	lsls	r2, r3, #6
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	041b      	lsls	r3, r3, #16
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	071b      	lsls	r3, r3, #28
 8003e68:	4919      	ldr	r1, [pc, #100]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fd f9c2 	bl	8001204 <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e84:	f7fd f9be 	bl	8001204 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0d7      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 80cd 	bne.w	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb6:	f7fd f9a5 	bl	8001204 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ebe:	f7fd f9a1 	bl	8001204 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d903      	bls.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0ba      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ed0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ed4:	4b5e      	ldr	r3, [pc, #376]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee0:	d0ed      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d12a      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f0a:	4b51      	ldr	r3, [pc, #324]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f18:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	0f1b      	lsrs	r3, r3, #28
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	019a      	lsls	r2, r3, #6
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	071b      	lsls	r3, r3, #28
 8003f3e:	4944      	ldr	r1, [pc, #272]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f46:	4b42      	ldr	r3, [pc, #264]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	493d      	ldr	r1, [pc, #244]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d022      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f74:	d11d      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	0e1b      	lsrs	r3, r3, #24
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	0f1b      	lsrs	r3, r3, #28
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	019a      	lsls	r2, r3, #6
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	4929      	ldr	r1, [pc, #164]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d028      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	0e1b      	lsrs	r3, r3, #24
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	4917      	ldr	r1, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4911      	ldr	r1, [pc, #68]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fd f8f2 	bl	8001204 <HAL_GetTick>
 8004020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004024:	f7fd f8ee 	bl	8001204 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e007      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004042:	d1ef      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800

08004054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e049      	b.n	80040fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc ff06 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 fbc6 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e049      	b.n	80041a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f841 	bl	80041b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	4619      	mov	r1, r3
 8004140:	4610      	mov	r0, r2
 8004142:	f000 fb6f 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0202 	mvn.w	r2, #2
 80041f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 faee 	bl	80047e8 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fae0 	bl	80047d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 faf1 	bl	80047fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b04      	cmp	r3, #4
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0204 	mvn.w	r2, #4
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fac4 	bl	80047e8 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fab6 	bl	80047d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fac7 	bl	80047fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b08      	cmp	r3, #8
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0208 	mvn.w	r2, #8
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa9a 	bl	80047e8 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa8c 	bl	80047d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fa9d 	bl	80047fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0210 	mvn.w	r2, #16
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2208      	movs	r2, #8
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa70 	bl	80047e8 <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fa62 	bl	80047d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fa73 	bl	80047fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d10e      	bne.n	8004348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d107      	bne.n	8004348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0201 	mvn.w	r2, #1
 8004340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa3c 	bl	80047c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b80      	cmp	r3, #128	; 0x80
 8004354:	d10e      	bne.n	8004374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d107      	bne.n	8004374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800436c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fe88 	bl	8005084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	d10e      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d107      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800439a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fe7b 	bl	8005098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d10e      	bne.n	80043ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d107      	bne.n	80043ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fa21 	bl	8004810 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d10e      	bne.n	80043fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d107      	bne.n	80043fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0220 	mvn.w	r2, #32
 80043f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fe3b 	bl	8005070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800441e:	2302      	movs	r3, #2
 8004420:	e0ff      	b.n	8004622 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b14      	cmp	r3, #20
 800442e:	f200 80f0 	bhi.w	8004612 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	0800448d 	.word	0x0800448d
 800443c:	08004613 	.word	0x08004613
 8004440:	08004613 	.word	0x08004613
 8004444:	08004613 	.word	0x08004613
 8004448:	080044cd 	.word	0x080044cd
 800444c:	08004613 	.word	0x08004613
 8004450:	08004613 	.word	0x08004613
 8004454:	08004613 	.word	0x08004613
 8004458:	0800450f 	.word	0x0800450f
 800445c:	08004613 	.word	0x08004613
 8004460:	08004613 	.word	0x08004613
 8004464:	08004613 	.word	0x08004613
 8004468:	0800454f 	.word	0x0800454f
 800446c:	08004613 	.word	0x08004613
 8004470:	08004613 	.word	0x08004613
 8004474:	08004613 	.word	0x08004613
 8004478:	08004591 	.word	0x08004591
 800447c:	08004613 	.word	0x08004613
 8004480:	08004613 	.word	0x08004613
 8004484:	08004613 	.word	0x08004613
 8004488:	080045d1 	.word	0x080045d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fa66 	bl	8004964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	619a      	str	r2, [r3, #24]
      break;
 80044ca:	e0a5      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fab8 	bl	8004a48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]
      break;
 800450c:	e084      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fb0f 	bl	8004b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0208 	orr.w	r2, r2, #8
 8004528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0204 	bic.w	r2, r2, #4
 8004538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69d9      	ldr	r1, [r3, #28]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	61da      	str	r2, [r3, #28]
      break;
 800454c:	e064      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fb65 	bl	8004c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69d9      	ldr	r1, [r3, #28]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	61da      	str	r2, [r3, #28]
      break;
 800458e:	e043      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fb9c 	bl	8004cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0208 	orr.w	r2, r2, #8
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0204 	bic.w	r2, r2, #4
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045ce:	e023      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fbce 	bl	8004d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	021a      	lsls	r2, r3, #8
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004610:	e002      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
      break;
 8004616:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004620:	7dfb      	ldrb	r3, [r7, #23]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop

0800462c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIM_ConfigClockSource+0x1c>
 8004644:	2302      	movs	r3, #2
 8004646:	e0b4      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x186>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	4b56      	ldr	r3, [pc, #344]	; (80047bc <HAL_TIM_ConfigClockSource+0x190>)
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	d03e      	beq.n	8004700 <HAL_TIM_ConfigClockSource+0xd4>
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004686:	f200 8087 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	f000 8086 	beq.w	800479e <HAL_TIM_ConfigClockSource+0x172>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	d87f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b70      	cmp	r3, #112	; 0x70
 800469a:	d01a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0xa6>
 800469c:	2b70      	cmp	r3, #112	; 0x70
 800469e:	d87b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b60      	cmp	r3, #96	; 0x60
 80046a2:	d050      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x11a>
 80046a4:	2b60      	cmp	r3, #96	; 0x60
 80046a6:	d877      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b50      	cmp	r3, #80	; 0x50
 80046aa:	d03c      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xfa>
 80046ac:	2b50      	cmp	r3, #80	; 0x50
 80046ae:	d873      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d058      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x13a>
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d86f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d064      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d86b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d060      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d867      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d05c      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d05a      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	e062      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6899      	ldr	r1, [r3, #8]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f000 fc17 	bl	8004f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	609a      	str	r2, [r3, #8]
      break;
 80046fe:	e04f      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f000 fc00 	bl	8004f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e03c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f000 fb74 	bl	8004e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2150      	movs	r1, #80	; 0x50
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fbcd 	bl	8004ede <TIM_ITRx_SetConfig>
      break;
 8004744:	e02c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	461a      	mov	r2, r3
 8004754:	f000 fb93 	bl	8004e7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2160      	movs	r1, #96	; 0x60
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fbbd 	bl	8004ede <TIM_ITRx_SetConfig>
      break;
 8004764:	e01c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	461a      	mov	r2, r3
 8004774:	f000 fb54 	bl	8004e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2140      	movs	r1, #64	; 0x40
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fbad 	bl	8004ede <TIM_ITRx_SetConfig>
      break;
 8004784:	e00c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f000 fba4 	bl	8004ede <TIM_ITRx_SetConfig>
      break;
 8004796:	e003      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e000      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800479e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	fffeff88 	.word	0xfffeff88

080047c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a40      	ldr	r2, [pc, #256]	; (8004938 <TIM_Base_SetConfig+0x114>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004842:	d00f      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a3d      	ldr	r2, [pc, #244]	; (800493c <TIM_Base_SetConfig+0x118>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00b      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a3c      	ldr	r2, [pc, #240]	; (8004940 <TIM_Base_SetConfig+0x11c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3b      	ldr	r2, [pc, #236]	; (8004944 <TIM_Base_SetConfig+0x120>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3a      	ldr	r2, [pc, #232]	; (8004948 <TIM_Base_SetConfig+0x124>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d108      	bne.n	8004876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a2f      	ldr	r2, [pc, #188]	; (8004938 <TIM_Base_SetConfig+0x114>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d02b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004884:	d027      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2c      	ldr	r2, [pc, #176]	; (800493c <TIM_Base_SetConfig+0x118>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d023      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2b      	ldr	r2, [pc, #172]	; (8004940 <TIM_Base_SetConfig+0x11c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <TIM_Base_SetConfig+0x120>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a29      	ldr	r2, [pc, #164]	; (8004948 <TIM_Base_SetConfig+0x124>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d017      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a28      	ldr	r2, [pc, #160]	; (800494c <TIM_Base_SetConfig+0x128>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a27      	ldr	r2, [pc, #156]	; (8004950 <TIM_Base_SetConfig+0x12c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <TIM_Base_SetConfig+0x130>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a25      	ldr	r2, [pc, #148]	; (8004958 <TIM_Base_SetConfig+0x134>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a24      	ldr	r2, [pc, #144]	; (800495c <TIM_Base_SetConfig+0x138>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <TIM_Base_SetConfig+0x13c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <TIM_Base_SetConfig+0x114>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0xf8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d103      	bne.n	8004924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	615a      	str	r2, [r3, #20]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800
 8004944:	40000c00 	.word	0x40000c00
 8004948:	40010400 	.word	0x40010400
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800
 8004958:	40001800 	.word	0x40001800
 800495c:	40001c00 	.word	0x40001c00
 8004960:	40002000 	.word	0x40002000

08004964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <TIM_OC1_SetConfig+0xd8>)
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0302 	bic.w	r3, r3, #2
 80049ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <TIM_OC1_SetConfig+0xdc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_OC1_SetConfig+0x64>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a20      	ldr	r2, [pc, #128]	; (8004a44 <TIM_OC1_SetConfig+0xe0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10c      	bne.n	80049e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0308 	bic.w	r3, r3, #8
 80049ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <TIM_OC1_SetConfig+0xdc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_OC1_SetConfig+0x8e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <TIM_OC1_SetConfig+0xe0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d111      	bne.n	8004a16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	fffeff8f 	.word	0xfffeff8f
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40010400 	.word	0x40010400

08004a48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0210 	bic.w	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <TIM_OC2_SetConfig+0xe4>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0320 	bic.w	r3, r3, #32
 8004a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a23      	ldr	r2, [pc, #140]	; (8004b30 <TIM_OC2_SetConfig+0xe8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC2_SetConfig+0x68>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <TIM_OC2_SetConfig+0xec>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10d      	bne.n	8004acc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <TIM_OC2_SetConfig+0xe8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_OC2_SetConfig+0x94>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <TIM_OC2_SetConfig+0xec>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d113      	bne.n	8004b04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	feff8fff 	.word	0xfeff8fff
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40010400 	.word	0x40010400

08004b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <TIM_OC3_SetConfig+0xe0>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a22      	ldr	r2, [pc, #136]	; (8004c1c <TIM_OC3_SetConfig+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_OC3_SetConfig+0x66>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <TIM_OC3_SetConfig+0xe8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d10d      	bne.n	8004bba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <TIM_OC3_SetConfig+0xe4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_OC3_SetConfig+0x92>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a16      	ldr	r2, [pc, #88]	; (8004c20 <TIM_OC3_SetConfig+0xe8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d113      	bne.n	8004bf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	621a      	str	r2, [r3, #32]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	fffeff8f 	.word	0xfffeff8f
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40010400 	.word	0x40010400

08004c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <TIM_OC4_SetConfig+0xa4>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	031b      	lsls	r3, r3, #12
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a13      	ldr	r2, [pc, #76]	; (8004ccc <TIM_OC4_SetConfig+0xa8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_OC4_SetConfig+0x68>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <TIM_OC4_SetConfig+0xac>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d109      	bne.n	8004ca0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	019b      	lsls	r3, r3, #6
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	feff8fff 	.word	0xfeff8fff
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40010400 	.word	0x40010400

08004cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <TIM_OC5_SetConfig+0x98>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <TIM_OC5_SetConfig+0x9c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_OC5_SetConfig+0x5e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <TIM_OC5_SetConfig+0xa0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d109      	bne.n	8004d46 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	fffeff8f 	.word	0xfffeff8f
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40010400 	.word	0x40010400

08004d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <TIM_OC6_SetConfig+0x9c>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	051b      	lsls	r3, r3, #20
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <TIM_OC6_SetConfig+0xa0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC6_SetConfig+0x60>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <TIM_OC6_SetConfig+0xa4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	feff8fff 	.word	0xfeff8fff
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 0201 	bic.w	r2, r3, #1
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f023 030a 	bic.w	r3, r3, #10
 8004e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b087      	sub	sp, #28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0210 	bic.w	r2, r3, #16
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f043 0307 	orr.w	r3, r3, #7
 8004f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	609a      	str	r2, [r3, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	021a      	lsls	r2, r3, #8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	609a      	str	r2, [r3, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e06d      	b.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a30      	ldr	r2, [pc, #192]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d01d      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a15      	ldr	r2, [pc, #84]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a16      	ldr	r2, [pc, #88]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a15      	ldr	r2, [pc, #84]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d10c      	bne.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	40010000 	.word	0x40010000
 8005058:	40010400 	.word	0x40010400
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40014000 	.word	0x40014000
 800506c:	40001800 	.word	0x40001800

08005070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e040      	b.n	8005140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fb ffb6 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2224      	movs	r2, #36	; 0x24
 80050d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fb16 	bl	800571c <UART_SetConfig>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e022      	b.n	8005140 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fd6c 	bl	8005be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fdf3 	bl	8005d24 <UART_CheckIdleState>
 800513e:	4603      	mov	r3, r0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b0ba      	sub	sp, #232	; 0xe8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800516e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005172:	f640 030f 	movw	r3, #2063	; 0x80f
 8005176:	4013      	ands	r3, r2
 8005178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800517c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d115      	bne.n	80051b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00f      	beq.n	80051b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 828f 	beq.w	80056c4 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
      }
      return;
 80051ae:	e289      	b.n	80056c4 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8117 	beq.w	80053e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051ca:	4b85      	ldr	r3, [pc, #532]	; (80053e0 <HAL_UART_IRQHandler+0x298>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 810a 	beq.w	80053e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d011      	beq.n	8005204 <HAL_UART_IRQHandler+0xbc>
 80051e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2201      	movs	r2, #1
 80051f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fa:	f043 0201 	orr.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d011      	beq.n	8005234 <HAL_UART_IRQHandler+0xec>
 8005210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2202      	movs	r2, #2
 8005222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	f043 0204 	orr.w	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d011      	beq.n	8005264 <HAL_UART_IRQHandler+0x11c>
 8005240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2204      	movs	r2, #4
 8005252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800525a:	f043 0202 	orr.w	r2, r3, #2
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d017      	beq.n	80052a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d105      	bne.n	8005288 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800527c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005280:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2208      	movs	r2, #8
 800528e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005296:	f043 0208 	orr.w	r2, r3, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d012      	beq.n	80052d2 <HAL_UART_IRQHandler+0x18a>
 80052ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00c      	beq.n	80052d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c8:	f043 0220 	orr.w	r2, r3, #32
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 81f5 	beq.w	80056c8 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00d      	beq.n	8005306 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800530c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d005      	beq.n	800532a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800531e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005322:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005326:	2b00      	cmp	r3, #0
 8005328:	d04f      	beq.n	80053ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fdf1 	bl	8005f12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533a:	2b40      	cmp	r3, #64	; 0x40
 800533c:	d141      	bne.n	80053c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800536a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800536e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1d9      	bne.n	800533e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	2b00      	cmp	r3, #0
 8005390:	d013      	beq.n	80053ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <HAL_UART_IRQHandler+0x29c>)
 8005398:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fc fc89 	bl	8001cb6 <HAL_DMA_Abort_IT>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d017      	beq.n	80053da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80053b4:	4610      	mov	r0, r2
 80053b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b8:	e00f      	b.n	80053da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f998 	bl	80056f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c0:	e00b      	b.n	80053da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f994 	bl	80056f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c8:	e007      	b.n	80053da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f990 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80053d8:	e176      	b.n	80056c8 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053da:	bf00      	nop
    return;
 80053dc:	e174      	b.n	80056c8 <HAL_UART_IRQHandler+0x580>
 80053de:	bf00      	nop
 80053e0:	04000120 	.word	0x04000120
 80053e4:	08005fd9 	.word	0x08005fd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	f040 8144 	bne.w	800567a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 813d 	beq.w	800567a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8136 	beq.w	800567a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2210      	movs	r2, #16
 8005414:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b40      	cmp	r3, #64	; 0x40
 8005422:	f040 80b2 	bne.w	800558a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005432:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8148 	beq.w	80056cc <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005446:	429a      	cmp	r2, r3
 8005448:	f080 8140 	bcs.w	80056cc <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	f000 8085 	beq.w	800556e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800548e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005492:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800549a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1da      	bne.n	8005464 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e1      	bne.n	80054ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800550e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800551c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e3      	bne.n	80054ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553e:	f023 0310 	bic.w	r3, r3, #16
 8005542:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005550:	65bb      	str	r3, [r7, #88]	; 0x58
 8005552:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800555e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e4      	bne.n	800552e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	4618      	mov	r0, r3
 800556a:	f7fc fb34 	bl	8001bd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800557a:	b29b      	uxth	r3, r3
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	b29b      	uxth	r3, r3
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f8be 	bl	8005704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005588:	e0a0      	b.n	80056cc <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005596:	b29b      	uxth	r3, r3
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8092 	beq.w	80056d0 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80055ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 808d 	beq.w	80056d0 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055d8:	647b      	str	r3, [r7, #68]	; 0x44
 80055da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e4      	bne.n	80055b6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	623b      	str	r3, [r7, #32]
   return(result);
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005610:	633a      	str	r2, [r7, #48]	; 0x30
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e3      	bne.n	80055ec <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	60fb      	str	r3, [r7, #12]
   return(result);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	69b9      	ldr	r1, [r7, #24]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	617b      	str	r3, [r7, #20]
   return(result);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e4      	bne.n	8005636 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800566c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f846 	bl	8005704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005678:	e02a      	b.n	80056d0 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800567a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00e      	beq.n	80056a4 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d008      	beq.n	80056a4 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01c      	beq.n	80056d4 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
    }
    return;
 80056a2:	e017      	b.n	80056d4 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d012      	beq.n	80056d6 <HAL_UART_IRQHandler+0x58e>
 80056b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00c      	beq.n	80056d6 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fca1 	bl	8006004 <UART_EndTransmit_IT>
    return;
 80056c2:	e008      	b.n	80056d6 <HAL_UART_IRQHandler+0x58e>
      return;
 80056c4:	bf00      	nop
 80056c6:	e006      	b.n	80056d6 <HAL_UART_IRQHandler+0x58e>
    return;
 80056c8:	bf00      	nop
 80056ca:	e004      	b.n	80056d6 <HAL_UART_IRQHandler+0x58e>
      return;
 80056cc:	bf00      	nop
 80056ce:	e002      	b.n	80056d6 <HAL_UART_IRQHandler+0x58e>
      return;
 80056d0:	bf00      	nop
 80056d2:	e000      	b.n	80056d6 <HAL_UART_IRQHandler+0x58e>
    return;
 80056d4:	bf00      	nop
  }

}
 80056d6:	37e8      	adds	r7, #232	; 0xe8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4ba7      	ldr	r3, [pc, #668]	; (80059e4 <UART_SetConfig+0x2c8>)
 8005748:	4013      	ands	r3, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	430b      	orrs	r3, r1
 8005752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	430a      	orrs	r2, r1
 800578c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a95      	ldr	r2, [pc, #596]	; (80059e8 <UART_SetConfig+0x2cc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d120      	bne.n	80057da <UART_SetConfig+0xbe>
 8005798:	4b94      	ldr	r3, [pc, #592]	; (80059ec <UART_SetConfig+0x2d0>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d816      	bhi.n	80057d4 <UART_SetConfig+0xb8>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0x90>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057bd 	.word	0x080057bd
 80057b0:	080057c9 	.word	0x080057c9
 80057b4:	080057c3 	.word	0x080057c3
 80057b8:	080057cf 	.word	0x080057cf
 80057bc:	2301      	movs	r3, #1
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e14f      	b.n	8005a62 <UART_SetConfig+0x346>
 80057c2:	2302      	movs	r3, #2
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e14c      	b.n	8005a62 <UART_SetConfig+0x346>
 80057c8:	2304      	movs	r3, #4
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e149      	b.n	8005a62 <UART_SetConfig+0x346>
 80057ce:	2308      	movs	r3, #8
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e146      	b.n	8005a62 <UART_SetConfig+0x346>
 80057d4:	2310      	movs	r3, #16
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e143      	b.n	8005a62 <UART_SetConfig+0x346>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a84      	ldr	r2, [pc, #528]	; (80059f0 <UART_SetConfig+0x2d4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d132      	bne.n	800584a <UART_SetConfig+0x12e>
 80057e4:	4b81      	ldr	r3, [pc, #516]	; (80059ec <UART_SetConfig+0x2d0>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ea:	f003 030c 	and.w	r3, r3, #12
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	d828      	bhi.n	8005844 <UART_SetConfig+0x128>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0xdc>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	0800582d 	.word	0x0800582d
 80057fc:	08005845 	.word	0x08005845
 8005800:	08005845 	.word	0x08005845
 8005804:	08005845 	.word	0x08005845
 8005808:	08005839 	.word	0x08005839
 800580c:	08005845 	.word	0x08005845
 8005810:	08005845 	.word	0x08005845
 8005814:	08005845 	.word	0x08005845
 8005818:	08005833 	.word	0x08005833
 800581c:	08005845 	.word	0x08005845
 8005820:	08005845 	.word	0x08005845
 8005824:	08005845 	.word	0x08005845
 8005828:	0800583f 	.word	0x0800583f
 800582c:	2300      	movs	r3, #0
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e117      	b.n	8005a62 <UART_SetConfig+0x346>
 8005832:	2302      	movs	r3, #2
 8005834:	77fb      	strb	r3, [r7, #31]
 8005836:	e114      	b.n	8005a62 <UART_SetConfig+0x346>
 8005838:	2304      	movs	r3, #4
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e111      	b.n	8005a62 <UART_SetConfig+0x346>
 800583e:	2308      	movs	r3, #8
 8005840:	77fb      	strb	r3, [r7, #31]
 8005842:	e10e      	b.n	8005a62 <UART_SetConfig+0x346>
 8005844:	2310      	movs	r3, #16
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e10b      	b.n	8005a62 <UART_SetConfig+0x346>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a69      	ldr	r2, [pc, #420]	; (80059f4 <UART_SetConfig+0x2d8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d120      	bne.n	8005896 <UART_SetConfig+0x17a>
 8005854:	4b65      	ldr	r3, [pc, #404]	; (80059ec <UART_SetConfig+0x2d0>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800585e:	2b30      	cmp	r3, #48	; 0x30
 8005860:	d013      	beq.n	800588a <UART_SetConfig+0x16e>
 8005862:	2b30      	cmp	r3, #48	; 0x30
 8005864:	d814      	bhi.n	8005890 <UART_SetConfig+0x174>
 8005866:	2b20      	cmp	r3, #32
 8005868:	d009      	beq.n	800587e <UART_SetConfig+0x162>
 800586a:	2b20      	cmp	r3, #32
 800586c:	d810      	bhi.n	8005890 <UART_SetConfig+0x174>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <UART_SetConfig+0x15c>
 8005872:	2b10      	cmp	r3, #16
 8005874:	d006      	beq.n	8005884 <UART_SetConfig+0x168>
 8005876:	e00b      	b.n	8005890 <UART_SetConfig+0x174>
 8005878:	2300      	movs	r3, #0
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e0f1      	b.n	8005a62 <UART_SetConfig+0x346>
 800587e:	2302      	movs	r3, #2
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e0ee      	b.n	8005a62 <UART_SetConfig+0x346>
 8005884:	2304      	movs	r3, #4
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e0eb      	b.n	8005a62 <UART_SetConfig+0x346>
 800588a:	2308      	movs	r3, #8
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e0e8      	b.n	8005a62 <UART_SetConfig+0x346>
 8005890:	2310      	movs	r3, #16
 8005892:	77fb      	strb	r3, [r7, #31]
 8005894:	e0e5      	b.n	8005a62 <UART_SetConfig+0x346>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a57      	ldr	r2, [pc, #348]	; (80059f8 <UART_SetConfig+0x2dc>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d120      	bne.n	80058e2 <UART_SetConfig+0x1c6>
 80058a0:	4b52      	ldr	r3, [pc, #328]	; (80059ec <UART_SetConfig+0x2d0>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058aa:	2bc0      	cmp	r3, #192	; 0xc0
 80058ac:	d013      	beq.n	80058d6 <UART_SetConfig+0x1ba>
 80058ae:	2bc0      	cmp	r3, #192	; 0xc0
 80058b0:	d814      	bhi.n	80058dc <UART_SetConfig+0x1c0>
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d009      	beq.n	80058ca <UART_SetConfig+0x1ae>
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d810      	bhi.n	80058dc <UART_SetConfig+0x1c0>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <UART_SetConfig+0x1a8>
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d006      	beq.n	80058d0 <UART_SetConfig+0x1b4>
 80058c2:	e00b      	b.n	80058dc <UART_SetConfig+0x1c0>
 80058c4:	2300      	movs	r3, #0
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e0cb      	b.n	8005a62 <UART_SetConfig+0x346>
 80058ca:	2302      	movs	r3, #2
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e0c8      	b.n	8005a62 <UART_SetConfig+0x346>
 80058d0:	2304      	movs	r3, #4
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e0c5      	b.n	8005a62 <UART_SetConfig+0x346>
 80058d6:	2308      	movs	r3, #8
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e0c2      	b.n	8005a62 <UART_SetConfig+0x346>
 80058dc:	2310      	movs	r3, #16
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e0bf      	b.n	8005a62 <UART_SetConfig+0x346>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a45      	ldr	r2, [pc, #276]	; (80059fc <UART_SetConfig+0x2e0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d125      	bne.n	8005938 <UART_SetConfig+0x21c>
 80058ec:	4b3f      	ldr	r3, [pc, #252]	; (80059ec <UART_SetConfig+0x2d0>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058fa:	d017      	beq.n	800592c <UART_SetConfig+0x210>
 80058fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005900:	d817      	bhi.n	8005932 <UART_SetConfig+0x216>
 8005902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005906:	d00b      	beq.n	8005920 <UART_SetConfig+0x204>
 8005908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590c:	d811      	bhi.n	8005932 <UART_SetConfig+0x216>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <UART_SetConfig+0x1fe>
 8005912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005916:	d006      	beq.n	8005926 <UART_SetConfig+0x20a>
 8005918:	e00b      	b.n	8005932 <UART_SetConfig+0x216>
 800591a:	2300      	movs	r3, #0
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e0a0      	b.n	8005a62 <UART_SetConfig+0x346>
 8005920:	2302      	movs	r3, #2
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e09d      	b.n	8005a62 <UART_SetConfig+0x346>
 8005926:	2304      	movs	r3, #4
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e09a      	b.n	8005a62 <UART_SetConfig+0x346>
 800592c:	2308      	movs	r3, #8
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e097      	b.n	8005a62 <UART_SetConfig+0x346>
 8005932:	2310      	movs	r3, #16
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e094      	b.n	8005a62 <UART_SetConfig+0x346>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a30      	ldr	r2, [pc, #192]	; (8005a00 <UART_SetConfig+0x2e4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d125      	bne.n	800598e <UART_SetConfig+0x272>
 8005942:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <UART_SetConfig+0x2d0>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800594c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005950:	d017      	beq.n	8005982 <UART_SetConfig+0x266>
 8005952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005956:	d817      	bhi.n	8005988 <UART_SetConfig+0x26c>
 8005958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800595c:	d00b      	beq.n	8005976 <UART_SetConfig+0x25a>
 800595e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005962:	d811      	bhi.n	8005988 <UART_SetConfig+0x26c>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <UART_SetConfig+0x254>
 8005968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596c:	d006      	beq.n	800597c <UART_SetConfig+0x260>
 800596e:	e00b      	b.n	8005988 <UART_SetConfig+0x26c>
 8005970:	2301      	movs	r3, #1
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e075      	b.n	8005a62 <UART_SetConfig+0x346>
 8005976:	2302      	movs	r3, #2
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	e072      	b.n	8005a62 <UART_SetConfig+0x346>
 800597c:	2304      	movs	r3, #4
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e06f      	b.n	8005a62 <UART_SetConfig+0x346>
 8005982:	2308      	movs	r3, #8
 8005984:	77fb      	strb	r3, [r7, #31]
 8005986:	e06c      	b.n	8005a62 <UART_SetConfig+0x346>
 8005988:	2310      	movs	r3, #16
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e069      	b.n	8005a62 <UART_SetConfig+0x346>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1c      	ldr	r2, [pc, #112]	; (8005a04 <UART_SetConfig+0x2e8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d137      	bne.n	8005a08 <UART_SetConfig+0x2ec>
 8005998:	4b14      	ldr	r3, [pc, #80]	; (80059ec <UART_SetConfig+0x2d0>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059a6:	d017      	beq.n	80059d8 <UART_SetConfig+0x2bc>
 80059a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059ac:	d817      	bhi.n	80059de <UART_SetConfig+0x2c2>
 80059ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b2:	d00b      	beq.n	80059cc <UART_SetConfig+0x2b0>
 80059b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b8:	d811      	bhi.n	80059de <UART_SetConfig+0x2c2>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <UART_SetConfig+0x2aa>
 80059be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c2:	d006      	beq.n	80059d2 <UART_SetConfig+0x2b6>
 80059c4:	e00b      	b.n	80059de <UART_SetConfig+0x2c2>
 80059c6:	2300      	movs	r3, #0
 80059c8:	77fb      	strb	r3, [r7, #31]
 80059ca:	e04a      	b.n	8005a62 <UART_SetConfig+0x346>
 80059cc:	2302      	movs	r3, #2
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e047      	b.n	8005a62 <UART_SetConfig+0x346>
 80059d2:	2304      	movs	r3, #4
 80059d4:	77fb      	strb	r3, [r7, #31]
 80059d6:	e044      	b.n	8005a62 <UART_SetConfig+0x346>
 80059d8:	2308      	movs	r3, #8
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	e041      	b.n	8005a62 <UART_SetConfig+0x346>
 80059de:	2310      	movs	r3, #16
 80059e0:	77fb      	strb	r3, [r7, #31]
 80059e2:	e03e      	b.n	8005a62 <UART_SetConfig+0x346>
 80059e4:	efff69f3 	.word	0xefff69f3
 80059e8:	40011000 	.word	0x40011000
 80059ec:	40023800 	.word	0x40023800
 80059f0:	40004400 	.word	0x40004400
 80059f4:	40004800 	.word	0x40004800
 80059f8:	40004c00 	.word	0x40004c00
 80059fc:	40005000 	.word	0x40005000
 8005a00:	40011400 	.word	0x40011400
 8005a04:	40007800 	.word	0x40007800
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a71      	ldr	r2, [pc, #452]	; (8005bd4 <UART_SetConfig+0x4b8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d125      	bne.n	8005a5e <UART_SetConfig+0x342>
 8005a12:	4b71      	ldr	r3, [pc, #452]	; (8005bd8 <UART_SetConfig+0x4bc>)
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a20:	d017      	beq.n	8005a52 <UART_SetConfig+0x336>
 8005a22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a26:	d817      	bhi.n	8005a58 <UART_SetConfig+0x33c>
 8005a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2c:	d00b      	beq.n	8005a46 <UART_SetConfig+0x32a>
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	d811      	bhi.n	8005a58 <UART_SetConfig+0x33c>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <UART_SetConfig+0x324>
 8005a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a3c:	d006      	beq.n	8005a4c <UART_SetConfig+0x330>
 8005a3e:	e00b      	b.n	8005a58 <UART_SetConfig+0x33c>
 8005a40:	2300      	movs	r3, #0
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e00d      	b.n	8005a62 <UART_SetConfig+0x346>
 8005a46:	2302      	movs	r3, #2
 8005a48:	77fb      	strb	r3, [r7, #31]
 8005a4a:	e00a      	b.n	8005a62 <UART_SetConfig+0x346>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e007      	b.n	8005a62 <UART_SetConfig+0x346>
 8005a52:	2308      	movs	r3, #8
 8005a54:	77fb      	strb	r3, [r7, #31]
 8005a56:	e004      	b.n	8005a62 <UART_SetConfig+0x346>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e001      	b.n	8005a62 <UART_SetConfig+0x346>
 8005a5e:	2310      	movs	r3, #16
 8005a60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6a:	d15a      	bne.n	8005b22 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005a6c:	7ffb      	ldrb	r3, [r7, #31]
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d827      	bhi.n	8005ac2 <UART_SetConfig+0x3a6>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x35c>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005aa5 	.word	0x08005aa5
 8005a80:	08005aad 	.word	0x08005aad
 8005a84:	08005ac3 	.word	0x08005ac3
 8005a88:	08005ab3 	.word	0x08005ab3
 8005a8c:	08005ac3 	.word	0x08005ac3
 8005a90:	08005ac3 	.word	0x08005ac3
 8005a94:	08005ac3 	.word	0x08005ac3
 8005a98:	08005abb 	.word	0x08005abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9c:	f7fd fec2 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005aa0:	61b8      	str	r0, [r7, #24]
        break;
 8005aa2:	e013      	b.n	8005acc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa4:	f7fd fed2 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8005aa8:	61b8      	str	r0, [r7, #24]
        break;
 8005aaa:	e00f      	b.n	8005acc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aac:	4b4b      	ldr	r3, [pc, #300]	; (8005bdc <UART_SetConfig+0x4c0>)
 8005aae:	61bb      	str	r3, [r7, #24]
        break;
 8005ab0:	e00c      	b.n	8005acc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab2:	f7fd fdc9 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8005ab6:	61b8      	str	r0, [r7, #24]
        break;
 8005ab8:	e008      	b.n	8005acc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005abe:	61bb      	str	r3, [r7, #24]
        break;
 8005ac0:	e004      	b.n	8005acc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	77bb      	strb	r3, [r7, #30]
        break;
 8005aca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d074      	beq.n	8005bbc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	005a      	lsls	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	441a      	add	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	d916      	bls.n	8005b1c <UART_SetConfig+0x400>
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af4:	d212      	bcs.n	8005b1c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f023 030f 	bic.w	r3, r3, #15
 8005afe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	89fa      	ldrh	r2, [r7, #14]
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	e04f      	b.n	8005bbc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	77bb      	strb	r3, [r7, #30]
 8005b20:	e04c      	b.n	8005bbc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b22:	7ffb      	ldrb	r3, [r7, #31]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d828      	bhi.n	8005b7a <UART_SetConfig+0x45e>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <UART_SetConfig+0x414>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b55 	.word	0x08005b55
 8005b34:	08005b5d 	.word	0x08005b5d
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	08005b7b 	.word	0x08005b7b
 8005b40:	08005b6b 	.word	0x08005b6b
 8005b44:	08005b7b 	.word	0x08005b7b
 8005b48:	08005b7b 	.word	0x08005b7b
 8005b4c:	08005b7b 	.word	0x08005b7b
 8005b50:	08005b73 	.word	0x08005b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b54:	f7fd fe66 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005b58:	61b8      	str	r0, [r7, #24]
        break;
 8005b5a:	e013      	b.n	8005b84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b5c:	f7fd fe76 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8005b60:	61b8      	str	r0, [r7, #24]
        break;
 8005b62:	e00f      	b.n	8005b84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b64:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <UART_SetConfig+0x4c0>)
 8005b66:	61bb      	str	r3, [r7, #24]
        break;
 8005b68:	e00c      	b.n	8005b84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6a:	f7fd fd6d 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8005b6e:	61b8      	str	r0, [r7, #24]
        break;
 8005b70:	e008      	b.n	8005b84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b76:	61bb      	str	r3, [r7, #24]
        break;
 8005b78:	e004      	b.n	8005b84 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	77bb      	strb	r3, [r7, #30]
        break;
 8005b82:	bf00      	nop
    }

    if (pclk != 0U)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d018      	beq.n	8005bbc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	085a      	lsrs	r2, r3, #1
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	441a      	add	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b0f      	cmp	r3, #15
 8005ba2:	d909      	bls.n	8005bb8 <UART_SetConfig+0x49c>
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005baa:	d205      	bcs.n	8005bb8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60da      	str	r2, [r3, #12]
 8005bb6:	e001      	b.n	8005bbc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005bc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40007c00 	.word	0x40007c00
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	00f42400 	.word	0x00f42400

08005be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cde:	d10a      	bne.n	8005cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d34:	f7fb fa66 	bl	8001204 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d10e      	bne.n	8005d66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f817 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e00d      	b.n	8005d82 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b09c      	sub	sp, #112	; 0x70
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9a:	e0a5      	b.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	f000 80a1 	beq.w	8005ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb fa2d 	bl	8001204 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8005db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d13e      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ddc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e6      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	663b      	str	r3, [r7, #96]	; 0x60
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e067      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d04f      	beq.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e56:	d147      	bne.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
 8005e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e6      	bne.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eb4:	623a      	str	r2, [r7, #32]
 8005eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	69f9      	ldr	r1, [r7, #28]
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e5      	bne.n	8005e94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e010      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	f43f af4a 	beq.w	8005d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3770      	adds	r7, #112	; 0x70
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b095      	sub	sp, #84	; 0x54
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f38:	643b      	str	r3, [r7, #64]	; 0x40
 8005f3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d118      	bne.n	8005fba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f023 0310 	bic.w	r3, r3, #16
 8005f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6979      	ldr	r1, [r7, #20]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e6      	bne.n	8005f88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005fcc:	bf00      	nop
 8005fce:	3754      	adds	r7, #84	; 0x54
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fb7a 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	60bb      	str	r3, [r7, #8]
   return(result);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	61bb      	str	r3, [r7, #24]
 800602c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6979      	ldr	r1, [r7, #20]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	613b      	str	r3, [r7, #16]
   return(result);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e6      	bne.n	800600c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fb46 	bl	80056dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006050:	bf00      	nop
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <__libc_init_array>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	4d0d      	ldr	r5, [pc, #52]	; (8006090 <__libc_init_array+0x38>)
 800605c:	4c0d      	ldr	r4, [pc, #52]	; (8006094 <__libc_init_array+0x3c>)
 800605e:	1b64      	subs	r4, r4, r5
 8006060:	10a4      	asrs	r4, r4, #2
 8006062:	2600      	movs	r6, #0
 8006064:	42a6      	cmp	r6, r4
 8006066:	d109      	bne.n	800607c <__libc_init_array+0x24>
 8006068:	4d0b      	ldr	r5, [pc, #44]	; (8006098 <__libc_init_array+0x40>)
 800606a:	4c0c      	ldr	r4, [pc, #48]	; (800609c <__libc_init_array+0x44>)
 800606c:	f000 f820 	bl	80060b0 <_init>
 8006070:	1b64      	subs	r4, r4, r5
 8006072:	10a4      	asrs	r4, r4, #2
 8006074:	2600      	movs	r6, #0
 8006076:	42a6      	cmp	r6, r4
 8006078:	d105      	bne.n	8006086 <__libc_init_array+0x2e>
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006080:	4798      	blx	r3
 8006082:	3601      	adds	r6, #1
 8006084:	e7ee      	b.n	8006064 <__libc_init_array+0xc>
 8006086:	f855 3b04 	ldr.w	r3, [r5], #4
 800608a:	4798      	blx	r3
 800608c:	3601      	adds	r6, #1
 800608e:	e7f2      	b.n	8006076 <__libc_init_array+0x1e>
 8006090:	080060e8 	.word	0x080060e8
 8006094:	080060e8 	.word	0x080060e8
 8006098:	080060e8 	.word	0x080060e8
 800609c:	080060ec 	.word	0x080060ec

080060a0 <memset>:
 80060a0:	4402      	add	r2, r0
 80060a2:	4603      	mov	r3, r0
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d100      	bne.n	80060aa <memset+0xa>
 80060a8:	4770      	bx	lr
 80060aa:	f803 1b01 	strb.w	r1, [r3], #1
 80060ae:	e7f9      	b.n	80060a4 <memset+0x4>

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
